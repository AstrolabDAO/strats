{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.25\"},\"sources\":{\"src/implementations/Lodestar/LodestarArbitrage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"../../libs/AsArrays.sol\\\";\\nimport \\\"../../abstract/StrategyV5.sol\\\";\\nimport \\\"./interfaces/ILodestar.sol\\\";\\nimport {IPoolAddressesProvider, IAavePool} from \\\"../Aave/interfaces/v3/IAave.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title Lodestar Arbitrage - Dynamic liquidity providing on Lodestar\\n * @author Astrolab DAO\\n * @notice Liquidity providing strategy for Lodestar (https://lodestarfinance.io/)\\n * @dev Asset->inputs->LPs->inputs->asset\\n */\\ncontract LodestarArbitrage is StrategyV5 {\\n  using AsMaths for uint256;\\n  using AsArrays for uint256;\\n  using AsArrays for address;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  struct Params {\\n    IUnitroller unitroller;\\n    IPoolAddressesProvider aavePoolProvider;\\n    uint256 leverage; // 100 == 1:1 leverage\\n  }\\n\\n  struct Pending {\\n    bool investing;\\n    bytes data;\\n  }\\n\\n  Params public params;\\n\\n  constructor(address _accessController) StrategyV5(_accessController) {}\\n\\n  function _setParams(bytes memory _params) internal override {\\n    params = abi.decode(_params, (Params));\\n    (, uint256 ltv, ) = params.unitroller.markets(address(lpTokens[0])); // base 1e18\\n    unchecked {\\n      if (\\n        inputWeights[1] != 0 || (100 * 1e18) / (1e18 - ltv) <= params.leverage\\n      ) {\\n        // base max leverage check\\n        revert Errors.Unauthorized();\\n      }\\n    }\\n    _setLpTokenAllowances(AsMaths.MAX_UINT256);\\n    params.unitroller.enterMarkets(\\n      address(lpTokens[0]).toArray(address(lpTokens[1]))\\n    );\\n  }\\n\\n  function _leveraged(int256 _cash) internal view returns (int256 result) {\\n    unchecked {\\n      return (_cash * int256(params.leverage)) / 100;\\n    }\\n  }\\n\\n  function _debtForSupply(\\n    uint256 _cash,\\n    bool _loanOnly\\n  ) internal view returns (uint256) {\\n    unchecked {\\n      return\\n        // convert supply amount (in inputs[0]) to debt (in inputs[1])\\n        oracle().convert(address(inputs[0]), _cash, address(inputs[1])).mulDiv(\\n          params.leverage - (_loanOnly ? 0 : 100),\\n          params.leverage\\n        );\\n    }\\n  }\\n\\n  function _supplyForDebt(\\n    uint256 _debt,\\n    bool _loanOnly\\n  ) internal view returns (uint256) {\\n    unchecked {\\n      return\\n        oracle().convert(address(inputs[1]), _debt, address(inputs[0])).mulDiv(\\n          params.leverage,\\n          params.leverage - (_loanOnly ? 0 : 100)\\n        );\\n    }\\n  }\\n\\n  function _redemptionForLoan(uint256 _loan) internal view returns (uint256) {\\n    unchecked {\\n      return\\n        AsMaths.min(\\n          lpTokens[0].balanceOf(address(this)),\\n          _inputToStake(_supplyForDebt(_loan, false).addBp(\\n            _4626StorageExt().maxSlippageBps\\n          ), 0)\\n        );\\n    }\\n  }\\n\\n  function _outstandingDebt() internal view returns (uint256) {\\n    return\\n      ILToken(address(lpTokens[1])).borrowBalanceStored(address(this));\\n  }\\n\\n  function _supply0() internal view returns (uint256) {\\n    return _stakeToInput(lpTokens[0].balanceOf(address(this)), 0);\\n  }\\n\\n  function _excessDebt(uint256 _supply) internal view returns (int256) {\\n    unchecked {\\n      // compute theoretical debt for the current input0 supply + addon\\n      return\\n        int256(_outstandingDebt()) - int256(_debtForSupply(_supply, false)); // actual - target\\n    }\\n  }\\n\\n  function _debtNeed(int256 _previewAmount0) internal view returns (uint256) {\\n    unchecked {\\n      return\\n        uint256(\\n          -AsMaths.min(\\n            _excessDebt(\\n              uint256(int256(_supply0()) + _leveraged(_previewAmount0))\\n            ),\\n            0\\n          )\\n        );\\n    }\\n  }\\n\\n  function _repaymentNeed(\\n    int256 _previewAmount0\\n  ) internal view returns (uint256) {\\n    uint256 supply = _supply0();\\n    unchecked {\\n      return\\n        inputWeights[0] == 0\\n          ? supply.addBp(_4626StorageExt().maxSlippageBps)\\n          : uint256(\\n            AsMaths.max(\\n              _excessDebt(\\n                uint256(int256(supply) - _leveraged(_previewAmount0))\\n              ),\\n            0\\n          )\\n        );\\n    }\\n  }\\n\\n  function _previewSwapAddons(\\n    uint256[8] calldata _previewAmounts,\\n    bool _investing\\n  )\\n    internal\\n    view\\n    override\\n    returns (\\n      address[8] memory from,\\n      address[8] memory to,\\n      uint256[8] memory amounts\\n    )\\n  {\\n    if (_investing) {\\n      from[0] = address(inputs[1]); // eg. FDUSD\\n      to[0] = address(inputs[0]); // eg. USDC\\n      amounts[0] = _debtNeed(int256(_previewAmounts[0])) - 100; // borrow target - 100 wei error margin\\n      if (address(inputs[0]) != address(asset)) {\\n        amounts[0] = amounts[0].subBp(_4626StorageExt().maxSlippageBps);\\n      }\\n    } else {\\n      from[0] = address(inputs[0]); // eg. USDC\\n      to[0] = address(inputs[1]); // eg. FDUSD\\n      amounts[0] = oracle()\\n        .convert(\\n          address(inputs[1]),\\n          _repaymentNeed(int256(_previewAmounts[0])),\\n          address(inputs[0])\\n        )\\n        .addBp(_4626StorageExt().maxSlippageBps); // repay debt\\n    }\\n  }\\n\\n  function _stake(\\n    uint256 _index,\\n    uint256 _amount,\\n    bytes[] calldata _params\\n  ) internal override {\\n    if (_index > 0) {\\n      return; // no need to stake input[1] tokens (eg. FDUSD)\\n    }\\n    // flashloan to leverage amount[0] converted in input[0] (eg. USDC)\\n    _flashLoan(_amount, true, _params);\\n    // cf. executeOperation() with _investing == true for the flashloan callback\\n  }\\n\\n  function _leverage(\\n    uint256,\\n    uint256 _loan,\\n    uint256 _due,\\n    bytes memory _addonParams\\n  ) internal {\\n    // deposit the input[0] tokens (eg. USDC) as collateral\\n    unchecked {\\n      ILToken(address(lpTokens[0])).mint(\\n        _loan.mulDiv(params.leverage, params.leverage - 100)\\n      );\\n    }\\n\\n    // convert collateral from input[0] (eg. USDC) to input[1] target debt (eg. FDUSD)\\n    uint256 _debt = _debtForSupply(_loan, true);\\n\\n    // borrow the input[1] tokens (eg. FDUSD) against the collateral (1/(1-LTV) == leverage)\\n    ILToken(address(lpTokens[1])).borrow(_debt);\\n\\n    // swap the borrowed tokens (eg. FDUSD) to input[0] (eg. USDC)\\n    swapper.decodeAndSwap({\\n      _input: address(inputs[1]),\\n      _output: address(inputs[0]),\\n      _amount: _debt,\\n      _params: _addonParams\\n    });\\n\\n    // // swap slippage check\\n    // if (\\n    //   oracle().convert(\\n    //     address(inputs[0]),\\n    //     received,\\n    //     address(inputs[1])\\n    //   ) < spent.subBp(_4626StorageExt().maxSlippageBps)\\n    // ) {\\n    //   revert Errors.AmountTooLow(received);\\n    // }\\n\\n    uint256 dust = inputs[0].balanceOf(address(this)); // received + dust\\n    // deposit inputs[0] dust back into the pool\\n    if (address(inputs[0]) != address(asset)) {\\n      unchecked {\\n        if (dust > _due) {\\n          ILToken(address(lpTokens[0])).mint(dust - _due);\\n        } else {\\n          // if the swap proceeds are less than the due amount, redeem some supply\\n          ILToken(address(lpTokens[0])).redeem(oracle().convert(address(inputs[1]), _due - dust, address(inputs[0])));\\n        }\\n      }\\n    }\\n\\n    // repay inputs[1] debt with dust\\n    dust = inputs[1].balanceOf(address(this));\\n    if (address(inputs[1]) != address(asset) && dust > 0) {\\n      ILToken(address(lpTokens[1])).repayBorrow(dust);\\n    }\\n\\n    // we end up with enough input[0] (swapped from invested assets + input[1]) to pay the flashloan back\\n  }\\n\\n  function _afterInvest(\\n    uint256 _amount,\\n    bytes[] calldata _params\\n  ) internal override {\\n    // no need to repay flashloan\\n  }\\n\\n  function _unstake(\\n    uint256 _index,\\n    uint256 _amount,\\n    bytes[] calldata _params\\n  ) internal override {\\n    if (_index > 0) {\\n      return; // no need to unstake input[1] tokens (eg. FDUSD)\\n    }\\n    uint256 inputAmount = _stakeToInput(_amount, _index);\\n    // flashloan to leverage amount[0] converted in input[0] (eg. USDC)\\n    // cf. executeOperation() with _investing == false for the flashloan callback\\n    _flashLoan(inputAmount, false, _params);\\n  }\\n\\n  function _deleverage(\\n    uint256 _liquidatedAmount0,\\n    uint256 _loan,\\n    uint256 _due,\\n    bytes memory _addonParams\\n  ) internal {\\n\\n    // repay debt\\n    ILToken(address(lpTokens[1])).repayBorrow(\\n      AsMaths.min(\\n        _loan,\\n        _outstandingDebt()\\n      )\\n    );\\n\\n    // deleverage\\n    uint256 redeemed = inputs[0].balanceOf(address(this));\\n    ILToken(address(lpTokens[0])).redeem(_redemptionForLoan(_loan));\\n    redeemed = inputs[0].balanceOf(address(this)) - redeemed;\\n\\n    // swap enough to pay the flashloan back\\n    (uint256 received, ) = swapper.decodeAndSwap({\\n      _input: address(inputs[0]),\\n      _output: address(inputs[1]),\\n      _amount: inputs[0].balanceOf(address(this)), // toSwap + _liquidated + cash is sent, the Swapper will send back the difference\\n      _params: _addonParams\\n    });\\n\\n    unchecked {\\n      // if asset != input[1], use dust to repay a bit more debt\\n      if (received > _due && address(asset) != address(inputs[1])) {\\n        uint256 outstandingDebt = _outstandingDebt();\\n        if (outstandingDebt > 0) {\\n          uint256 repayment = AsMaths.min(received - _due, outstandingDebt);\\n          ILToken(address(lpTokens[1])).repayBorrow(\\n            repayment\\n          );\\n          received -= repayment;\\n        }\\n        // if we still have input[1] left, provide it as collateral (used by further borrows)\\n        if (received > _due) {\\n          ILToken(address(lpTokens[1])).mint(\\n            received - _due\\n          );\\n        }\\n      }\\n      uint256 inputBalance = inputs[0].balanceOf(address(this));\\n      _liquidatedAmount0 = _liquidatedAmount0.addBp(5); // .05% addon to absorb price changes since previewSwapAddons()\\n      if (inputBalance < _liquidatedAmount0) {\\n        ILToken(address(lpTokens[0])).redeem(\\n          AsMaths.min(\\n            _inputToStake(oracle().convert(address(inputs[1]), _liquidatedAmount0 - inputBalance, address(inputs[0])), 0),\\n            lpTokens[0].balanceOf(address(this))\\n          )\\n        );\\n      }\\n    }\\n    // we end up with just enough input[1] to pay the flashloan back and input[0] to satisfy the liquidate() call\\n  }\\n\\n  function _afterLiquidate(uint256, bytes[] calldata) internal override {\\n    // check if we've got leftovers in input[0] after swapping back to assets\\n    uint256 inputBalance = inputs[0].balanceOf(address(this));\\n    if (inputBalance > 0 && address(asset) != address(inputs[0])) {\\n      // if the deleverage proceeds are more than the due amount, repay some debt\\n      ILToken(address(lpTokens[0])).mint(inputBalance);\\n    }\\n  }\\n\\n  function _flashLoan(\\n    uint256 _amount,\\n    bool _investing,\\n    bytes[] calldata _params\\n  ) internal {\\n    if (_params.length < 2) {\\n      revert Errors.InvalidData(); // missing swap addon calldata\\n    }\\n\\n    IAavePool(params.aavePoolProvider.getPool()).flashLoanSimple(\\n      address(this),\\n      _investing ? address(inputs[0]) : address(inputs[1]),\\n      _investing\\n        ? _supplyForDebt(_debtNeed(int256(_amount)), true)\\n        : _repaymentNeed(int256(_amount)),\\n      abi.encode(_investing, _amount, _params[2]), // investing\\n      0 // project identifier eg. for fee exemption\\n    );\\n  }\\n\\n  // AAVE FlashLoanReceiverSimple implementation\\n  // - _stake()->executeOperation(_investing=true)->_leverage()\\n  // - _unstake()->executeOperation(_investing=false)->_deleverage()\\n  function executeOperation(\\n    address _token,\\n    uint256 _loan,\\n    uint256 _fee,\\n    address,\\n    bytes calldata _params\\n  ) external returns (bool) {\\n    address lender = params.aavePoolProvider.getPool();\\n    if (msg.sender != lender) {\\n      revert Errors.Unauthorized();\\n    }\\n\\n    unchecked {\\n      uint256 due = _loan + _fee;\\n      // check if investing or liquidating\\n      (bool investing, uint256 amount, bytes memory addonParams) = abi.decode(\\n        _params,\\n        (bool, uint256, bytes)\\n      );\\n      investing\\n        ? _leverage(amount, _loan, due, addonParams)\\n        : _deleverage(amount, _loan, due, addonParams);\\n      IERC20Metadata(_token).forceApprove(lender, due);\\n    }\\n    // approve the lending pool to get back loan+fee with the op proceeds+leftover cash balance\\n    return true;\\n  }\\n\\n  function _inputToStake(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view override returns (uint256) {\\n    unchecked {\\n      return\\n        (_amount * 1e18) /\\n        ILToken(address(lpTokens[_index])).exchangeRateStored(); // eg. 1e18*1e18/1e(36-8) = 1e12\\n    }\\n  }\\n\\n  function _stakeToInput(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view override returns (uint256) {\\n    unchecked {\\n      return\\n        (_amount * ILToken(address(lpTokens[_index])).exchangeRateStored()) /\\n        1e18; // eg. 1e12*1e(36-8)/1e18 = 1e18\\n    }\\n  }\\n\\n  function _investedInput(\\n    uint256 _index\\n  ) internal view override returns (uint256) {\\n    if (_index > 0) {\\n      return 0; // no need to unstake input[1] tokens (eg. FDUSD)\\n    }\\n    return\\n      _supply0().subMax0(\\n        oracle().convert(address(inputs[1]), _outstandingDebt(), address(inputs[0]))\\n      );\\n  }\\n\\n  function rewardsAvailable()\\n    public\\n    view\\n    override\\n    returns (uint256[] memory amounts)\\n  {\\n    uint256 mainReward = params.unitroller.compAccrued(address(this));\\n    return\\n      _rewardLength == 1\\n        ? mainReward.toArray()\\n        : mainReward.toArray(_balance(rewardTokens[1]));\\n  }\\n\\n  function claimRewards() public override returns (uint256[] memory amounts) {\\n    amounts = new uint256[](_rewardLength);\\n    params.unitroller.claimComp(address(this)); // claim LODE for all markets\\n    // wrap ARB native rewards if needed\\n    _wrapNative();\\n    unchecked {\\n      for (uint256 i = 0; i < _rewardLength; i++) {\\n        amounts[i] = IERC20Metadata(rewardTokens[i]).balanceOf(address(this));\\n      }\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/libs/AsCast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsCast Library - Astrolab's type casting library\\n * @author Astrolab DAO\\n */\\nlibrary AsCast {\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             ERRORS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  error ValueOutOfCastRange();\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             LOGIC                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int8 value\\n   * Counterpart to Solidity's `int8` operator\\n   */\\n  function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n    downcasted = int8(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int16 value\\n   * Counterpart to Solidity's `int16` operator\\n   */\\n  function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n    downcasted = int16(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int32 value\\n   * Counterpart to Solidity's `int32` operator\\n   */\\n  function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n    downcasted = int32(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int64 value\\n   * Counterpart to Solidity's `int64` operator\\n   */\\n  function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n    downcasted = int64(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int128 value\\n   * Counterpart to Solidity's `int128` operator\\n   */\\n  function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n    downcasted = int128(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int192 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int192 value\\n   * Counterpart to Solidity's `int192` operator (not directly supported)\\n   */\\n  function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n    downcasted = int192(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int224 from int256, reverting on overflow\\n   * @param value int256 to be downcasted\\n   * @return downcasted Downcasted int224 value\\n   * Counterpart to Solidity's `int224` operator (not directly supported)\\n   */\\n  function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n    downcasted = int224(value);\\n    if (downcasted != value) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int256 from uint256, reverting on overflow\\n   * @param value Uint256 to be downcasted\\n   * @return downcasted Downcasted int256 value\\n   * Counterpart to Solidity's `int256` operator\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256 downcasted) {\\n    downcasted = int256(value);\\n    if (downcasted < 0) {\\n      revert ValueOutOfCastRange();\\n    }\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to an 8-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for an 8-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as an 8-bit unsigned integer\\n   */\\n  function toUint8(uint256 x) internal pure returns (uint8) {\\n    if (x > type(uint8).max) revert ValueOutOfCastRange();\\n    return uint8(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 16-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 16-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 16-bit unsigned integer\\n   */\\n  function toUint16(uint256 x) internal pure returns (uint16) {\\n    if (x > type(uint16).max) revert ValueOutOfCastRange();\\n    return uint16(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 32-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 32-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 32-bit unsigned integer\\n   */\\n  function toUint32(uint256 x) internal pure returns (uint32) {\\n    if (x > type(uint32).max) revert ValueOutOfCastRange();\\n    return uint32(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 64-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 64-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 64-bit unsigned integer\\n   */\\n  function toUint64(uint256 x) internal pure returns (uint64) {\\n    if (x > type(uint64).max) revert ValueOutOfCastRange();\\n    return uint64(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 96-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 96-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 96-bit unsigned integer\\n   */\\n  function toUint96(uint256 x) internal pure returns (uint96) {\\n    if (x > type(uint96).max) revert ValueOutOfCastRange();\\n    return uint96(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 128-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 128-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 128-bit unsigned integer\\n   */\\n  function toUint128(uint256 x) internal pure returns (uint128) {\\n    if (x > type(uint128).max) revert ValueOutOfCastRange();\\n    return uint128(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 160-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 160-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 160-bit unsigned integer\\n   */\\n  function toUint160(uint256 x) internal pure returns (uint160) {\\n    if (x > type(uint160).max) revert ValueOutOfCastRange();\\n    return uint160(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 192-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 192-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 192-bit unsigned integer\\n   */\\n  function toUint192(uint256 x) internal pure returns (uint192) {\\n    if (x > type(uint192).max) revert ValueOutOfCastRange();\\n    return uint192(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 224-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 224-bit unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Input value as a 224-bit unsigned integer\\n   */\\n  function toUint224(uint256 x) internal pure returns (uint224) {\\n    if (x > type(uint224).max) revert ValueOutOfCastRange();\\n    return uint224(x);\\n  }\\n\\n  /**\\n   * @notice Converts an unsigned integer to a 256-bit unsigned integer\\n   * @dev Requires the input to be within the valid range for a 256-bit unsigned integer\\n   * @param x Input integer\\n   * @return Input value as a 256-bit unsigned integer\\n   */\\n  function toUint256(int256 x) internal pure returns (uint256) {\\n    if (x < 0) revert ValueOutOfCastRange();\\n    return uint256(x);\\n  }\\n\\n  /**\\n   * @dev Converts an address to bytes32\\n   * @param addr Address to be converted\\n   * @return Bytes32 representation of the address\\n   */\\n  function toBytes32(address addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(addr)));\\n  }\\n\\n  /**\\n   * @dev Converts a bytes32 value to an address\\n   * @param b Bytes32 value to convert\\n   * @return Converted address\\n   */\\n  function toAddress(bytes32 b) internal pure returns (address) {\\n    return address(toUint160(uint256(b)));\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/libs/AsArrays.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./AsCast.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsArrays Library - Astrolab's Array manipulation library\\n * @author Astrolab DAO\\n */\\nlibrary AsArrays {\\n  using AsCast for address;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              VIEWS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n * @notice Returns the sum of all elements in the array\\n   * @param self Storage array containing uint256 type variables\\n   * @return value Sum of all elements, does not check for overflow\\n   */\\n  function sum(uint256[] storage self) public view returns (uint256 value) {\\n    assembly {\\n      let ptr := mload(0x40) // free memory pointer\\n      mstore(ptr, self.slot) // store the array's slot\\n      mstore(0x40, add(ptr, 0x20)) // update the free memory pointer\\n      let len := sload(self.slot) // array length\\n\\n      for { let i := 0 } lt(i, len) { i := add(i, 1) } {\\n        let el := sload(add(keccak256(ptr, 0x20), i)) // load each element\\n        value := add(value, el) // accumulate the sum\\n      }\\n\\n      mstore(0x40, add(ptr, 0x20)) // update the free memory pointer\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the maximum value in the given array\\n   * @param self Array to find the maximum value from\\n   * @return value Maximum value in the array\\n   */\\n  function max(uint256[] storage self) public view returns (uint256 value) {\\n    assembly {\\n      let ptr := mload(0x40) // free memory pointer\\n      mstore(ptr, self.slot) // store the array's slot\\n      mstore(0x40, add(ptr, 0x20)) // update the free memory pointer\\n      value := sload(keccak256(ptr, 0x20)) // init max value with the first element\\n      let len := sload(self.slot) // array length\\n\\n      // iterate over the array\\n      for { let i := 1 } lt(i, len) { i := add(i, 1) } {\\n        let el := sload(add(keccak256(ptr, 0x20), i)) // load element\\n        if gt(el, value) { value := el } // update max value\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the minimum value in the given array\\n   * @param self Array to find the minimum value from\\n   * @return value Minimum value in the array\\n   */\\n  function min(uint256[] storage self) public view returns (uint256 value) {\\n    assembly {\\n      let ptr := mload(0x40) // free memory pointer\\n      mstore(ptr, self.slot) // store the array's slot\\n      mstore(0x40, add(ptr, 0x20)) // update the free memory pointer\\n      value := sload(keccak256(ptr, 0x20)) // init min value with the first element\\n      let len := sload(self.slot) // array length\\n\\n      // iterate over the array\\n      for { let i := 1 } lt(i, len) { i := add(i, 1) } {\\n        let el := sload(add(keccak256(ptr, 0x20), i)) // load element\\n        if lt(el, value) { value := el } // update min value\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns a reference to the array\\n   * @param data array to be referenced\\n   * @return ptr reference of the array\\n   */\\n  function ref(uint256[] memory data) internal pure returns (uint256 ptr) {\\n    assembly {\\n      ptr := data\\n    }\\n  }\\n\\n  /**\\n   * @dev Fills a dynamic array with a specific value\\n   * @param a Value to fill the array with\\n   * @param n Size of the array\\n   * @return arr Filled array\\n   */\\n  function fill(uint8 a, uint64 n) internal pure returns (uint8[] memory arr) {\\n    arr = new uint8[](n);\\n    for (uint256 i = 0; i < n;) {\\n      arr[i] = a;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function fill(bytes32 a, uint64 n) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](n);\\n    for (uint256 i = 0; i < n;) {\\n      arr[i] = a;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function fill(uint256 a, uint64 n) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](n);\\n    for (uint256 i = 0; i < n;) {\\n      arr[i] = a;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a value to a one-element array\\n   * @param a Value to convert to an array\\n   * @return arr Resulting array\\n   */\\n  function toArray(uint8 a) internal pure returns (uint8[] memory arr) {\\n    arr = new uint8[](1);\\n    arr[0] = a;\\n  }\\n\\n  function toArray(uint8 a, uint8 b) internal pure returns (uint8[] memory arr) {\\n    arr = new uint8[](2);\\n    (arr[0], arr[1]) = (a, b);\\n  }\\n\\n  function toArray16(uint16 a) internal pure returns (uint16[] memory arr) {\\n    arr = new uint16[](1);\\n    arr[0] = a;\\n  }\\n\\n  function toArray16(uint16 a, uint16 b) internal pure returns (uint16[] memory arr) {\\n    arr = new uint16[](2);\\n    (arr[0], arr[1]) = (a, b);\\n  }\\n\\n  function toArray16(uint16 a, uint16 b, uint16 c, uint16 d) internal pure returns (uint16[] memory arr) {\\n    arr = new uint16[](4);\\n    (arr[0], arr[1], arr[2], arr[3]) = (a, b, c, d);\\n  }\\n\\n  function toArray(uint256 a) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](1);\\n    arr[0] = a;\\n  }\\n\\n  function toArray(uint256 a, uint256 b) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](2);\\n    (arr[0], arr[1]) = (a, b);\\n  }\\n\\n  function toArray(\\n    uint256 a,\\n    uint256 b,\\n    uint256 c\\n  ) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](3);\\n    (arr[0], arr[1], arr[2]) = (a, b, c);\\n  }\\n\\n  function toArray(address a) internal pure returns (address[] memory arr) {\\n    arr = new address[](1);\\n    arr[0] = a;\\n  }\\n\\n  function toArray(address a, address b) internal pure returns (address[] memory arr) {\\n    arr = new address[](2);\\n    (arr[0], arr[1]) = (a, b);\\n  }\\n\\n  function toArray(\\n    address a,\\n    address b,\\n    address c\\n  ) internal pure returns (address[] memory arr) {\\n    arr = new address[](3);\\n    (arr[0], arr[1], arr[2]) = (a, b, c);\\n  }\\n\\n  function toBytes32Array(address a) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](1);\\n    arr[0] = a.toBytes32();\\n  }\\n\\n  function toBytes32Array(\\n    address a,\\n    address b\\n  ) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](2);\\n    (arr[0], arr[1]) = (a.toBytes32(), b.toBytes32());\\n  }\\n\\n  function toBytes32Array(\\n    address a,\\n    address b,\\n    address c\\n  ) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](3);\\n    (arr[0], arr[1], arr[2]) = (a.toBytes32(), b.toBytes32(), c.toBytes32());\\n  }\\n\\n  function toArray(bytes32 a) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](1);\\n    arr[0] = a;\\n  }\\n\\n  function toArray(bytes32 a, bytes32 b) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](2);\\n    (arr[0], arr[1]) = (a, b);\\n  }\\n\\n  function toArray(bytes32 a, bytes32 b, bytes32 c) internal pure returns (bytes32[] memory arr) {\\n    arr = new bytes32[](3);\\n    (arr[0], arr[1], arr[2]) = (a, b, c);\\n  }\\n\\n  function toArray(bytes memory a) internal pure returns (bytes[] memory arr) {\\n    arr = new bytes[](1);\\n    arr[0] = a;\\n  }\\n\\n  function toArray(bytes memory a, bytes memory b) internal pure returns (bytes[] memory arr) {\\n    arr = new bytes[](2);\\n    (arr[0], arr[1]) = (a, b);\\n  }\\n\\n  function dynamic(uint256[8] memory fixedArray)\\n    internal\\n    pure\\n    returns (uint256[] memory arr)\\n  {\\n    arr = new uint256[](fixedArray.length);\\n    for (uint256 i = 0; i < fixedArray.length;) {\\n      arr[i] = fixedArray[i];\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function dynamic(uint16[8] memory fixedArray)\\n    internal\\n    pure\\n    returns (uint16[] memory arr)\\n  {\\n    arr = new uint16[](fixedArray.length);\\n    for (uint256 i = 0; i < fixedArray.length;) {\\n      arr[i] = fixedArray[i];\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  function dynamic(uint8[8] memory fixedArray) internal pure returns (uint8[] memory arr) {\\n    arr = new uint8[](fixedArray.length);\\n    for (uint256 i = 0; i < fixedArray.length;) {\\n      arr[i] = fixedArray[i];\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/abstract/AsTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsTypes - Astrolab's types\\n * @author Astrolab DAO\\n */\\n\\n/*═══════════════════════════════════════════════════════════════╗\\n║                              TYPES                             ║\\n╚═══════════════════════════════════════════════════════════════*/\\n\\n// As4626 fee structure\\nstruct Fees {\\n  uint64 perf; // Performance fee\\n  uint64 mgmt; // Management fee\\n  uint64 entry; // Entry fee\\n  uint64 exit; // Exit fee\\n  uint64 flash; // Flash loan fee\\n}\\n\\n// ERC-20 common metadata\\nstruct Erc20Metadata {\\n  string name;\\n  string symbol;\\n  uint8 decimals;\\n}\\n\\n// Strategy common init core addresses\\nstruct CoreAddresses {\\n  address wgas; // wrapped native (WETH/WAVAX...)\\n  address asset;\\n  address feeCollector;\\n  address swapper;\\n  address agent;\\n  address oracle;\\n}\\n\\n// Strategy common init params\\nstruct StrategyParams {\\n  Erc20Metadata erc20Metadata;\\n  CoreAddresses coreAddresses;\\n  Fees fees;\\n  address[] inputs;\\n  uint16[] inputWeights;\\n  address[] lpTokens;\\n  address[] rewardTokens;\\n  bytes extension;\\n}\\n\\n// Strategy owner requests\\nstruct OwnerRequests {\\n  uint256 totalDeposit; // total amount requested for deposit (unused since all deposit are synchronous)\\n  uint256 totalRedemption; // total shares requested for redemption (1e12)\\n  mapping(address => Erc7540Request) redemptionByReceiver; // mapping of ERC-7540 requests by owner\\n  mapping(address => Erc7540Request) depositByReceiver; // (unused since all deposit are synchronous)\\n}\\n\\n// ERC-7540 Requests\\nstruct Erc7540Request {\\n  uint256 id; // request ID\\n  uint256 timestamp; // timestamp of the request\\n  uint256 sharePrice; // share price at request time\\n  uint256 amount; // amount of assets to be deposited or shares to be redeemed\\n  address operator; // request initiator (can claim the owner's request)\\n}\\n\\n// Request context used to manage a vault's asynchronous deposits and redemptions\\nstruct Requests {\\n  uint256 redemptionLocktime; // locktime for redemption requests = 2 days\\n  uint256 totalDeposit; // total amount requested for deposit (unused since all deposit are synchronous)\\n  uint256 totalRedemption; // total shares requested for redemption (1e12)\\n  uint256 totalClaimableDeposit; // total asset to be deposited (unused since all deposit are synchronous)\\n  uint256 totalClaimableRedemption; // total shares claimable for redemption (1e12)\\n  uint256[8] liquidate; // liquidation requests amounts in each of `inputs`\\n  // uint256 totalLiquidate; // total liquidation request amount\\n  mapping(address => OwnerRequests) byOwner; // mapping of ERC-7540 requests by owner\\n}\\n\\n// Epoch context used to keep track of a vault's latest events\\nstruct Epoch {\\n  // dates\\n  uint64 feeCollection; // last fee collection timestamp\\n  uint64 liquidateRequest; // last liquidation request timestamp\\n  uint64 liquidate; // last liquidation timestamp\\n  uint64 harvest; // last harvest timestamp\\n  uint64 invest; // last invest timestamp\\n  // values\\n  uint256 sharePrice; // last used share sharePrice (at deposit/withdraw/liquidate time)\\n  uint256 accountedSharePrice; // last accounted share price (at fee collection time)\\n  uint256 accountedProfit; // last accounted profit (fee collection) 1e12\\n  uint256 accountedAssets; // last accounted total assets (fee collection)\\n  uint256 accountedSupply; // last accounted total supply (fee collection)\\n}\\n\\n// Strategy aggregation level\\nenum AggregationLevel {\\n  CROSS_CHAIN, // 0 (0x000...AAA1) eg. acUSD\\n  CHAIN, // 1 (0x000...AAA2) eg. acUSD-ETH\\n  CLASS // 2 (0x000...AAA3) eg. acUSD-ETH-AMM\\n}\\n\\nenum AverageType {\\n  ARITHMETIC,\\n  GEOMETRIC,\\n  HARMONIC,\\n  QUADRATIC,\\n  EXPONENTIAL\\n}\\n\\nlibrary Errors {\\n\\n  // errors only\\n  error InvalidInitStatus();\\n  error Unauthorized();\\n  error FailedDelegateCall();\\n  error AmountTooHigh(uint256 amount);\\n  error AmountTooLow(uint256 amount);\\n  error AddressZero();\\n  error InvalidData(); // invalid calldata / inputs\\n  error InvalidOrStaleValue(uint256 updateTime, int256 value);\\n  error FlashLoanDefault(address borrower, uint256 amount);\\n  error FlashLoanCallbackFailed();\\n  error AcceptanceExpired();\\n  error AcceptanceLocked();\\n  error ContractNonCompliant();\\n  error NotImplemented();\\n  error MissingOracle();\\n}\\n\\nlibrary Roles {\\n\\n  // constants only\\n  bytes32 internal constant ADMIN = 0x00;\\n  bytes32 internal constant KEEPER = keccak256(\\\"KEEPER\\\");\\n  bytes32 internal constant MANAGER = keccak256(\\\"MANAGER\\\");\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAsRescuable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\ninterface IAsRescuable {\\n  function RESCUE_TIMELOCK() external view returns (uint64);\\n  function RESCUE_VALIDITY() external view returns (uint64);\\n  function requestRescue(address _token) external;\\n  function rescue(address _token) external;\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.25;\\n\\ninterface IAccessController {\\n  event RoleAdminChanged(\\n    bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole\\n  );\\n  event RoleGranted(\\n    bytes32 indexed role, address indexed account, address indexed sender\\n  );\\n  event RoleRevoked(\\n    bytes32 indexed role, address indexed account, address indexed sender\\n  );\\n\\n  function hasRole(bytes32 _role, address account) external view returns (bool);\\n  function checkRole(bytes32 _role) external view;\\n  function checkRole(bytes32 _role, address _account) external view;\\n  function getRoleAdmin(bytes32 _role) external view returns (bytes32);\\n  function getMembers(bytes32 _role) external view returns (address[] memory);\\n  function getManagers() external view returns (address[] memory);\\n  function getKeepers() external view returns (address[] memory);\\n  function isAdmin(address _account) external view returns (bool);\\n  function isManager(address _account) external view returns (bool);\\n  function isKeeper(address _account) external view returns (bool);\\n  function renounceRole(bytes32 _role) external;\\n  function grantRole(bytes32 _role, address _account) external;\\n  function revokeRole(bytes32 _role, address _account) external;\\n  function acceptRole(bytes32 _role) external;\\n}\\n\",\"versionPragma\":\"^0.8.25\"},\"src/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\ninterface IPausable {\\n  function paused() external view returns (bool);\\n  function pause() external;\\n  function unpause() external;\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAsManageable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./IAccessController.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IAsManageable is IAccessController, IPausable {\\n  function isAdmin(address _account) external view returns (bool);\\n  function isManager(address _account) external view returns (bool);\\n  function isKeeper(address _account) external view returns (bool);\\n\\n  function ROLE_ACCEPTANCE_TIMELOCK() external view returns (uint256);\\n  function ROLE_ACCEPTANCE_VALIDITY() external view returns (uint256);\\n  function pendingChange(address account)\\n    external\\n    view\\n    returns (bytes32 role, address replacing, uint256 timestamp);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"versionPragma\":\"^0.8.20\"},\"src/interfaces/IAs4626.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./IAsManageable.sol\\\";\\nimport \\\"./IAsRescuable.sol\\\";\\nimport \\\"../abstract/AsTypes.sol\\\";\\n\\ninterface IAs4626 is IERC20Metadata, IAsRescuable, IAsManageable {\\n  // Events\\n  event Deposit(\\n    address indexed sender, address indexed owner, uint256 assets, uint256 shares\\n  );\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n  event DepositRequest(\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 indexed requestId,\\n    address sender,\\n    uint256 assets\\n  );\\n  event RedeemRequest(\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 indexed requestId,\\n    address sender,\\n    uint256 shares\\n  );\\n  event RedeemRequestCanceled(address indexed owner, uint256 assets);\\n  event FeeCollection(\\n    address indexed collector,\\n    uint256 totalAssets,\\n    uint256 sharePrice,\\n    uint256 profit,\\n    uint256 totalFees,\\n    uint256 sharesMinted\\n  );\\n\\n  // Initialization and settings\\n  function seedLiquidity(uint256 _seedDeposit, uint256 _maxTotalAssets) external;\\n  function setFeeCollector(address _feeCollector) external;\\n  function setMaxSlippageBps(uint16 _bps) external;\\n  function setMaxTotalAssets(uint256 _maxTotalAssets) external;\\n  function setFees(Fees calldata _fees) external;\\n  function setMinLiquidity(uint256 _amount) external;\\n  function setProfitCooldown(uint256 _cooldown) external;\\n  function setRedemptionRequestLocktime(uint256 _locktime) external;\\n\\n  // ERC-4626\\n  function mint(uint256 _shares, address _receiver) external returns (uint256);\\n  function deposit(uint256 _amount, address _receiver) external returns (uint256 shares);\\n  function safeMint(\\n    uint256 _shares,\\n    uint256 _maxAmount,\\n    address _receiver\\n  ) external returns (uint256);\\n  function safeDeposit(\\n    uint256 _amount,\\n    uint256 _minShareAmount,\\n    address _receiver\\n  ) external returns (uint256);\\n  function withdraw(\\n    uint256 _amount,\\n    address _receiver,\\n    address _owner\\n  ) external returns (uint256);\\n  function redeem(\\n    uint256 _shares,\\n    address _receiver,\\n    address _owner\\n  ) external returns (uint256);\\n  function safeWithdraw(\\n    uint256 _amount,\\n    uint256 _minAmount,\\n    address _receiver,\\n    address _owner\\n  ) external returns (uint256);\\n  function safeRedeem(\\n    uint256 _shares,\\n    uint256 _minAmountOut,\\n    address _receiver,\\n    address _owner\\n  ) external returns (uint256);\\n\\n  function previewMint(uint256, address) external view returns (uint256);\\n  function previewMint(uint256) external view returns (uint256);\\n  function previewDeposit(uint256, address) external view returns (uint256);\\n  function previewDeposit(uint256) external view returns (uint256);\\n  function previewWithdraw(uint256, address) external view returns (uint256);\\n  function previewWithdraw(uint256) external view returns (uint256);\\n  function previewRedeem(uint256, address) external view returns (uint256);\\n  function previewRedeem(uint256) external view returns (uint256);\\n  function maxDeposit(address) external view returns (uint256);\\n  function maxMint(address) external view returns (uint256);\\n  function maxWithdraw(address) external view returns (uint256);\\n  function maxRedeem(address) external view returns (uint256);\\n  function totalAssets() external view returns (uint256);\\n  function totalAccountedAssets() external view returns (uint256);\\n  function totalAccountedSupply() external view returns (uint256);\\n  function sharePrice() external view returns (uint256);\\n  function assetsOf(address) external view returns (uint256);\\n  function convertToShares(uint256, bool) external view returns (uint256);\\n  function convertToShares(uint256) external view returns (uint256);\\n  function convertToAssets(uint256, bool) external view returns (uint256);\\n  function convertToAssets(uint256) external view returns (uint256);\\n\\n  // accounting and fees\\n  function maxTotalAssets() external view returns (uint256);\\n  function minLiquidity() external view returns (uint256);\\n  function asset() external view returns (IERC20Metadata);\\n  function last() external view returns (Epoch memory);\\n  function fees() external view returns (Fees memory);\\n  function feeCollector() external view returns (address);\\n  function claimableTransactionFees() external view returns (uint256);\\n\\n  // ERC-7540\\n  function requestRedeem(\\n    uint256 _shares,\\n    address _operator,\\n    address _owner,\\n    bytes calldata _data\\n  ) external returns (uint256);\\n  function requestWithdraw(\\n    uint256 _amount,\\n    address _operator,\\n    address _owner,\\n    bytes calldata _data\\n  ) external returns (uint256);\\n  function cancelRedeemRequest(address _operator, address _owner) external;\\n\\n  function exemptionList(address) external view returns (bool);\\n  function availableClaimable() external view returns (uint256);\\n  function totalRedemptionRequest() external view returns (uint256);\\n  function totalClaimableRedemption() external view returns (uint256);\\n  function pendingRedeemRequest(address) external view returns (uint256);\\n  function pendingWithdrawRequest(address) external view returns (uint256);\\n  function isRequestClaimable(uint256) external view returns (bool);\\n  function maxClaimableAsset() external view returns (uint256);\\n  function claimableRedeemRequest(address) external view returns (uint256);\\n  function totalPendingRedemptionRequest() external view returns (uint256);\\n  function totalPendingWithdrawRequest() external view returns (uint256);\\n\\n  // Fees logic\\n  function collectFees() external returns (uint256);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/libs/AsMaths.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./AsCast.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsMaths Library\\n * @author Astrolab DAO - Astrolab's Maths library inspired by many (oz, abdk, prb, uniswap...)\\n */\\nlibrary AsMaths {\\n  using AsCast for uint256;\\n  using AsCast for int256;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              TYPES                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Enumeration for rounding modes\\n   * @dev Four rounding modes: Floor, Ceil, Trunc, Expand\\n   */\\n  enum Rounding {\\n    Floor, // Toward negative infinity\\n    Ceil, // Toward positive infinity\\n    Trunc, // Toward zero\\n    Expand // Away from zero\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             ERRORS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  error MathOverflowedMulDiv(); // overflow during multiplication or division\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // Constants\\n  uint256 internal constant WAD = 1e18; // 18 decimal fixed-point number\\n  uint256 internal constant RAY = 1e27; // 27 decimal fixed-point number\\n  uint256 internal constant BP_BASIS = 100_00; // 50% == 5_000 == 5e3\\n  uint256 internal constant PRECISION_BP_BASIS = BP_BASIS ** 2; // 50% == 50_000_000 == 5e7\\n  uint256 internal constant SEC_PER_YEAR = 31_556_952; // 365.2425 days, more precise than 365 days const\\n  uint256 internal constant MAX_UINT256 = type(uint256).max;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              VIEWS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             LOGIC                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Subtracts a certain proportion from a given amount\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to subtract\\n   * @return Result of subtracting the proportion\\n   */\\n  function subBp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, BP_BASIS - basisPoints, BP_BASIS);\\n    }\\n  }\\n\\n  /**\\n   * @notice Adds a certain proportion to a given amount\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to add\\n   * @return Result of adding the proportion\\n   */\\n  function addBp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, BP_BASIS + basisPoints, BP_BASIS);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the proportion of a given amount\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to calculate\\n   * @return Calculated proportion of the amount /BP_BASIS\\n   */\\n  function bp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, basisPoints, BP_BASIS);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the proportion of a given amount (inverted)\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to calculate\\n   * @return Calculated proportion of the amount /BP_BASIS\\n   */\\n  function revBp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, basisPoints, BP_BASIS - basisPoints);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the precise proportion of a given amount\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to calculate\\n   * @return Calculated proportion of the amount /PRECISION_BP_BASIS\\n   */\\n  function precisionBp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, basisPoints, PRECISION_BP_BASIS);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the reverse of adding a certain proportion to a given amount\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to reverse add\\n   * @return Result of reverse adding the proportion\\n   */\\n  function revAddBp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, BP_BASIS, BP_BASIS - basisPoints);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the reverse of subtracting a certain proportion from a given amount\\n   * @param amount Initial amount\\n   * @param basisPoints Proportion to reverse subtract\\n   * @return Result of reverse subtracting the proportion\\n   */\\n  function revSubBp(\\n    uint256 amount,\\n    uint256 basisPoints\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      return mulDiv(amount, BP_BASIS, BP_BASIS + basisPoints);\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if a value is within a range\\n   * @param value Value to check\\n   * @param _min Minimum value\\n   * @param _max Maximum value\\n   * @return Boolean indicating if the value is within the range\\n   */\\n  function within(uint256 value, uint256 _min, uint256 _max) internal pure returns (bool) {\\n    unchecked {\\n      return value >= _min && value <= _max;\\n    }\\n  }\\n\\n  function within(uint32 value, uint32 _min, uint32 _max) internal pure returns (bool) {\\n    unchecked {\\n      return value >= _min && value <= _max;\\n    }\\n  }\\n\\n  function within(uint64 value, uint64 _min, uint64 _max) internal pure returns (bool) {\\n    unchecked {\\n      return value >= _min && value <= _max;\\n    }\\n  }\\n\\n  function within(int256 value, int256 _min, int256 _max) internal pure returns (bool) {\\n    unchecked {\\n      return value >= _min && value <= _max;\\n    }\\n  }\\n\\n  function within32(uint32 value, uint256 _min, uint256 _max) internal pure returns (bool) {\\n    unchecked {\\n      return uint256(value) >= _min && uint256(value) <= _max;\\n    }\\n  }\\n\\n  function within64(uint64 value, uint256 _min, uint256 _max) internal pure returns (bool) {\\n    unchecked {\\n      return uint256(value) >= _min && uint256(value) <= _max;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if the difference between two values is within a specified range\\n   * @param a First value\\n   * @param b Second value\\n   * @param val Allowable difference\\n   * @return Boolean indicating if the difference is within the specified range\\n   */\\n  function diffWithin(\\n    uint256 a,\\n    uint256 b,\\n    uint256 val\\n  ) internal pure returns (bool) {\\n    return diff(a, b) <= val;\\n  }\\n\\n  /**\\n   * @notice Checks if the difference between two values is within 1\\n   * @param a First value\\n   * @param b Second value\\n   * @return Boolean indicating if the difference is within 1\\n   */\\n  function diffWithin1(uint256 a, uint256 b) internal pure returns (bool) {\\n    return diffWithin(a, b, 1);\\n  }\\n\\n  /**\\n   * @notice Calculates the absolute difference between two values\\n   * @param a First value\\n   * @param b Second value\\n   * @return Absolute difference between the two values\\n   */\\n  function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n    unchecked {\\n      return a > b ? a - b : b - a;\\n    }\\n  }\\n\\n  /**\\n   * @notice Subtracts a value from another with a minimum of 0\\n   * @param a Initial value\\n   * @param b Value to subtract\\n   * @return Result of subtracting the value, with a minimum of 0\\n   */\\n  function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n    unchecked {\\n      return a >= b ? a - b : 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Subtracts one integer from another with a requirement that the result is non-negative\\n   * @param a Initial integer\\n   * @param b Integer to subtract\\n   * @return Result of subtracting the integer, with a requirement that the result is non-negative\\n   */\\n  function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\\n    if (a < b) revert AsCast.ValueOutOfCastRange();\\n    unchecked {\\n      return a - b; // no unchecked since if b is very negative, a - b might overflow\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two unsigned integers and round down to the nearest whole number\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @return Result of multiplying and rounding down\\n   */\\n  function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 product = a * b;\\n    unchecked {\\n      return product / 1e18;\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two signed integers and round down to the nearest whole number\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a First signed integer\\n   * @param b Second signed integer\\n   * @return Result of multiplying and rounding down\\n   */\\n  function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n    int256 product = a * b;\\n    unchecked {\\n      return product / 1e18;\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one unsigned integer by another and round down to the nearest whole number\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a Numerator\\n   * @param b Denominator\\n   * @return Result of dividing and rounding down\\n   */\\n  function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 aInflated = a * 1e18;\\n    unchecked {\\n      return aInflated / b;\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one signed integer by another and round down to the nearest whole number\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a Numerator\\n   * @param b Denominator\\n   * @return Result of dividing and rounding down\\n   */\\n  function divDown(int256 a, int256 b) internal pure returns (int256) {\\n    int256 aInflated = a * 1e18;\\n    unchecked {\\n      return aInflated / b;\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides one unsigned integer by another and round up to the nearest whole number\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a Numerator\\n   * @param b Denominator\\n   * @return Result of dividing and rounding up\\n   */\\n  function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return (a + b - 1) / b;\\n  }\\n\\n  /**\\n   * @notice Gets the absolute value of a signed integer\\n   * @param x Input signed integer\\n   * @return Absolute value of the input\\n   */\\n  function abs(int256 x) internal pure returns (uint256) {\\n    return\\n      x == type(int256).min\\n        ? uint256(type(int256).max) + 1\\n        : uint256(x > 0 ? x : -x);\\n  }\\n\\n  /**\\n   * @notice Negates a signed integer\\n   * @param x Input signed integer\\n   * @return Negated value of the input\\n   */\\n  function neg(int256 x) internal pure returns (int256) {\\n    return x * -1;\\n  }\\n\\n  /**\\n   * @notice Negates an unsigned integer\\n   * @param x Input unsigned integer\\n   * @return Negated value of the input as a signed integer\\n   */\\n  function neg(uint256 x) internal pure returns (int256) {\\n    return x.toInt256() * -1;\\n  }\\n\\n  function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return x > y ? x : y;\\n  }\\n\\n  function max(int256 x, int256 y) internal pure returns (int256) {\\n    return x > y ? x : y;\\n  }\\n\\n  function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return x < y ? x : y;\\n  }\\n\\n  function min(int256 x, int256 y) internal pure returns (int256) {\\n    return x < y ? x : y;\\n  }\\n\\n  /**\\n   * @notice Checks if two unsigned integers are approximately equal within a specified tolerance\\n   * @dev Uses `mulDown` for the comparison to handle precision loss\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @param eps Maximum allowable difference between `a` and `b`\\n   * @return Boolean indicating whether the two values are approximately equal\\n   */\\n  function approxEq(\\n    uint256 a,\\n    uint256 b,\\n    uint256 eps\\n  ) internal pure returns (bool) {\\n    return mulDown(b, WAD - eps) <= a && a <= mulDown(b, WAD + eps);\\n  }\\n\\n  /**\\n   * @notice Checks if one unsigned integer is approximately greater than another within a specified tolerance\\n   * @dev Uses `mulDown` for the comparison to handle precision loss\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @param eps Maximum allowable difference between `a` and `b`\\n   * @return Boolean indicating whether `a` is approximately greater than `b`\\n   */\\n  function approxGt(\\n    uint256 a,\\n    uint256 b,\\n    uint256 eps\\n  ) internal pure returns (bool) {\\n    return a >= b && a <= mulDown(b, WAD + eps);\\n  }\\n\\n  /**\\n   * @notice Checks if one unsigned integer is approximately less than another within a specified tolerance\\n   * @dev Uses `mulDown` for the comparison to handle precision loss\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @param eps Maximum allowable difference between `a` and `b`\\n   * @return Boolean indicating whether `a` is approximately less than `b`\\n   */\\n  function approxLt(\\n    uint256 a,\\n    uint256 b,\\n    uint256 eps\\n  ) internal pure returns (bool) {\\n    return a <= b && a >= mulDown(b, WAD - eps);\\n  }\\n\\n  /**\\n   * @notice Attempts to add two unsigned integers with overflow protection\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @return Tuple with a boolean indicating success and the result of the addition\\n   */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) {\\n        // overflow occurred\\n        return (false, 0);\\n      }\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @notice Attempts to subtract one unsigned integer from another with overflow protection\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @return Tuple with a boolean indicating success and the result of the subtraction\\n   */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b > a) {\\n        // underflow occurred\\n        return (false, 0);\\n      }\\n      return (true, a - b);\\n    }\\n  }\\n\\n  /**\\n   * @notice Attempts to multiply two unsigned integers with overflow protection\\n   * @dev Uses unchecked to handle potential overflow situations\\n   * @param a First unsigned integer\\n   * @param b Second unsigned integer\\n   * @return Tuple with a boolean indicating success and the result of the multiplication\\n   */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      // gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n      // benefit is lost if 'b' is also tested\\n      // see: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) {\\n        return (true, 0);\\n      }\\n      uint256 c = a * b;\\n      if (c / a != b) {\\n        // overflow occurred\\n        return (false, 0);\\n      }\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returnss the division of two unsigned integers, with a division by zero flag\\n   * @param a Numerator\\n   * @param b Denominator\\n   * @return Tuple with a boolean indicating success and the result of the division\\n   */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the remainder of dividing two unsigned integers, with a division by zero flag\\n   * @param a Numerator\\n   * @param b Denominator\\n   * @return Tuple with a boolean indicating success and the result of the remainder\\n   */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the average of two numbers. Result is rounded towards zero\\n   * @param a First number\\n   * @param b Second number\\n   * @return Average of the two numbers\\n   */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @notice Returns the ceiling of the division of two numbers\\n   *\\n   * This differs from standard division with `/` in that it rounds towards infinity instead\\n   * of rounding towards zero\\n   * @param a Numerator\\n   * @param b Denominator\\n   * @return Ceiling of the division\\n   */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      // guarantee the same behavior as in a regular Solidity division\\n      return a / b;\\n    }\\n\\n    // (a + b - 1) / b can overflow on addition, so we distribute\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n   * denominator == 0\\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n   * Uniswap Labs also under MIT license\\n   * @param x Numerator\\n   * @param y Numerator\\n   * @param denominator Denominator\\n   * @return result Result of floor(x * y / denominator)\\n   */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    unchecked {\\n      // 512-bit multiply [prod1 prod0] = x * y\\n      // compute the product mod 2^256 and mod 2^256 - 1, then use\\n      // the Chinese Remainder Theorem to reconstruct the 512 bit result\\n      // the result is stored in two 256\\n      // variables such that product = prod1 * 2^256 + prod0\\n      uint256 prod0 = x * y; // least significant 256 bits of the product\\n      uint256 prod1; // most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(x, y, not(0))\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n      // handle non-overflow cases, 256 by 256 division\\n      if (prod1 == 0) {\\n        // solidity will revert if denominator == 0, unlike the div opcode on its own\\n        // the surrounding unchecked block does not change this fact\\n        // see https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic\\n        return prod0 / denominator;\\n      }\\n\\n      // make sure the result is less than 2^256, also prevents denominator == 0\\n      require(denominator > prod1);\\n\\n      // 512 by 256 division\\n      // make division exact by subtracting the remainder from [prod1 prod0]\\n      uint256 remainder;\\n      assembly {\\n        // compute remainder using mulmod\\n        remainder := mulmod(x, y, denominator)\\n\\n        // subtract 256 bit number from 512 bit number\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n      // factor powers of two out of denominator and compute the largest power of two divisor of denominator\\n      // always >= 1. See https://cs.stackexchange.com/q/138556/92363\\n\\n      uint256 twos = denominator & (0 - denominator);\\n      assembly {\\n        // divide denominator by twos\\n        denominator := div(denominator, twos)\\n\\n        // divide [prod1 prod0] by twos\\n        prod0 := div(prod0, twos)\\n\\n        // flip twos such that it is 2^256 / twos, if twos is zero, then it becomes one\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n\\n      // shift in bits from prod1 into prod0\\n      prod0 |= prod1 * twos;\\n\\n      // invert denominator mod 2^256, now that denominator is an odd number, it has an inverse modulo 2^256 such\\n      // that denominator * inv = 1 mod 2^256, compute the inverse by starting with a seed that is correct for\\n      // four bits, that is, denominator * inv = 1 mod 2^4\\n      uint256 inverse = (3 * denominator) ^ 2;\\n\\n      // use the Newton-Raphson iteration to improve the precision, thanks to Hensel's lifting lemma, this also\\n      // works in modular arithmetic, doubling the correct bits in each step\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n      // because the division is now exact we can divide by multiplying with the modular inverse of denominator\\n      // this will give us the correct result modulo 2^256\\n      // since the preconditions guarantee that the outcome is less than 2^256, this is the final result\\n      // we don't need to compute the high bits of the result and prod1\\n      // is no longer required\\n      result = prod0 * inverse;\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction\\n   * @param x Numerator\\n   * @param y Numerator\\n   * @param denominator Denominator\\n   * @param rounding Rounding direction\\n   * @return Result of x * y / denominator with the specified rounding\\n   */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, rounded up\\n   * @param x Numerator\\n   * @param y Numerator\\n   * @param denominator Denominator\\n   * @return Result of x * y / denominator rounded up\\n   */\\n  function mulDivRoundUp(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256) {\\n    return mulDiv(x, y, denominator, Rounding.Ceil);\\n  }\\n\\n  /**\\n   * @notice Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n   * towards zero\\n   * @param a Input value\\n   * @return Square root of the input value\\n   */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // for our first guess, we get the biggest power of 2 which is smaller than the square root of the target\\n    //\\n    // we know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`\\n    // this value can be written `msb(a)=2**k` with `k=log2(a)`\\n    // this can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // at this point `result` is an estimation with one bit of precision\\n    // we know the true value is a uint128, since it is the square root of a uint256\\n    // newton's method converges quadratically (precision doubles at every iteration)\\n    // we thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result\\n    unchecked {\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      return min(result, a / result);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction\\n   * @param a Input value\\n   * @param rounding Rounding direction\\n   * @return Square root of the input value with the specified rounding\\n   */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = sqrt(a);\\n      return\\n        result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the cube root of a number. If the number is not a perfect cube, the value is rounded\\n   * towards zero\\n   * @param a Input value\\n   * @return s Cube root of the input value\\n   */\\n  function cbrt(uint256 a) internal pure returns (uint256 s) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, a))\\n      r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, a))))\\n      r := or(r, shl(5, lt(0xffffffff, shr(r, a))))\\n      r := or(r, shl(4, lt(0xffff, shr(r, a))))\\n      r := or(r, shl(3, lt(0xff, shr(r, a))))\\n\\n      s := div(shl(div(r, 3), shl(lt(0xf, shr(r, a)), 0xf)), xor(7, mod(r, 3)))\\n\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n      s := div(add(add(div(a, mul(s, s)), s), s), 3)\\n\\n      s := sub(s, lt(div(a, mul(s, s)), s))\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the log in base 2 of a positive value rounded towards zero\\n   * Returns 0 if given 0\\n   * @param value Input value\\n   * @return Log in base 2 of the input value\\n   */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 128;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 64;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 32;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 16;\\n      }\\n      if (value >> 8 > 0) {\\n        value >>= 8;\\n        result += 8;\\n      }\\n      if (value >> 4 > 0) {\\n        value >>= 4;\\n        result += 4;\\n      }\\n      if (value >> 2 > 0) {\\n        value >>= 2;\\n        result += 2;\\n      }\\n      if (value >> 1 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Returns the log in base 2, following the selected rounding direction, of a positive value\\n   * Returns 0 if given 0\\n   * @param value Input value\\n   * @param rounding Rounding direction\\n   * @return Log in base 2 of the input value with the specified rounding\\n   */\\n  function log2(\\n    uint256 value,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log2(value);\\n      return\\n        result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the log in base 10 of a positive value rounded towards zero\\n   * Returns 0 if given 0\\n   * @param value Input value\\n   * @return Log in base 10 of the input value\\n   */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >= 10 ** 64) {\\n        value /= 10 ** 64;\\n        result += 64;\\n      }\\n      if (value >= 10 ** 32) {\\n        value /= 10 ** 32;\\n        result += 32;\\n      }\\n      if (value >= 10 ** 16) {\\n        value /= 10 ** 16;\\n        result += 16;\\n      }\\n      if (value >= 10 ** 8) {\\n        value /= 10 ** 8;\\n        result += 8;\\n      }\\n      if (value >= 10 ** 4) {\\n        value /= 10 ** 4;\\n        result += 4;\\n      }\\n      if (value >= 10 ** 2) {\\n        value /= 10 ** 2;\\n        result += 2;\\n      }\\n      if (value >= 10 ** 1) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Returns the log in base 10, following the selected rounding direction, of a positive value\\n   * Returns 0 if given 0\\n   * @param value Input value\\n   * @param rounding Rounding direction\\n   * @return Log in base 10 of the input value with the specified rounding\\n   */\\n  function log10(\\n    uint256 value,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log10(value);\\n      return\\n        result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the log in base 256 of a positive value rounded towards zero\\n   * Returns 0 if given 0\\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string\\n   * @param value Input value\\n   * @return Log in base 256 of the input value\\n   */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 16;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 8;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 4;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 2;\\n      }\\n      if (value >> 8 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Returns the log in base 256, following the selected rounding direction, of a positive value\\n   * Returns 0 if given 0\\n   * @param value Input value\\n   * @param rounding Rounding direction\\n   * @return Log in base 256 of the input value with the specified rounding\\n   */\\n  function log256(\\n    uint256 value,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log256(value);\\n      return\\n        result +\\n        (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n    }\\n  }\\n\\n  function toWad32(uint32 bps) internal pure returns (uint256) {\\n    unchecked {\\n      return uint256(bps) * WAD / BP_BASIS;\\n    }\\n  }\\n\\n  function toWad(uint256 bps) internal pure returns (uint256) {\\n    unchecked {\\n      return bps * WAD / BP_BASIS;\\n    }\\n  }\\n\\n  function toBps(uint256 wad) internal pure returns (uint256) {\\n    unchecked {\\n      return wad * BP_BASIS / WAD;\\n    }\\n  }\\n\\n  function rayToBps(uint256 ray) internal pure returns (uint256) {\\n    unchecked {\\n      return ray * BP_BASIS / RAY;\\n    }\\n  }\\n\\n  function bpsToRay(uint256 bps) internal pure returns (uint256) {\\n    unchecked {\\n      return bps * RAY / BP_BASIS;\\n    }\\n  }\\n\\n  /**\\n   * @notice Equivalent to `x` to the power of `y` denominated in `WAD` with `x` in `WAD`\\n   * because `x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)`\\n   * Note: This function is an approximation\\n   */\\n  function powWad(int256 x, int256 y) internal pure returns (int256) {\\n    if (y == 0) return int256(WAD);\\n    if (x == 0) return 0;\\n    if (x == int256(WAD) || y == int256(WAD)) return x;\\n    unchecked {\\n      bool isNegative = x < 0 && y % 2 * int256(WAD) == int256(WAD);\\n      x = x < 0 ? -x : x;\\n      x = expWad((lnWad(x) * y) / int256(WAD)); // reuse x to store result\\n      return isNegative ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns `exp(x)`, denominated in `WAD`\\n   * Credit to Remco Bloemen under MIT license: https://2π.com/22/exp-ln\\n   * Note: This function is an approximation. Monotonically increasing\\n   */\\n  function expWad(int256 x) internal pure returns (int256 r) {\\n    unchecked {\\n      // When the result is less than 0.5 we return zero\\n      // This happens when `x <= (log(1e-18) * 1e18) ~ -4.15e19`\\n      if (x <= -41446531673892822313) return r;\\n\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        // When the result is greater than `(2**255 - 1) / 1e18` we can not represent it as\\n        // an int. This happens when `x >= floor(log((2**255 - 1) / 1e18) * 1e18) ≈ 135`\\n        if iszero(slt(x, 135305999368893231589)) {\\n          mstore(0x00, 0xa37bfec9) // `ExpOverflow()`\\n          revert(0x1c, 0x04)\\n        }\\n      }\\n\\n      // `x` is now in the range `(-42, 136) * 1e18`. Convert to `(-42, 136) * 2**96`\\n      // for more intermediate precision and a binary basis. This base conversion\\n      // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78\\n      x = (x << 78) / 5 ** 18;\\n\\n      // Reduce range of x to (-½ ln 2, ½ ln 2) * 2**96 by factoring out powers\\n      // of two such that exp(x) = exp(x') * 2**k, where k is an integer\\n      // Solving this gives k = round(x / log(2)) and x' = x - k * log(2)\\n      int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >> 96;\\n      x = x - k * 54916777467707473351141471128;\\n\\n      // `k` is in the range `[-61, 195]`.\\n\\n      // Evaluate using a (6, 7)-term rational approximation\\n      // `p` is made monic, we'll multiply by a scale factor later\\n      int256 y = x + 1346386616545796478920950773328;\\n      y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n      int256 p = y + x - 94201549194550492254356042504812;\\n      p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n      p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n      // We leave `p` in `2**192` basis so we don't need to scale it back up for the division\\n      int256 q = x - 2855989394907223263936484059900;\\n      q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n      q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n      q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n      q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n      q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        // Div in assembly because solidity adds a zero check despite the unchecked\\n        // The q polynomial won't have zeros in the domain as all its roots are complex\\n        // No scaling is necessary because p is already `2**96` too large\\n        r := sdiv(p, q)\\n      }\\n\\n      // r should be in the range `(0.09, 0.25) * 2**96`.\\n\\n      // We now need to multiply r by:\\n      // - The scale factor `s ≈ 6.031367120`\\n      // - The `2**k` factor from the range reduction\\n      // - The `1e18 / 2**96` factor for base conversion\\n      // We do this all at once, with an intermediate result in `2**213`\\n      // basis, so the final right shift is always by a positive amount\\n      r = int256(\\n        (uint256(r) * 3822833074963236453042738258902158003155416615667) >>\\n          uint256(195 - k)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns `ln(x)`, denominated in `WAD`\\n   * Credit to Remco Bloemen under MIT license: https://2π.com/22/exp-ln\\n   * Note: This function is an approximation. Monotonically increasing\\n   */\\n  function lnWad(int256 x) internal pure returns (int256 r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      // We want to convert `x` from `10**18` fixed point to `2**96` fixed point\\n      // We do this by multiplying by `2**96 / 10**18`. But since\\n      // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n      // and add `ln(2**96 / 10**18)` at the end.\\n\\n      // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`\\n      r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n      r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n      r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n      r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n      r := or(r, shl(3, lt(0xff, shr(r, x))))\\n      // We place the check here for more optimal stack operations\\n      if iszero(sgt(x, 0)) {\\n        mstore(0x00, 0x1615e638) // `LnWadUndefined()`\\n        revert(0x1c, 0x04)\\n      }\\n      // forgefmt: disable-next-item\\n      r := xor(\\n        r,\\n        byte(\\n          and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n          0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff\\n        )\\n      )\\n\\n      // Reduce range of x to (1, 2) * 2**96\\n      // ln(2^k * x) = k * ln(2) + ln(x)\\n      x := shr(159, shl(r, x))\\n\\n      // Evaluate using a (8, 8)-term rational approximation\\n      // `p` is made monic, we will multiply by a scale factor later\\n      // forgefmt: disable-next-item\\n      let p := sub(\\n        // This heavily nested expression is to avoid stack-too-deep for via-ir\\n        sar(\\n          96,\\n          mul(\\n            add(\\n              43456485725739037958740375743393,\\n              sar(\\n                96,\\n                mul(\\n                  add(\\n                    24828157081833163892658089445524,\\n                    sar(96, mul(add(3273285459638523848632254066296, x), x))\\n                  ),\\n                  x\\n                )\\n              )\\n            ),\\n            x\\n          )\\n        ),\\n        11111509109440967052023855526967\\n      )\\n      p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n      p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n      p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n      // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n      // `q` is monic by convention\\n      let q := add(5573035233440673466300451813936, x)\\n      q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n      q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n      q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n      q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n      q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n      q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n      // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n      // Finalization, we need to:\\n      // - Multiply by the scale factor `s = 5.549…`\\n      // - Add `ln(2**96 / 10**18)`\\n      // - Add `k * ln(2)`\\n      // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n      // The q polynomial is known not to have zeros in the domain\\n      // No scaling required because p is already `2**96` too large\\n      p := sdiv(p, q)\\n      // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`\\n      p := mul(1677202110996718588342820967067443963516166, p)\\n      // Add `ln(2) * k * 5**18 * 2**192`\\n      // forgefmt: disable-next-item\\n      p := add(\\n        mul(\\n          16597577552685614221487285958193947469193820559219878177908093499208371,\\n          sub(159, r)\\n        ),\\n        p\\n      )\\n      // Add `ln(2**96 / 10**18) * 5**18 * 2**192`\\n      p := add(\\n        600920179829731861736702779321621459595472258049074101567377883020018308,\\n        p\\n      )\\n      // Base conversion: mul `2**18 / 2**192`\\n      r := sar(174, p)\\n    }\\n  }\\n\\n  /// @notice Returns the square root of `x`, denominated in `WAD`, rounded down\\n  function sqrtWad(uint256 x) internal pure returns (uint256 z) {\\n    unchecked {\\n      if (x <= type(uint256).max / 10 ** 18) return sqrt(x * 10 ** 18);\\n      z = (1 + sqrt(x)) * 10 ** 9;\\n      z = (mulDiv(x, 10 ** 18, z) + z) >> 1;\\n    }\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      z := sub(z, gt(999999999999999999, sub(mulmod(z, z, x), 1)))\\n    }\\n  }\\n\\n  /// @notice Returns the cube root of `x`, denominated in `WAD`, rounded down\\n  function cbrtWad(uint256 x) internal pure returns (uint256 z) {\\n    unchecked {\\n      if (x <= type(uint256).max / 10 ** 36) return cbrt(x * 10 ** 36);\\n      z = (1 + cbrt(x)) * 10 ** 12;\\n      z = (mulDiv(x, 10 ** 36, z * z) + z + z) / 3;\\n      x = mulDiv(x, 10 ** 36, z * z);\\n    }\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      z := sub(z, lt(x, z))\\n    }\\n  }\\n\\n  /// @notice Returns the nth root of `x`, denominated in `WAD`, rounded down\\n  function nrtWad(uint256 x, uint256 n) internal pure returns (uint256) {\\n    require(n != 0 && x >= 0);\\n\\n    if (x == 0) return 0;\\n    if (x == WAD || n == 1) return x;\\n\\n    unchecked {\\n      return uint256(powWad(int256(x), int256(WAD / n))); // x^(1/n) approximation\\n    }\\n  }\\n\\n  /// @notice Returns the factorial of `x`\\n  function factorial(uint256 x) internal pure returns (uint256 result) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := 1\\n      if iszero(lt(x, 58)) {\\n        mstore(0x00, 0xaba0f2a2) // `FactorialOverflow()`\\n        revert(0x1c, 0x04)\\n      }\\n      for {\\n\\n      } x {\\n        x := sub(x, 1)\\n      } {\\n        result := mul(result, x)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns whether a provided rounding mode is considered rounding up for unsigned integers\\n   * @param rounding Rounding direction\\n   * @return Whether the provided rounding mode is considered rounding up for unsigned integers\\n   */\\n  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n    return uint8(rounding) % 2 == 1;\\n  }\\n\\n  /**\\n   * @notice Computes the `_base` per `_quote` exchange rate in bps\\n   * @param _base Address of the base token\\n   * @param _baseDecimals Decimals of the base token\\n   * @param _quote Address of the quote token\\n   * @return Exchange rate in quote bps\\n   */\\n  function exchangeRate(\\n    uint256 _base,\\n    uint8 _baseDecimals,\\n    uint256 _quote\\n  ) internal pure returns (uint256) {\\n    require(_quote > 0 && _base > 0);\\n    return (_quote * (10 ** uint256(_baseDecimals))) / _base;\\n  }\\n\\n  /**\\n   * @notice Calculates the sum of an array of uint256 values\\n   * @param data The array of uint256 values\\n   * @return total sum of the array elements\\n   */\\n  function sum(uint256[] memory data) internal pure returns (uint256 total) {\\n    unchecked {\\n      for (uint256 i = 0; i < data.length; i++) {\\n        total += data[i];\\n      }\\n    }\\n  }\\n\\n  function sum(uint256[8] memory data) internal pure returns (uint256 total) {\\n    unchecked {\\n      for (uint256 i = 0; i < data.length; i++) {\\n        total += data[i];\\n      }\\n    }\\n  }\\n\\n  function sum(int256[] memory data) internal pure returns (int256 total) {\\n    unchecked {\\n      for (uint256 i = 0; i < data.length; i++) {\\n        total += data[i];\\n      }\\n    }\\n  }\\n\\n  function sum(int256[8] memory data) internal pure returns (int256 total) {\\n    unchecked {\\n      for (uint256 i = 0; i < data.length; i++) {\\n        total += data[i];\\n      }\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/abstract/AsPermissioned.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"../interfaces/IAccessController.sol\\\";\\nimport \\\"./AsTypes.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsPermissioned Abstract - AccessController consumer for permissioned contracts\\n * @author Astrolab DAO\\n * @notice Extending this contract allows for role-based access control (RBAC)\\n */\\nabstract contract AsPermissioned {\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              TYPES                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  struct PermissionedStorage {\\n    IAccessController ac;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // EIP-7201 keccak256(abi.encode(uint256(keccak256(\\\"AsPermissioned.main\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant _STORAGE_SLOT =\\n    0x94de5bb549dc3b3f2a557f7067a0d52c6921e50388ea6bea5cf4ee301cf1a400;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                         INITIALIZATION                         ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor(address _accessController) {\\n    if (_accessController == address(0)) {\\n      revert Errors.AddressZero();\\n    }\\n    (bool success,) = _accessController.staticcall(\\n      abi.encodeWithSelector(IAccessController.isAdmin.selector, msg.sender)\\n    );\\n    if (!success) {\\n      revert Errors.ContractNonCompliant();\\n    }\\n    _storage().ac = IAccessController(_accessController);\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           MODIFIERS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Checks if `_account` has `_role`\\n   * @param _role Role to check\\n   * @param _account Account to check\\n   * @return Boolean indicating if `_account` has `_role`\\n   */\\n  function _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\n    return _storage().ac.hasRole(_role, _account);\\n  }\\n\\n  function _checkRole(bytes32 _role, address _account) internal view {\\n    _storage().ac.checkRole(_role, _account);\\n  }\\n\\n  /**\\n   * @notice Checks if an account has the keeper role\\n   */\\n  modifier onlyKeeper() {\\n    _checkRole(Roles.KEEPER, msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if an account has the manager role\\n   */\\n  modifier onlyManager() {\\n    _checkRole(Roles.MANAGER, msg.sender);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if an account has the admin role\\n   */\\n  modifier onlyAdmin() {\\n    _checkRole(Roles.ADMIN, msg.sender);\\n    _;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             VIEWS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @return $ Upgradable EIP-7201 storage slot\\n   */\\n  function _storage() internal pure virtual returns (PermissionedStorage storage $) {\\n    assembly {\\n      $.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @return Access controller contract\\n   */\\n  function accessController() external view returns (address) {\\n    return address(_storage().ac);\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"src/abstract/AsRescuable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./AsPermissioned.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsRescuable Abstract - Astrolab's token rescuer for payable contracts\\n * @author Astrolab DAO\\n */\\nabstract contract AsRescuable is AsPermissioned {\\n  using SafeERC20 for IERC20Metadata;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              TYPES                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  struct RescueRequest {\\n    uint64 timestamp;\\n    address receiver;\\n  }\\n\\n  struct RescuableStorage {\\n    mapping(address => RescueRequest) rescueRequests;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  uint64 public constant RESCUE_TIMELOCK = 2 days;\\n  uint64 public constant RESCUE_VALIDITY = 7 days;\\n\\n  // EIP-7201 keccak256(abi.encode(uint256(keccak256(\\\"AsRescuable.main\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant _STORAGE_SLOT =\\n    0xcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d1400;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                          INITIALIZERS                          ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor() {}\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             VIEWS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @return $ Upgradable EIP-7201 storage slot\\n   */\\n  function _rescuableRescuableStorage()\\n    internal\\n    pure\\n    returns (RescuableStorage storage $)\\n  {\\n    assembly {\\n      $.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if a rescue request `_req` is locked based on the current timestamp\\n   * @param _req Rescue request to check\\n   * @return Boolean indicating whether `_req` is locked\\n   */\\n  function _isRescueLocked(RescueRequest memory _req) internal view returns (bool) {\\n    return block.timestamp < (_req.timestamp + RESCUE_TIMELOCK);\\n  }\\n\\n  /**\\n   * @notice Checks if a rescue request `_req` is stale based on the current timestamp\\n   * @param _req Rescue request to check\\n   * @return Boolean indicating whether `_req` is stale\\n   */\\n  function _isRescueExpired(RescueRequest memory _req) internal view returns (bool) {\\n    return block.timestamp > (_req.timestamp + RESCUE_TIMELOCK + RESCUE_VALIDITY);\\n  }\\n\\n  /**\\n   * @notice Checks if a rescue request `_req` is unlocked based on the current timestamp\\n   * @param _req Rescue request to check\\n   * @return Boolean indicating whether `_req` is unlocked\\n   */\\n  function _isRescueUnlocked(RescueRequest memory _req) internal view returns (bool) {\\n    return !_isRescueExpired(_req) && !_isRescueLocked(_req);\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             LOGIC                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Requests a rescue for `_token`, setting `msg.sender` as the receiver\\n   * @param _token Token to be rescued - Use address(1) for native/gas tokens (ETH)\\n   */\\n  function _requestRescue(address _token) internal {\\n    RescueRequest storage req = _rescuableRescuableStorage().rescueRequests[_token];\\n    require(!_isRescueUnlocked(req));\\n    // set pending rescue request\\n    req.receiver = msg.sender;\\n    req.timestamp = uint64(block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Requests a rescue for `_token`, setting `msg.sender` as the receiver\\n   * @param _token Token to be rescued - Use address(1) for native/gas tokens (ETH)\\n   * @dev This should be overriden with the proper access control by inheriting contracts\\n   */\\n  function requestRescue(address _token) external onlyAdmin {\\n    _requestRescue(_token);\\n  }\\n\\n  /**\\n   * @notice Rescues the contract's `_token` (ERC20 or native) full balance by sending it to `req.receiver`if a valid rescue request exists\\n   * @notice Rescue request must be executed after `RESCUE_TIMELOCK` and before end of validity (`RESCUE_TIMELOCK + RESCUE_VALIDITY`)\\n   * @param _token Token to be rescued - Use address(1) for native/gas tokens (ETH)\\n   */\\n  function _rescue(address _token) internal {\\n    RescueRequest storage req = _rescuableRescuableStorage().rescueRequests[_token];\\n\\n    // check if rescue is pending\\n    require(_isRescueUnlocked(req));\\n\\n    // reset pending request (timestamp reset to 0 avoids reentrancy)\\n    req.timestamp = 0;\\n\\n    // send to receiver\\n    if (_token == address(1)) {\\n      (bool ok,) = payable(req.receiver).call{value: address(this).balance}(\\\"\\\");\\n      require(ok);\\n    } else {\\n      IERC20Metadata(_token).safeTransfer(\\n        req.receiver, IERC20Metadata(_token).balanceOf(address(this))\\n      );\\n    }\\n    delete _rescuableRescuableStorage().rescueRequests[_token];\\n  }\\n\\n  /**\\n   * @notice Rescues the contract's `_token` (ERC20 or native) full balance by sending it to `req.receiver`if a valid rescue request exists\\n   * @notice Rescue request must be executed after `RESCUE_TIMELOCK` and before end of validity (`RESCUE_TIMELOCK + RESCUE_VALIDITY`)\\n   * @param _token Token to be rescued - Use address(1) for native/gas tokens (ETH)\\n   * @dev This should be overriden with the proper access control by inheriting contracts\\n   */\\n  function rescue(address _token) external onlyManager {\\n    _rescue(_token);\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\n// Native/gas erc20 wrapper\\n// cf. https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IWETH9.sol\\ninterface IWETH9 is IERC20Metadata {\\n  function deposit() external payable;\\n  function withdraw(uint256) external;\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAsPermissioned.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"../interfaces/IAccessController.sol\\\";\\n\\ninterface IAsPermissioned {\\n  function ac() external view returns (IAccessController);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAsFlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./IAsPermissioned.sol\\\";\\n\\ninterface IAsFlashLender is IAsPermissioned {\\n  // Events\\n  event FlashLoan(address indexed borrower, uint256 amount, uint256 fee);\\n\\n  function claimableFlashFees() external view returns (uint256);\\n  function maxLoan() external view returns (uint256);\\n  function totalLent() external view returns (uint256);\\n  function isLendable(address _asset) external view returns (bool);\\n  function borrowable() external view returns (uint256);\\n  function flashFee(\\n    address _token,\\n    address _borrower,\\n    uint256 _amount\\n  ) external view returns (uint256);\\n  function flashFee(address _token, uint256 _amount) external view returns (uint256);\\n  function maxFlashLoan(address _token) external view returns (uint256);\\n  function setMaxLoan(uint256 _amount) external;\\n  function flashLoan(\\n    address _receiver,\\n    address _token,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external returns (bool);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\ninterface IPriceProvider {\\n  function oracle() external view returns (address);\\n  function hasFeed(address _asset) external view returns (bool);\\n  function toUsdBp(address _asset) external view returns (uint256);\\n  function toUsdBp(address _asset, uint256 _amount) external view returns (uint256);\\n  function toUsd(address _asset, uint256 _amount) external view returns (uint256);\\n  function fromUsdBp(address _asset) external view returns (uint256);\\n  function fromUsdBp(address _asset, uint256 _amount) external view returns (uint256);\\n  function fromUsd(address _asset, uint256 _amount) external view returns (uint256);\\n  function exchangeRate(address _base, address _quote) external view returns (uint256);\\n  function exchangeRateBp(address _base, address _quote) external view returns (uint256);\\n  function convert(\\n    address _base,\\n    uint256 _amount,\\n    address _quote\\n  ) external view returns (uint256);\\n  function setFeed(address _asset, bytes32 _feed, uint256 _validity) external;\\n  function setFeeds(\\n    address[] memory _assets,\\n    bytes32[] memory _feeds,\\n    uint256[] memory _validities\\n  ) external;\\n  function update(bytes calldata _params) external;\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAsPriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.25;\\n\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IAsPriceAware {\\n  function oracle() external view returns (IPriceProvider);\\n  function updateOracle(address _oracle) external;\\n}\\n\",\"versionPragma\":\"^0.8.25\"},\"@astrolabs/swapper/contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**            _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2023\\n *\\n * @title Swapper - On-chain swap calldata executor\\n * @author Astrolab DAO\\n * @notice This contract gatekeeps the execution of foreign swap calldata\\n * @dev The swap calldata can be generated using the swapper SDK https://github.com/AstrolabDAO/swapper\\n */\\ninterface ISwapper {\\n    event Swapped(\\n        address indexed user,\\n        address indexed assetIn,\\n        address indexed assetOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event Whitelisted(address indexed account);\\n    event RemovedFromWhitelist(address indexed account);\\n\\n    function setCallerRestriction(bool _restrictCaller) external;\\n    function setRouterRestriction(bool _restrictRouter) external;\\n    function setInputRestriction(bool _inputRestiction) external;\\n    function setOutputRestriction(bool _outputRestiction) external;\\n    function setApproveMax(bool _approveMax) external;\\n    function setAutoRevoke(bool _autoRevoke) external;\\n    function addToWhitelist(address _address) external;\\n    function removeFromWhitelist(address _address) external;\\n    function isWhitelisted(address _address) external view returns (bool);\\n    function isCallerRestricted(address _caller) external view returns (bool);\\n    function isRouterRestricted(address _router) external view returns (bool);\\n    function isInputRestricted(address _input) external view returns (bool);\\n    function isOutputRestricted(address _output) external view returns (bool);\\n    function isApproveMax() external view returns (bool);\\n    function isAutoRevoke() external view returns (bool);\\n\\n    function swap(\\n        address _input,\\n        address _output,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _targetRouter,\\n        bytes memory _callData\\n    ) external payable returns (uint256 received, uint256 spent);\\n\\n    function swapBalance(\\n        address _input,\\n        address _output,\\n        uint256 _minAmountOut,\\n        address _targetRouter,\\n        bytes memory _callData\\n    ) external payable returns (uint256 received, uint256 spent);\\n\\n    function decodeSwapperParams(bytes memory _params)\\n        external\\n        pure\\n        returns (address target, uint256 minAmount, bytes memory callData);\\n\\n    function decodeAndSwap(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        bytes memory _params\\n    ) external returns (uint256 received, uint256 spent);\\n\\n    function decodeAndSwapBalance(\\n        address _input,\\n        address _output,\\n        bytes memory _params\\n    ) external returns (uint256 received, uint256 spent);\\n\\n    function multiSwap(\\n        address[] memory _inputs,\\n        address[] memory _outputs,\\n        uint256[] memory _amountsIn,\\n        uint256[] memory _minAmountsOut,\\n        address[] memory _targetRouters,\\n        bytes[] memory _params\\n    ) external returns (uint256[] memory received, uint256[] memory spent);\\n\\n    function multiSwapBalances(\\n        address[] memory _inputs,\\n        address[] memory _outputs,\\n        uint256[] memory _minAmountsOut,\\n        address[] memory _targetRouters,\\n        bytes[] memory _params\\n    ) external returns (uint256[] memory received, uint256[] memory spent);\\n\\n    function decodeAndMultiSwap(\\n        address[] memory _inputs,\\n        address[] memory _outputs,\\n        uint256[] memory _amountsIn,\\n        bytes[] memory _params\\n    ) external returns (uint256[] memory received, uint256[] memory spent);\\n\\n    function decodeAndMultiSwapBalances(\\n        address[] memory _inputs,\\n        address[] memory _outputs,\\n        bytes[] memory _params\\n    ) external returns (uint256[] memory received, uint256[] memory spent);\\n}\\n\",\"versionPragma\":\"^0.8.17\"},\"src/interfaces/IStrategyV5Agent.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@astrolabs/swapper/contracts/interfaces/ISwapper.sol\\\";\\nimport \\\"./IWETH9.sol\\\";\\nimport \\\"./IAsFlashLender.sol\\\";\\nimport \\\"./IAsPriceAware.sol\\\";\\nimport \\\"./IAs4626.sol\\\";\\n\\ninterface IStrategyV5Agent is IAs4626, IAsFlashLender, IAsPriceAware {\\n  // Structs\\n  struct AgentStorage {\\n    address delegator;\\n  }\\n\\n  // Events\\n  event Invest(uint256 amount, uint256 timestamp);\\n  event Harvest(uint256 amount, uint256 timestamp);\\n  event Liquidate(uint256 amount, uint256 liquidityAvailable, uint256 timestamp);\\n\\n  // State variables (As4626 extension)\\n  function _wgas() external view returns (IWETH9);\\n  function swapper() external view returns (ISwapper);\\n\\n  function inputs(uint256 index) external view returns (IERC20Metadata);\\n  function inputWeights(uint256 index) external view returns (uint16);\\n  function lpTokens(uint256 index) external view returns (IERC20Metadata);\\n  function rewardTokens(uint256 index) external view returns (address);\\n\\n  function init(StrategyParams memory _data) external;\\n  function proxyType() external pure returns (uint256);\\n  function setExemption(address _account, bool _isExempt) external;\\n  function setSwapperAllowance(\\n    uint256 _amount,\\n    bool _inputs,\\n    bool _rewards,\\n    bool _asset\\n  ) external;\\n  function updateSwapper(address _swapper) external;\\n  function updateAsset(\\n    address _asset,\\n    bytes memory _swapData,\\n    uint256 _exchangeRateBp\\n  ) external;\\n  function setInputWeights(uint16[] memory _weights) external;\\n  function setInputs(\\n    address[] calldata _inputs,\\n    uint16[] calldata _weights,\\n    address[] calldata _lpTokens\\n  ) external;\\n  function setRewardTokens(address[] memory _rewardTokens) external;\\n  function available() external view returns (uint256);\\n  function availableClaimable() external view returns (uint256);\\n  function totalAssets() external view returns (uint256);\\n  function maxRedeem(address _owner) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IAsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\ninterface IAsProxy {\\n  function initialized() external view returns (bool);\\n  function implementation() external view returns (address);\\n  function supportsInterface(bytes4 _interfaceId) external pure returns (bool);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/interfaces/IStrategyV5.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./IStrategyV5Agent.sol\\\";\\nimport \\\"./IAsProxy.sol\\\";\\n\\ninterface IStrategyV5 is IStrategyV5Agent, IAsProxy {\\n  // Events\\n  event Harvest(uint256 assetsReceived, uint64 timestamp);\\n\\n  function simulate(bytes calldata _data) external returns (bytes memory response);\\n  function agent() external view returns (address);\\n  function setParams(bytes memory _params) external;\\n  function init(StrategyParams memory _params) external;\\n  function rewardsAvailable() external view returns (uint256[] memory);\\n  function invested(uint256 _index) external view returns (uint256);\\n  function invested() external view returns (uint256);\\n  function available() external view returns (uint256);\\n  function updateAgent(address _agent) external;\\n  function preview(uint256 _amount, bool _investing) external returns (uint256[8] memory amounts);\\n  function previewSwapAddons(uint256[] calldata _amounts) external returns (address[] memory from, address[] memory to, uint256[] memory amounts);\\n  function invest(\\n    uint256[8] calldata _amounts,\\n    bytes[] calldata _params\\n  ) external returns (uint256 totalInvested);\\n  function liquidate(\\n    uint256[8] calldata _amounts,\\n    uint256 _minLiquidity,\\n    bool _panic,\\n    bytes[] calldata _params\\n  ) external returns (uint256 totalRecovered);\\n  function liquidateRequest(uint256 _amount) external returns (uint256);\\n  function claimRewards() external returns (uint256[] memory);\\n  function harvest(bytes[] calldata _params) external returns (uint256 assetsReceived);\\n  function compound(\\n    uint256[8] calldata _amounts,\\n    bytes[] calldata _harvestParams,\\n    bytes[] calldata _investParams\\n  ) external returns (uint256 totalHarvested, uint256 totalInvested);\\n  function updateAsset(\\n    address _asset,\\n    bytes memory _swapData,\\n    uint256 _exchangeRateBp\\n  ) external;\\n  function updateAsset(address _asset, bytes memory _swapData) external;\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/libs/AsAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"../abstract/AsTypes.sol\\\";\\nimport \\\"../interfaces/IStrategyV5.sol\\\";\\nimport \\\"./AsCast.sol\\\";\\nimport \\\"./AsMaths.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsAccounting Library - Astrolab's Accounting library\\n * @author Astrolab DAO\\n */\\nlibrary AsAccounting {\\n  using AsMaths for uint256;\\n  using AsCast for uint256;\\n  using AsCast for int256;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  uint256 public constant MAX_PERF_FEE = 5_000; // 50%\\n  uint256 public constant MAX_MGMT_FEE = 10_00; // 10%\\n  uint256 public constant MAX_ENTRY_FEE = 200; // 2%\\n  uint256 public constant MAX_EXIT_FEE = 200; // 2%\\n  uint256 public constant MAX_FLASH_LOAN_FEE = 200; // 2%\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              VIEWS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @dev Computes the management and performance fees for an As4626 instance\\n   * @param strat As4626 contract instance\\n   * @return assets Total assets of the contract\\n   * @return price Current share price of the contract\\n   * @return profit Calculated profit since the last fee collection in precision bps\\n   * @return totalFees Fees to be collected in assets, including management, and performance fees\\n   */\\n  function claimableDynamicFees(IStrategyV5 strat)\\n    public\\n    view\\n    returns (uint256 assets, uint256 price, uint256 profit, uint256 totalFees)\\n  {\\n    Epoch memory last = strat.last();\\n    Fees memory fees = strat.fees();\\n    assets = strat.totalAssets();\\n    price = strat.sharePrice();\\n\\n    uint256 elapsed = block.timestamp - uint256(last.feeCollection); // time since last collection\\n    int256 change = int256(price) - int256(last.accountedSharePrice); // raw price change\\n    if (elapsed == 0 || (change < 0 && fees.mgmt == 0)) {\\n      return (assets, price, 0, 0); // no fees to collect\\n    }\\n    uint256 durationBps = elapsed.mulDiv(AsMaths.PRECISION_BP_BASIS, AsMaths.SEC_PER_YEAR); // relative duration (yearly) in bps\\n    uint256 profitBps = uint256(change).mulDiv(AsMaths.PRECISION_BP_BASIS, price); // relative profit in bps\\n    totalFees = assets.mulDiv(\\n      (profitBps * fees.perf) + (durationBps * fees.mgmt),\\n      AsMaths.PRECISION_BP_BASIS * AsMaths.BP_BASIS // debase in assets\\n    ); // perf + mgmt fees\\n    return (assets, price, profitBps, totalFees);\\n  }\\n\\n  /**\\n   * @notice Computes the unrealized profits by accruing harvested `_expectedProfits` linearly over `_profitCooldown`\\n   * @param _lastHarvest Timestamp of the last harvest\\n   * @param _expectedProfits Expected profits since the last harvest, unrealized\\n   * @param _profitCooldown Cooldown period for realizing gains\\n   * @return Amount of profits that are not yet realized\\n   */\\n  function unrealizedProfits(\\n    uint256 _lastHarvest,\\n    uint256 _expectedProfits,\\n    uint256 _profitCooldown\\n  ) public view returns (uint256) {\\n    if (_lastHarvest + _profitCooldown < block.timestamp) {\\n      return 0; // no profits to realize\\n    }\\n\\n    // calculate unrealized profits during cooldown using mulDiv for precision\\n    uint256 elapsed = block.timestamp - _lastHarvest;\\n    uint256 realizedProfits = _expectedProfits.mulDiv(elapsed, _profitCooldown);\\n\\n    // return the amount of profits that are not yet realized\\n    return _expectedProfits - realizedProfits;\\n  }\\n\\n  /**\\n   * @notice Check if provided fees are within the allowed maximum fees\\n   * @param _fees Struct containing fee parameters (performance, management, entry, exit, flash fees)\\n   * @return Whether the provided fees are within the allowed maximum fees\\n   */\\n  function checkFees(Fees memory _fees) internal pure returns (bool) {\\n    return _fees.perf <= MAX_PERF_FEE && _fees.mgmt <= MAX_MGMT_FEE\\n      && _fees.entry <= MAX_ENTRY_FEE && _fees.exit <= MAX_EXIT_FEE\\n      && _fees.flash <= MAX_FLASH_LOAN_FEE;\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/abstract/ERC20Abstract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nabstract contract ERC20Abstract {\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                            STORAGE                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n  bool internal _initialized;\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"src/abstract/AsManageable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IAccessController.sol\\\";\\nimport \\\"./AsPermissioned.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsManageable Abstract - Lighter OZ AccessControlEnumerable+Pausable extension\\n * @author Astrolab DAO\\n * @notice Abstract contract to check roles against AccessController and contract pausing\\n */\\ncontract AsManageable is AsPermissioned, Pausable, ReentrancyGuard {\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                         INITIALIZATION                         ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor(address _accessController) AsPermissioned(_accessController) {}\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                        PAUSING LOGIC                           ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Unpauses the contract, resuming all operations\\n   */\\n  function unpause() public onlyAdmin {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Pauses the contract, partially freezing operations\\n   */\\n  function pause() public onlyAdmin {\\n    _pause();\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/abstract/As4626Abstract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./ERC20Abstract.sol\\\";\\nimport \\\"./AsManageable.sol\\\";\\nimport \\\"../libs/AsAccounting.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title As4626Abstract - Extended by all strategies\\n * @author Astrolab DAO\\n * @notice This contract lays out the common storage for all strategies\\n * @dev All state variables must be here to match the proxy base storage layout (StrategyV5)\\n */\\nabstract contract As4626Abstract is ERC20Abstract, AsManageable {\\n  using SafeERC20 for IERC20Metadata;\\n  using AsMaths for uint256;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              TYPES                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  struct As4626StorageExt {\\n    uint16 maxSlippageBps; // strategy default internal ops slippage\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             EVENTS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // ERC-4626\\n  event Deposit(\\n    address indexed sender, address indexed owner, uint256 assets, uint256 shares\\n  );\\n\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n\\n  // ERC-7540\\n  event DepositRequest(\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 indexed requestId,\\n    address sender,\\n    uint256 assets\\n  );\\n\\n  event RedeemRequest(\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 indexed requestId,\\n    address sender,\\n    uint256 shares\\n  );\\n\\n  event RedeemRequestCanceled(\\n    address indexed receiver, address indexed owner, uint256 requestId, uint256 shares\\n  );\\n\\n  event DepositRequestCanceled(\\n    address indexed receiver, address indexed owner, uint256 requestId, uint256 amount\\n  );\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  uint256 internal constant _WEI_PER_SHARE = 1e12; // weis in a share (base unit)\\n  uint256 internal constant _WEI_PER_SHARE_SQUARED = _WEI_PER_SHARE ** 2;\\n\\n  // Upgrade dedicated storage to prevent collisions (EIP-7201)\\n  // keccak256(abi.encode(uint256(keccak256(\\\"As4626.ext\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant _STORAGE_EXT_SLOT =\\n    0x158e00504b6e2b9f9abe924926be99e72fb1fd7c6bcaafc95ce02d9dabf05300;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                            STORAGE                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // Share/underlying asset accounting\\n  uint256 public maxTotalAssets = 0; // maximum total assets that can be deposited\\n  uint256 public minLiquidity = 1e7; // minimum amount to seed liquidity is 1e7 wei (e.g., 10 USDC)\\n\\n  IERC20Metadata public asset; // ERC20 token used as the base denomination\\n  uint8 internal _assetDecimals; // ERC20 token decimals\\n  uint256 internal _weiPerAsset; // amount of wei in one underlying asset unit (1e(decimals))\\n  Epoch public last; // epoch tracking latest events (6 slots)\\n\\n  // Profit-related variables\\n  uint256 internal _profitCooldown = 10 days; // profit linearization period (profit locktime)\\n  uint256 internal _expectedProfits; // expected profits\\n\\n  Fees public fees; // current fee structure (2 slots)\\n  address public feeCollector; // address to collect fees\\n  uint256 public claimableTransactionFees; // amount of asset fees (entry+exit) that can be claimed\\n  mapping(address => bool) public exemptionList; // list of addresses exempted from fees\\n\\n  Requests internal _req; // (5 slots)\\n  uint256 internal _requestId; // redeem request id\\n\\n  // NB: DO NOT EXTEND THIS STORAGE, TO PREVENT COLLISION USE `_4626StorageExt()`\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                         INITIALIZATION                         ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor(address _accessController) AsManageable(_accessController) {}\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             VIEWS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @return $ Upgradable EIP-7201 As4626 storage extension slot\\n   */\\n  function _4626StorageExt() internal pure returns (As4626StorageExt storage $) {\\n    assembly {\\n      $.slot := _STORAGE_EXT_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @return Total amount of invested inputs denominated in underlying assets\\n   */\\n  function _invested() internal view virtual returns (uint256);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/abstract/AsPriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"./AsPermissioned.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title AsPriceAware Abstract - Data consumer for price aware contracts\\n * @author Astrolab DAO\\n * @notice Extending this contract allows for price feed consumption\\n */\\nabstract contract AsPriceAware is AsPermissioned {\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                            STRUCTS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  struct PriceAwareStorage {\\n    IPriceProvider oracle;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // EIP-7201 keccak256(abi.encode(uint256(keccak256(\\\"AsPriceAware.main\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant _STORAGE_SLOT =\\n    0xbb12abea6d8b08b111bc540c50c61a89c6948c27ba2a9f019b29f0ec7e3b3200;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                         INITIALIZERS                           ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor() {}\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           MODIFIERS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  modifier whenPriceAware() {\\n    if (address(_priceAwareStorage().oracle) == address(0)) {\\n      revert Errors.MissingOracle();\\n    }\\n    _;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             VIEWS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @return $ Upgradable EIP-7201 storage slot\\n   */\\n  function _priceAwareStorage() internal pure returns (PriceAwareStorage storage $) {\\n    assembly {\\n      $.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @return Oracle implementation address\\n   */\\n  function oracle() public view returns (IPriceProvider) {\\n    return _priceAwareStorage().oracle;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                            SETTERS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Sets the strategy price oracle implementation\\n   * @param _oracle Price provider instance address\\n   */\\n  function _updateOracle(address _oracle) internal {\\n    if (_oracle == address(0)) {\\n      revert Errors.AddressZero();\\n    }\\n    (bool success,) = _oracle.staticcall(\\n      abi.encodeWithSelector(IPriceProvider.hasFeed.selector, address(0))\\n    );\\n    if (!success) {\\n      revert Errors.ContractNonCompliant();\\n    }\\n    _priceAwareStorage().oracle = IPriceProvider(_oracle);\\n  }\\n\\n  /**\\n   * @notice Sets the strategy price oracle implementation\\n   * @param _oracle Price provider instance address\\n   */\\n  function updateOracle(address _oracle) external onlyAdmin {\\n    _updateOracle(_oracle);\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/abstract/StrategyV5Abstract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@astrolabs/swapper/contracts/interfaces/ISwapper.sol\\\";\\nimport \\\"../interfaces/IWETH9.sol\\\";\\nimport \\\"../interfaces/IStrategyV5.sol\\\";\\nimport \\\"../interfaces/IStrategyV5Agent.sol\\\";\\nimport \\\"./As4626Abstract.sol\\\";\\nimport \\\"./AsPriceAware.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title StrategyV5 - Astrolab's base Strategy to be extended by implementations\\n * @author Astrolab DAO\\n * @notice Common strategy back-end extended by implementations, delegating vault logic to StrategyV5Agent\\n * @dev All state variables must be here to match the proxy base storage layout (StrategyV5)\\n */\\nabstract contract StrategyV5Abstract is As4626Abstract {\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                              TYPES                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // Upgradable strategy agent's storage struct\\n  struct AgentStorage {\\n    IStrategyV5 delegator;\\n  }\\n\\n  struct BaseStorageExt {\\n    address agent;\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             EVENTS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  event Invest(uint256 amount, uint256 timestamp);\\n  event Harvest(uint256 amount, uint256 timestamp);\\n  event Liquidate(uint256 amount, uint256 liquidityAvailable, uint256 timestamp);\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                           CONSTANTS                            ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n  uint256 internal constant _MAX_INPUTS = 8; // 100% in basis points\\n  // EIP-7201 keccak256(abi.encode(uint256(keccak256(\\\"StrategyV5.agent\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant _AGENT_STORAGE_SLOT =\\n    0xffe86e2b60bc69a3832641185d195b8ed6fe0e65c6cc390c67dbb9d7cc304300;\\n  // EIP-7201 keccak256(abi.encode(uint256(keccak256(\\\"StrategyV5.ext\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant _EXT_STORAGE_SLOT =\\n    0x25da31c40a795936c86465edf13c4b2aa77f4e3670b8bdd5625b556504dc9d00;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                            STORAGE                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  // State variables (As4626 extension)\\n  IWETH9 internal _wgas; // gas/native wrapper contract (immutable set in `init()`)\\n  ISwapper public swapper; // interface for swapping assets\\n\\n  IERC20Metadata[8] public inputs; // array of ERC20 tokens used as inputs\\n  uint8[8] internal _inputDecimals; // strategy inputs decimals\\n  uint16[8] public inputWeights; // array of input weights weights in basis points (100% = 100_00)\\n  uint16 internal _totalWeight; // total input weight (max 100%, 100_00bps)\\n  IERC20Metadata[8] public lpTokens; // array of LP tokens used by inputs\\n  uint8[8] internal _lpTokenDecimals; // strategy inputs decimals\\n  address[8] public rewardTokens; // array of reward tokens harvested at compound and liquidate times\\n  mapping(address => uint256) internal _rewardTokenIndexes; // reward token index by address\\n  uint8 internal _inputLength; // used length of inputs[] (index of last non-zero element)\\n  uint8 internal _rewardLength; // used length of rewardTokens[] (index of last non-zero element)\\n\\n  // NB: DO NOT EXTEND THIS STORAGE, TO PREVENT COLLISION USE `_baseStorage()`\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                         INITIALIZATION                         ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor(address _accessController) As4626Abstract(_accessController) {}\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             VIEWS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @return $ Upgradable EIP-7201 agent storage extension slot\\n   */\\n  function _agentStorage() internal pure returns (AgentStorage storage $) {\\n    assembly {\\n      $.slot := _AGENT_STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @return $ Upgradable EIP-7201 base storage extension slot\\n   */\\n  function _baseStorageExt() internal pure returns (BaseStorageExt storage $) {\\n    assembly {\\n      $.slot := _EXT_STORAGE_SLOT\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"src/abstract/StrategyV5.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"../interfaces/IAs4626.sol\\\";\\nimport \\\"../libs/AsArrays.sol\\\";\\nimport \\\"../libs/AsMaths.sol\\\";\\nimport \\\"./AsRescuable.sol\\\";\\nimport \\\"./StrategyV5Abstract.sol\\\";\\n\\n/**\\n *             _             _       _\\n *    __ _ ___| |_ _ __ ___ | | __ _| |__\\n *   /  ` / __|  _| '__/   \\\\| |/  ` | '  \\\\\\n *  |  O  \\\\__ \\\\ |_| | |  O  | |  O  |  O  |\\n *   \\\\__,_|___/.__|_|  \\\\___/|_|\\\\__,_|_.__/  ©️ 2024\\n *\\n * @title StrategyV5 - Astrolab's base Strategy to be extended by implementations\\n * @author Astrolab DAO\\n * @notice Common strategy back-end extended by implementations, delegating vault logic to StrategyV5Agent\\n * @dev All state variables must be in StrategyV5abstract to match the proxy base storage layout (StrategyV5)\\n * @dev Can be deplpoyed standalone for dummy strategy testing\\n */\\nabstract contract StrategyV5 is\\n  StrategyV5Abstract,\\n  AsRescuable,\\n  AsPriceAware,\\n  Proxy\\n{\\n  using AsMaths for uint256;\\n  using AsMaths for int256;\\n  using AsMaths for int256[8];\\n  using AsArrays for int256[8];\\n  using AsArrays for bytes[];\\n  using SafeERC20 for IERC20Metadata;\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                         INITIALIZATION                         ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  constructor(\\n    address _accessController\\n  ) StrategyV5Abstract(_accessController) AsRescuable() {\\n    _pause();\\n  }\\n\\n  receive() external payable {}\\n\\n  /**\\n   * @notice Strategy specific initializer\\n   * @param _params StrategyParams struct containing strategy parameters\\n   */\\n  function _setParams(bytes memory _params) internal virtual;\\n\\n  /**\\n   * @notice Strategy specific initializer\\n   * @param _params StrategyParams struct containing strategy parameters\\n   */\\n  function setParams(bytes memory _params) external onlyAdmin {\\n    _setParams(_params);\\n  }\\n\\n  /**\\n   * @notice Initializes the strategy using `_params`\\n   * @param _params StrategyParams struct containing strategy parameters\\n   */\\n  function init(StrategyParams calldata _params) external onlyAdmin {\\n    if (_params.coreAddresses.agent == address(0)) {\\n      revert Errors.AddressZero();\\n    }\\n    _updateAgent(_params.coreAddresses.agent);\\n    if (_params.coreAddresses.oracle != address(0)) {\\n      _updateOracle(_params.coreAddresses.oracle);\\n    }\\n    _agentStorage().delegator = IStrategyV5(address(this));\\n    (bool success, ) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(IStrategyV5Agent.init.selector, _params)\\n    );\\n    if (!success) {\\n      revert Errors.FailedDelegateCall();\\n    }\\n    // strategy specific initialization\\n    if (_params.extension.length > 0) {\\n      _setParams(_params.extension);\\n    }\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             VIEWS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @return Agent's initialization state (ERC-897)\\n   */\\n  function initialized() public view virtual returns (bool) {\\n    return\\n      _initialized &&\\n      _baseStorageExt().agent != address(0) &&\\n      address(asset) != address(0);\\n  }\\n\\n  /**\\n   * @return Agent's implementation address (OZ Proxy's internal override)\\n   */\\n\\n  function _implementation() internal view override returns (address) {\\n    return _baseStorageExt().agent;\\n  }\\n\\n  /**\\n   * @return Agent's implementation address (ERC-897)\\n   */\\n  function implementation() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @return This agent implementation address\\n   */\\n  function agent() external view returns (address) {\\n    return _implementation(); // address(this)\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of a specific input to USD\\n   * @param _amount Amount of the specific input\\n   * @param _index Index of the input to convert\\n   * @return Equivalent USD amount\\n   */\\n  function _inputToUsd(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view whenPriceAware returns (uint256) {\\n    return\\n      _priceAwareStorage().oracle.toUsdBp(address(inputs[_index]), _amount) /\\n      AsMaths.BP_BASIS;\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of USD to a specific input\\n   * @param _amount Amount of USD\\n   * @param _index Index of the input to convert to\\n   * @return Equivalent amount of the specific input\\n   */\\n  function _usdToInput(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view whenPriceAware returns (uint256) {\\n    return\\n      _priceAwareStorage().oracle.fromUsdBp(address(inputs[_index]), _amount) /\\n      AsMaths.BP_BASIS;\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of underlying asset to USD\\n   * @param _amount Amount of underlying asset\\n   * @return Equivalent USD amount\\n   */\\n  function _assetToUsd(\\n    uint256 _amount\\n  ) internal view whenPriceAware returns (uint256) {\\n    return\\n      _priceAwareStorage().oracle.toUsdBp(address(asset), _amount) /\\n      AsMaths.BP_BASIS;\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of USD to underlying asset\\n   * @param _amount Amount of USD\\n   * @return Equivalent amount of underlying asset\\n   */\\n  function _usdToAsset(\\n    uint256 _amount\\n  ) internal view whenPriceAware returns (uint256) {\\n    return\\n      _priceAwareStorage().oracle.fromUsdBp(address(asset), _amount) /\\n      AsMaths.BP_BASIS;\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of underlying asset to a specific input\\n   * @param _amount Amount of underlying asset\\n   * @param _index Index of the input to convert to\\n   * @return Equivalent amount of the specific input\\n   * @dev This should be overridden by strategy implementations\\n   */\\n  function _assetToInput(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view virtual returns (uint256) {\\n    return\\n      _priceAwareStorage().oracle.convert(\\n        address(asset),\\n        _amount,\\n        address(inputs[_index])\\n      );\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of a specific input to underlying asset\\n   * @param _amount Amount of the specific input\\n   * @param _index Index of the input to convert from\\n   * @return Equivalent amount of underlying asset\\n   * @dev This should be overridden by strategy implementations\\n   */\\n  function _inputToAsset(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view virtual returns (uint256) {\\n    return\\n      _priceAwareStorage().oracle.convert(\\n        address(inputs[_index]),\\n        _amount,\\n        address(asset)\\n      );\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of a specific LP/staked LP to its underlying input (`inputs[_index]`)\\n   * @param _amount Amount of LP/staked LP\\n   * @param _index Index of the input\\n   * @return Input equivalent to `_amount` LP/staked LP\\n   * @dev This should be overriden by strategy implementations\\n   */\\n  function _stakeToInput(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view virtual returns (uint256) {\\n    return _amount; // defaults to 1:1 (eg. USDC:aUSDC, ETH:stETH)\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of a specific input (`inputs[_index]`) to LP/staked LP\\n   * @param _amount Amount of input\\n   * @param _index Index of the input\\n   * @return LP/staked LP equivalent to `_amount` input\\n   * @dev This should be overriden by strategy implementations\\n   */\\n  function _inputToStake(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view virtual returns (uint256) {\\n    return _amount; // defaults to 1:1 (eg. aUSDC:USDC, stETH:ETH)\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of a specific LP/staked LP to underlying assets\\n   * @param _amount Amount of LP/staked LP\\n   * @param _index Index of the input\\n   * @return Underlying asset amount equivalent to `_amount` LP/staked LP\\n   */\\n  function _stakeToAsset(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view returns (uint256) {\\n    return _inputToAsset(_stakeToInput(_amount, _index), _index);\\n  }\\n\\n  /**\\n   * @notice Converts `_amount` of underlying assets to a specific LP/staked LP\\n   * @param _amount Amount of underlying assets\\n   * @param _index Index of the input\\n   * @return LP/staked LP equivalent to `_amount` underlying assets\\n   */\\n  function _assetToStake(\\n    uint256 _amount,\\n    uint256 _index\\n  ) internal view returns (uint256) {\\n    return _inputToStake(_assetToInput(_amount, _index), _index);\\n  }\\n\\n  /**\\n   * @notice Converts a full LP/staked LP balance to its underlying input (`inputs[_index]`)\\n   * @param _index Index of the input\\n   * @return Input equivalent to the full LP/staked LP balance\\n   * @dev This should be overriden by strategy implementations\\n   */\\n  function _investedInput(\\n    uint256 _index\\n  ) internal view virtual returns (uint256) {\\n    return\\n      _stakeToInput(\\n        IERC20Metadata(lpTokens[_index]).balanceOf(address(this)),\\n        _index\\n      );\\n  }\\n\\n  function investedInput(uint256 _index) external view returns (uint256) {\\n    return _investedInput(_index);\\n  }\\n\\n  /**\\n   * @notice Converts a full input balance (`inputs[_index]`) to underlying assets\\n   * @param _index Index of the input\\n   * @return Amount of underlying assets equivalent to the full input balance\\n   */\\n  function _invested(uint256 _index) internal view virtual returns (uint256) {\\n    return _inputToAsset(_investedInput(_index), _index);\\n  }\\n\\n  function invested(uint256 _index) external view virtual returns (uint256) {\\n    return _invested(_index);\\n  }\\n\\n  /**\\n   * @notice Sums all inputs invested in the strategy, LP or staked, in underlying assets\\n   * @return total Amount invested\\n   */\\n  function _invested() internal view virtual override returns (uint256 total) {\\n    unchecked {\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        total += _invested(i);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sums all inputs invested in the strategy, LP or staked, in underlying assets\\n   * @return total Amount invested\\n   */\\n  function invested() external view virtual returns (uint256 total) {\\n    return _invested();\\n  }\\n\\n  /**\\n   * @notice Calculates the excess weight for a given input (inputs[`_index`]) in basis points\\n   * @param _index Index of the input\\n   * @param _total Sum of all invested inputs (`0 == 100% == invested()`)\\n   * @return Excess input weight in basis points\\n   */\\n  function _excessWeight(\\n    uint256 _index,\\n    uint256 _total\\n  ) internal view returns (int256) {\\n    if (_total == 0) _total = _invested();\\n    return\\n      int256(_invested(_index).mulDiv(AsMaths.BP_BASIS, _total)) -\\n      int256(uint256(inputWeights[_index])); // de-facto safe as weights are sanitized\\n  }\\n\\n  /**\\n   * @notice Calculates the excess weights for all inputs\\n   * @param _total Sum of all invested inputs (`0 == 100% == invested()`)\\n   * @return excessWeights Array[8] of excess input weights in basis points\\n   */\\n  function _excessWeights(\\n    uint256 _total\\n  ) internal view returns (int256[8] memory excessWeights) {\\n    if (_total == 0) _total = _invested();\\n    unchecked {\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        excessWeights[i] = _excessWeight(i, _total);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the excess liquidity for a given input (inputs[`_index`])\\n   * @param _index Index of the input\\n   * @param _total Sum of all invested inputs (`0 == 100% == invested()`)\\n   * @return Excess input liquidity\\n   */\\n  function _excessLiquidity(\\n    uint256 _index,\\n    uint256 _total\\n  ) internal view virtual returns (int256) {\\n    if (_total == 0) {\\n      _total = _invested();\\n    }\\n    int256 allocated = int256(_invested(_index));\\n    return\\n      _totalWeight == 0\\n        ? allocated\\n        : (allocated -\\n          int256(_total.mulDiv(uint256(inputWeights[_index]), _totalWeight)));\\n  }\\n\\n  /**\\n   * @notice Calculates the excess liquidity for all inputs\\n   * @param _total Sum of all invested inputs (`0 == 100% == invested()`)\\n   * @return excessLiquidity Array[8] of excess input liquidities\\n   */\\n  function _excessLiquidity(\\n    uint256 _total\\n  ) internal view virtual returns (int256[8] memory excessLiquidity) {\\n    if (_total == 0) _total = _invested();\\n    unchecked {\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        excessLiquidity[i] = _excessLiquidity(i, _total);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Previews the amounts that would be liquidated to recover `_amount + totalPendingWithdrawRequest() + allocated.bp(150)` of liquidity\\n   * @param _amount Amount of underlying assets to recover\\n   * @return amounts Array[8] of previewed liquidated amounts in input tokens\\n   */\\n  function _previewLiquidate(\\n    uint256 _amount\\n  ) internal returns (uint256[8] memory amounts) {\\n    (uint256 allocated, uint256 cash) = (_invested(), _available());\\n    unchecked {\\n      uint256 total = allocated + cash;\\n      uint256 targetAlloc = total.mulDiv(_totalWeight, AsMaths.BP_BASIS);\\n      uint256 pending = _totalPendingAssetsRequest();\\n      _amount += pending + targetAlloc.bp(50); // overliquidate (0.5% of allocated) to buffer withdraw-ready liquidity\\n      _amount = AsMaths.min(_amount, allocated);\\n\\n      // excesses accounts for the weights and the cash available in the strategy\\n      int256[8] memory targetExcesses = _excessLiquidity(targetAlloc - _amount);\\n      int256 totalExcess = targetExcesses.sum();\\n\\n      if (totalExcess > 0 && uint256(totalExcess) > _amount) {\\n        _amount = uint256(totalExcess);\\n      }\\n\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        if (_amount < 10) break; // no leftover\\n        if (targetExcesses[i] > 0) {\\n          uint256 need = targetExcesses[i].abs();\\n          if (need > _amount) {\\n            need = _amount;\\n          }\\n          amounts[i] = _assetToInput(need, i);\\n          _amount -= need;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Previews the breakdown of `_amount` underlying assets that would be invested in each input based on the current excess liquidities\\n   * @param _amount Amount of underlying assets to invest\\n   * @return amounts Array[8] of previewed invested amounts\\n   */\\n  function preview(\\n    uint256 _amount,\\n    bool _investing\\n  ) public onlyKeeper returns (uint256[8] memory amounts) {\\n    return _investing ? _previewInvest(_amount) : _previewLiquidate(_amount);\\n  }\\n\\n  /**\\n   * @notice Previews the breakdown of `_amount` underlying assets that would be invested in each input based on the current excess liquidities\\n   * @param _amount Amount of underlying assets to invest\\n   * @return amounts Array[8] of previewed invested amounts\\n   */\\n  function _previewInvest(\\n    uint256 _amount\\n  ) internal returns (uint256[8] memory amounts) {\\n    (uint256 allocated, uint256 cash) = (_invested(), _available());\\n    unchecked {\\n      uint256 total = allocated + cash;\\n\\n      if (_amount == 0) {\\n        uint256 targetCash = total.mulDiv(\\n          AsMaths.BP_BASIS - _totalWeight,\\n          AsMaths.BP_BASIS\\n        );\\n        _amount = cash.subMax0(targetCash);\\n      }\\n\\n      // compute the excess liquidity\\n      int256[8] memory targetExcesses = _excessLiquidity(allocated + _amount);\\n\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        if (_amount < 10) break; // no leftover\\n        if (targetExcesses[i] < 0) {\\n          uint256 need = targetExcesses[i].abs();\\n          if (need > _amount) {\\n            need = _amount;\\n          }\\n          amounts[i] = need;\\n          _amount -= need;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Previews strategy specific swap needs for `_amount` underlying assets to be invested or liquidated\\n   * @param _previewAmounts Array[8] of previewed amounts in each input tokens\\n   * @param _investing True if the swaps are for investing, false if the swaps are for liquidating\\n   * @return from Array[8] of swap input (base) tokens\\n   * @return to Array[8] of swap output (quote) tokens\\n   * @return amounts Array[8] of swap amounts in input tokens\\n   */\\n  function previewSwapAddons(\\n    uint256[8] calldata _previewAmounts,\\n    bool _investing\\n  )\\n    external\\n    onlyKeeper\\n    returns (\\n      address[8] memory from,\\n      address[8] memory to,\\n      uint256[8] memory amounts\\n    )\\n  {\\n    return _previewSwapAddons(_previewAmounts, _investing);\\n  }\\n\\n  function _previewSwapAddons(\\n    uint256[8] calldata _previewAmounts,\\n    bool _investing\\n  )\\n    internal\\n    virtual\\n    returns (\\n      address[8] memory from,\\n      address[8] memory to,\\n      uint256[8] memory amounts\\n    )\\n  {}\\n\\n  /**\\n   * @notice ERC-165 `supportsInterface` check\\n   * @param _interfaceId Interface identifier\\n   * @return True if the interface is supported\\n   */\\n  function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n    return _interfaceId == type(IStrategyV5).interfaceId;\\n  }\\n\\n  /**\\n   * @return Amount of reward tokens available to harvest\\n   * @dev This should be overriden by strategy implementations\\n   */\\n  function rewardsAvailable() public view virtual returns (uint256[] memory) {\\n    return new uint256[](_rewardLength);\\n  }\\n\\n  /**\\n   * @param _token Token address - Use address(1) for native/gas tokens (ETH)\\n   * @return Balance of `_token` in the strategy\\n   */\\n  function _balance(address _token) internal view virtual returns (uint256) {\\n    unchecked {\\n      return\\n        (_token == address(1) || _token == address(_wgas))\\n          ? address(this).balance + _wgas.balanceOf(address(this)) // native+wrapped native\\n          : IERC20Metadata(_token).balanceOf(address(this));\\n    }\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                            SETTERS                             ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Updates the strategy underlying asset (critical, automatically pauses the strategy)\\n   * @notice If the new asset has a different price (USD denominated), a sudden `sharePrice()` change is expected\\n   * @param _asset Address of the new underlying asset\\n   * @param _swapData Swap calldata used to exchange the old `asset` for the new `_asset`\\n   * @param _exchangeRateBp Price factor to convert the old `asset` to the new `_asset` (old asset price * 1e18) / (new asset price)\\n   */\\n  function _updateAsset(\\n    address _asset,\\n    bytes calldata _swapData,\\n    uint256 _exchangeRateBp\\n  ) internal {\\n    PriceAwareStorage storage $ = _priceAwareStorage();\\n    if (_exchangeRateBp == 0) {\\n      if (address($.oracle) != address(0)) {\\n        _exchangeRateBp = $.oracle.exchangeRateBp(address(asset), _asset);\\n      } else {\\n        revert Errors.MissingOracle();\\n      }\\n    }\\n    (bool success, ) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(\\n        IStrategyV5Agent.updateAsset.selector,\\n        _asset,\\n        _swapData,\\n        _exchangeRateBp\\n      )\\n    );\\n    if (!success) {\\n      revert Errors.FailedDelegateCall();\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates the strategy underlying asset (critical, automatically pauses the strategy)\\n   * @notice If the new asset has a different price (USD denominated), a sudden `sharePrice()` change is expected\\n   * @param _asset Address of the new underlying asset\\n   * @param _swapData Swap calldata used to exchange the old `asset` for the new `_asset`\\n   * @param _exchangeRateBp Price factor to convert the old `asset` to the new `_asset` (old asset price * 1e18) / (new asset price)\\n   */\\n  function updateAsset(\\n    address _asset,\\n    bytes calldata _swapData,\\n    uint256 _exchangeRateBp\\n  ) external {\\n    _updateAsset(_asset, _swapData, _exchangeRateBp);\\n  }\\n\\n  /**\\n   * @notice Updates the strategy underlying asset (critical, automatically pauses the strategy)\\n   * @notice If the new asset has a different price (USD denominated), a sudden `sharePrice()` change is expected\\n   * @param _asset Address of the new underlying asset\\n   * @param _swapData Swap calldata used to exchange the old `asset` for the new `_asset`\\n   */\\n  function updateAsset(address _asset, bytes calldata _swapData) external {\\n    _updateAsset(_asset, _swapData, 0);\\n  }\\n\\n  /**\\n   * @notice Sets the strategy inputs and weights if any\\n   * @notice In case of pre-existing inputs, a call to `liquidate()` should precede this in order to not lose track of the strategy's liquidity\\n   * @param _inputs Array of input addresses\\n   * @param _weights Array of input weights\\n   * @param _lpTokens Array of LP tokens\\n   */\\n  function _setInputs(\\n    address[] calldata _inputs,\\n    uint16[] calldata _weights,\\n    address[] calldata _lpTokens\\n  ) internal {\\n    (bool success, ) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(\\n        IStrategyV5Agent.setInputs.selector,\\n        _inputs,\\n        _weights,\\n        _lpTokens\\n      )\\n    );\\n    if (!success) {\\n      revert Errors.FailedDelegateCall();\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the strategy reward tokens if any\\n   * @notice In case of pre-existing rewardTokens, a call to `harvest()` should precede this in order to not lose track of the strategy's pending rewards\\n   * @param _rewardTokens Array of input addresses\\n   */\\n  function _setRewardTokens(address[] calldata _rewardTokens) internal {\\n    (bool success, ) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(\\n        IStrategyV5Agent.setRewardTokens.selector,\\n        _rewardTokens\\n      )\\n    );\\n    if (!success) {\\n      revert Errors.FailedDelegateCall();\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the total pending redemption requests in shares\\n   * @dev Returns the difference between _req.totalRedemption and _req.totalClaimableRedemption in underlying assets\\n   * @return Total amount of pending redemption requests\\n   */\\n  function _totalPendingAssetsRequest() internal returns (uint256) {\\n    (bool success, bytes memory res) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(IAs4626.totalPendingWithdrawRequest.selector)\\n    );\\n    return success ? abi.decode(res, (uint256)) : 0;\\n  }\\n\\n  /**\\n   * @notice Calculates the total pending redemption requests in shares\\n   * @dev Returns the difference between _req.totalRedemption and _req.totalClaimableRedemption in shares\\n   * @return Total amount of pending redemption requests\\n   */\\n  function _totalPendingRedemptionRequest() internal returns (uint256) {\\n    (bool success, bytes memory res) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(IAs4626.totalPendingRedemptionRequest.selector)\\n    );\\n    return success ? abi.decode(res, (uint256)) : 0;\\n  }\\n\\n  /**\\n   * @return Total amount of underlying assets available to withdraw\\n   */\\n  function _availableClaimable() internal returns (uint256) {\\n    (bool success, bytes memory res) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(IAs4626.availableClaimable.selector)\\n    );\\n    return success ? abi.decode(res, (uint256)) : 0;\\n  }\\n\\n  /**\\n   * @return Amount of underlying assets available to non-requested withdrawals, excluding `minLiquidity`\\n   */\\n  function _available() internal virtual returns (uint256) {\\n    (bool success, bytes memory res) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(IStrategyV5Agent.available.selector)\\n    );\\n    return success ? abi.decode(res, (uint256)) : 0;\\n  }\\n\\n  /**\\n   * @return Share price - Amount of underlying assets redeemable for one share\\n   */\\n  function _sharePrice() internal virtual returns (uint256) {\\n    (bool success, bytes memory res) = _baseStorageExt().agent.delegatecall(\\n      abi.encodeWithSelector(IAs4626.sharePrice.selector)\\n    );\\n    return success ? abi.decode(res, (uint256)) : 0;\\n  }\\n\\n  /**\\n   * @notice Sets the strategy agent implementation\\n   * @param _agent Address of the new agent\\n   */\\n  function _updateAgent(address _agent) internal {\\n    if (_agent == address(0)) {\\n      revert Errors.AddressZero();\\n    }\\n    (bool success, ) = _agent.staticcall(\\n      abi.encodeWithSelector(IStrategyV5Agent.proxyType.selector)\\n    );\\n    if (!success) {\\n      revert Errors.ContractNonCompliant();\\n    }\\n    _baseStorageExt().agent = _agent;\\n  }\\n\\n  /**\\n   * @notice Sets the strategy agent implementation\\n   * @param _agent Address of the new agent\\n   */\\n  function updateAgent(address _agent) external onlyAdmin {\\n    _updateAgent(_agent);\\n  }\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             HOOKS                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Called before investing underlying assets into the strategy inputs\\n   * @param _amounts Amount of underlying assets to invest in each input\\n   * @param _params Swaps calldata\\n   */\\n  function _beforeInvest(\\n    uint256[8] calldata _amounts,\\n    bytes[] calldata _params\\n  ) internal virtual {}\\n\\n  /**\\n   * @notice Called after investing underlying assets into the strategy inputs\\n   * @param _totalInvested Sum of underlying assets invested\\n   */\\n  function _afterInvest(\\n    uint256 _totalInvested,\\n    bytes[] calldata _params\\n  ) internal virtual {}\\n\\n  /**\\n   * @notice Called before harvesting rewards from the strategy\\n   */\\n  function _beforeHarvest() internal virtual {}\\n\\n  /**\\n   * @notice Called after harvesting rewards from the strategy\\n   * @param _assetsReceived Amount of underlying assets received from harvesting\\n   */\\n  function _afterHarvest(uint256 _assetsReceived) internal virtual {}\\n\\n  /**\\n   * @notice Called before liquidating strategy inputs\\n   * @param _amounts Amount of each input to liquidate\\n   */\\n  function _beforeLiquidate(\\n    uint256[8] calldata _amounts,\\n    bytes[] calldata _params\\n  ) internal virtual {}\\n\\n  /**\\n   * @notice Called after liquidating strategy inputs\\n   * @param _totalRecovered Total amount of underlying assets recovered from liquidation\\n   */\\n  function _afterLiquidate(\\n    uint256 _totalRecovered,\\n    bytes[] calldata _params\\n  ) internal virtual {}\\n\\n  /*═══════════════════════════════════════════════════════════════╗\\n  ║                             LOGIC                              ║\\n  ╚═══════════════════════════════════════════════════════════════*/\\n\\n  /**\\n   * @notice Sets the lpTokens's allowances on inputs\\n   * @param _amount Amount of allowance to set\\n   */\\n  function _setLpTokenAllowances(uint256 _amount) internal virtual {\\n    // default is to approve AsMaths.MAX_UINT256\\n    unchecked {\\n      _amount = _amount > 0 ? _amount : AsMaths.MAX_UINT256;\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        if (address(lpTokens[i]) == address(0)) break;\\n        inputs[i].forceApprove(address(lpTokens[i]), _amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Stakes or provides `_amount` from `input[_index]` to `lpTokens[_index]`\\n   * @param _index Index of the input to stake\\n   * @param _amount Amount of underlying assets to allocate to `inputs[_index]`\\n   * @param _params Swaps calldata\\n   */\\n  function _stake(uint256 _index, uint256 _amount, bytes[] calldata _params) internal virtual {\\n    _stake(_index, _amount);\\n  }\\n\\n  function _stake(uint256 _index, uint256 _amount) internal virtual {\\n    revert Errors.NotImplemented();\\n  }\\n\\n  /**\\n   * @notice Unstakes or liquidates `_amount` of `lpTokens[i]` back to `input[_index]`\\n   * @param _index Index of the input to liquidate\\n   * @param _amount Amount of underlying assets to recover from liquidating `inputs[_index]`\\n   * @param _params Swaps calldata\\n   */\\n  function _unstake(uint256 _index, uint256 _amount, bytes[] calldata _params) internal virtual {\\n    _unstake(_index, _amount);\\n  }\\n\\n  function _unstake(uint256 _index, uint256 _amount) internal virtual {\\n    revert Errors.ContractNonCompliant();\\n  }\\n\\n  /**\\n   * @notice Invests `_amounts` of underlying assets in the strategy inputs\\n   * @param _amounts Amount of underlying assets to invest in each input\\n   * @param _params Swaps calldata\\n   * @return totalInvested Sum of underlying assets invested\\n   */\\n  function _invest(\\n    uint256[8] calldata _amounts, // from previewInvest()\\n    bytes[] calldata _params\\n  ) internal virtual returns (uint256 totalInvested) {\\n    _beforeInvest(_amounts, _params); // strat specific hook\\n    unchecked {\\n      uint256 spent;\\n      uint256 toStake;\\n\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        if (_amounts[i] < 10) {\\n          continue;\\n        }\\n\\n        if (asset != inputs[i]) {\\n          (toStake, spent) = swapper.decodeAndSwap({\\n            _input: address(asset),\\n            _output: address(inputs[i]),\\n            _amount: _amounts[i],\\n            _params: _params[i]\\n          });\\n          // pick up any input dust (eg. from previous liquidate()), not just the swap output\\n          toStake = inputs[i].balanceOf(address(this));\\n        } else {\\n          toStake = _amounts[i];\\n          spent = _amounts[i];\\n        }\\n\\n        uint256 stakeOut = _investedInput(i);\\n        uint256 stakeIn = inputs[i].balanceOf(address(this));\\n        _stake(i, toStake, _params);\\n        stakeOut = _investedInput(i) - stakeOut; // new stakes in input[i]\\n        stakeIn = stakeIn - inputs[i].balanceOf(address(this));\\n\\n        if (stakeOut < stakeIn.subBp(_4626StorageExt().maxSlippageBps)) {\\n          revert Errors.AmountTooLow(stakeOut);\\n        }\\n\\n        totalInvested += spent;\\n      }\\n\\n      _afterInvest(totalInvested, _params); // strat specific hook\\n\\n      last.invest = uint64(block.timestamp);\\n      emit Invest(totalInvested, block.timestamp);\\n    }\\n  }\\n\\n  /**\\n   * @notice Invests `_amounts` of underlying assets in the strategy inputs\\n   * @param _amounts Amounts of asset to invest in each input\\n   * @param _params Swaps calldata\\n   * @return totalInvested Sum of underlying assets invested\\n   */\\n  function invest(\\n    uint256[8] calldata _amounts, // from previewInvest()\\n    bytes[] calldata _params\\n  ) external nonReentrant onlyKeeper returns (uint256 totalInvested) {\\n    return _invest(_amounts, _params);\\n  }\\n\\n  /**\\n   * @notice Liquidates inputs according to `_amounts` using `_params` for swaps, expecting to recover at least `_minLiquidity` of underlying assets\\n   * @param _amounts Amount of each inputs to liquidate in input tokens\\n   * @param _minLiquidity Minimum amount of assets to retrieve\\n   * @param _panic Sets to true to ignore slippage when liquidating\\n   * @param _params Generic calldata (e.g., SwapperParams)\\n   * @return totalRecovered Total amount of asset withdrawn\\n   */\\n  function _liquidate(\\n    uint256[8] calldata _amounts,\\n    uint256 _minLiquidity,\\n    bool _panic,\\n    bytes[] calldata _params\\n  ) internal virtual returns (uint256 totalRecovered) {\\n    _beforeLiquidate(_amounts, _params); // strat specific hook\\n    unchecked {\\n      // pre-liquidation sharePrice\\n      last.sharePrice = _sharePrice();\\n\\n      // in share\\n      uint256 pendingRedemption = _totalPendingRedemptionRequest();\\n\\n      // liquidate protocol positions\\n      uint256 toUnstake;\\n      uint256 recovered;\\n\\n      for (uint256 i = 0; i < _inputLength; i++) {\\n        if (_amounts[i] < 10) {\\n          continue;\\n        }\\n        toUnstake = _inputToStake(_amounts[i], i);\\n        // AsMaths.min(_inputToStake(_amounts[i], i), lpTokens[i].balanceOf(address(this)));\\n        uint256 balanceBefore = inputs[i].balanceOf(address(this));\\n        _unstake(uint8(i), toUnstake, _params);\\n        recovered = inputs[i].balanceOf(address(this)) - balanceBefore; // `inputs[i]` recovered\\n        // swap the unstaked `input[i]` tokens for underlying assets if necessary\\n        if (inputs[i] != asset) {\\n          // check for missing swapData\\n          if (_params[i].length == 0) {\\n            revert Errors.InvalidData();\\n          }\\n          // check for natives to before swapping\\n          if (address(inputs[i]) == address(1)) {\\n            _wrapNative(recovered); // ETH->WETH to swap with\\n          }\\n          (recovered, ) = swapper.decodeAndSwap({ // `asset` recovered\\n            _input: address(inputs[i]),\\n            _output: address(asset),\\n            _amount: _amounts[i],\\n            _params: _params[i]\\n          });\\n        } else {\\n          recovered = _amounts[i];\\n        }\\n\\n        // unified slippage check (unstake+remove liquidity+swap out)\\n        if (\\n          recovered <\\n          _inputToAsset(_amounts[i], i).subBp(_4626StorageExt().maxSlippageBps)\\n        ) {\\n          revert Errors.AmountTooLow(recovered);\\n        }\\n\\n        // sum up the recovered underlying assets\\n        totalRecovered += recovered;\\n      }\\n\\n      _req.totalClaimableRedemption += pendingRedemption;\\n\\n      // use availableClaimable() and not borrowable() to avoid intra-block cash variance (absorbed by the redemption claim delays)\\n      uint256 liquidityAvailable = _availableClaimable().subMax0(\\n        _req.totalClaimableRedemption.mulDiv(\\n          last.sharePrice * _weiPerAsset,\\n          _WEI_PER_SHARE_SQUARED\\n        )\\n      );\\n\\n      // check if we have enough cash to repay redemption requests\\n      if (liquidityAvailable < _minLiquidity && !_panic) {\\n        revert Errors.AmountTooLow(liquidityAvailable);\\n      }\\n      _afterLiquidate(totalRecovered, _params); // strat specific hook\\n      last.liquidate = uint64(block.timestamp);\\n      emit Liquidate(totalRecovered, liquidityAvailable, block.timestamp);\\n    }\\n  }\\n\\n  /**\\n   * @notice Liquidates inputs according to `_amounts` using `_params` for swaps, expecting to recover at least `_minLiquidity` of underlying assets\\n   * @param _amounts Amount of each inputs to liquidate in input tokens\\n   * @param _minLiquidity Minimum amount of assets to retrieve\\n   * @param _panic Sets to true to ignore slippage when liquidating\\n   * @param _params Generic calldata (e.g., SwapperParams)\\n   * @return totalRecovered Total amount of asset withdrawn\\n   */\\n  function liquidate(\\n    uint256[8] calldata _amounts,\\n    uint256 _minLiquidity,\\n    bool _panic,\\n    bytes[] calldata _params\\n  ) external nonReentrant onlyKeeper returns (uint256 totalRecovered) {\\n    return _liquidate(_amounts, _minLiquidity, _panic, _params);\\n  }\\n\\n  /**\\n   * @notice Requests a liquidation for `_amount` of underlying assets\\n   * @param _amount Amount to be liquidated\\n   * @return Amount of underlying assets to be liquidated\\n   * @dev This should be overriden by strategy implementations, used for lockable strategies\\n   */\\n  function _liquidateRequest(\\n    uint256 _amount\\n  ) internal virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Requests a liquidation for `_amount` of underlying assets\\n   * @param _amount Amount to be liquidated\\n   * @return Amount of underlying assets to be liquidated\\n   * @dev This should be overriden by strategy implementations, used for lockable strategies\\n   */\\n  function liquidateRequest(uint256 _amount) external returns (uint256) {\\n    return _liquidateRequest(_amount);\\n  }\\n\\n  /**\\n   * @notice Claims rewards from the strategy underlying protocols\\n   * @return amounts Array of amounts of reward tokens claimed\\n   * @dev Should be overriden by strategy implementations\\n   */\\n  function _claimRewards() internal virtual returns (uint256[] memory amounts) {\\n    return new uint256[](_rewardLength);\\n  }\\n\\n  /**\\n   * @notice Claims rewards from the strategy underlying protocols\\n   * @return amounts Array of amounts of reward tokens claimed\\n   * @dev Should be overriden by strategy implementations\\n   */\\n  function claimRewards()\\n    public\\n    virtual\\n    onlyKeeper\\n    returns (uint256[] memory amounts)\\n  {\\n    return _claimRewards();\\n  }\\n\\n  /**\\n   * @notice Swaps `_balances` of reward tokens to underlying asset\\n   * @param _balances Array of amounts of rewards to swap\\n   * @param _params Swaps calldata\\n   * @return assetsReceived Amount of underlying assets received (after swap)\\n   */\\n  function _swapRewards(\\n    uint256[] memory _balances,\\n    bytes[] calldata _params\\n  ) internal virtual onlyKeeper returns (uint256 assetsReceived) {\\n    uint256 received;\\n    unchecked {\\n      for (uint256 i = 0; i < _rewardLength; i++) {\\n        if (rewardTokens[i] != address(asset) && _balances[i] > 10) {\\n          (received, ) = swapper.decodeAndSwap({\\n            _input: rewardTokens[i],\\n            _output: address(asset),\\n            _amount: _balances[i],\\n            _params: _params[i]\\n          });\\n          assetsReceived += received;\\n        } else {\\n          assetsReceived += _balances[i];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Harvests the strategy underlying protocols' rewards (claim+swap)\\n   * @param _params Swaps calldata\\n   * @return assetsReceived Amount of underlying assets received (after swap)\\n   */\\n  function _harvest(\\n    bytes[] calldata _params\\n  ) internal virtual returns (uint256 assetsReceived) {\\n    _beforeHarvest(); // strat specific hook\\n    unchecked {\\n      assetsReceived = _swapRewards(_claimRewards(), _params);\\n      // reset expected profits to updated value + amount\\n      _expectedProfits =\\n        AsAccounting.unrealizedProfits(\\n          last.harvest,\\n          _expectedProfits,\\n          _profitCooldown\\n        ) +\\n        assetsReceived;\\n      _afterHarvest(assetsReceived); // strat specific hook\\n      last.harvest = uint64(block.timestamp);\\n      emit Harvest(assetsReceived, block.timestamp);\\n    }\\n  }\\n\\n  /**\\n   * @notice Harvests the strategy underlying protocols' rewards (claim+swap)\\n   * @param _params Swaps calldata\\n   * @return assetsReceived Amount of underlying assets received (after swap)\\n   */\\n  function harvest(\\n    bytes[] calldata _params\\n  ) external onlyKeeper nonReentrant returns (uint256) {\\n    return _harvest(_params);\\n  }\\n\\n  /**\\n   * @notice Compounds by investing `_amounts` of underlying assets and rewards back into the strategy, using swap calldata for both harvest and invest\\n   * @dev Pass a conservative _amount (e.g., available() + 90% of rewards valued in asset) to ensure the asset->inputs swaps success\\n   * @dev Off-chain `harvest() + invest()` call flow should be used for more accuracy\\n   * @param _amounts Amount of inputs to invest (in asset, after harvest-> should include rewards)\\n   * @param _harvestParams Swap calldata for harvesting\\n   * @param _investParams Swap calldata for investing\\n   * @return totalHarvested Amount of rewards harvested\\n   * @return totalInvested Amount of underlying assets re-invested\\n   */\\n  function _compound(\\n    uint256[8] calldata _amounts,\\n    bytes[] calldata _harvestParams,\\n    bytes[] calldata _investParams\\n  ) internal virtual returns (uint256 totalHarvested, uint256 totalInvested) {\\n    // we expect the SwapData to cover harvesting + investing\\n    if (\\n      _harvestParams.length != _rewardLength ||\\n      _investParams.length != _inputLength\\n    ) {\\n      revert Errors.InvalidData();\\n    }\\n\\n    // harvest using the first calldata bytes (swap rewards->asset)\\n    totalHarvested = _harvest(_harvestParams);\\n    totalInvested = _invest(_amounts, _investParams);\\n  }\\n\\n  /**\\n   * @notice Compounds by investing `_amounts` of underlying assets and rewards back into the strategy, using swap calldata for both harvest and invest\\n   * @dev Pass a conservative _amount (e.g., available() + 90% of rewards valued in asset) to ensure the asset->inputs swaps success\\n   * @dev Off-chain `harvest() + invest()` call flow should be used for more accuracy\\n   * @param _amounts Amount of inputs to invest (in asset, after harvest-> should include rewards)\\n   * @param _harvestParams Swap calldata for harvesting\\n   * @param _investParams Swap calldata for investing\\n   * @return totalHarvested Amount of rewards harvested\\n   * @return totalInvested Amount of underlying assets re-invested\\n   */\\n  function compound(\\n    uint256[8] calldata _amounts,\\n    bytes[] calldata _harvestParams,\\n    bytes[] calldata _investParams\\n  )\\n    external\\n    nonReentrant\\n    onlyKeeper\\n    returns (uint256 totalHarvested, uint256 totalInvested)\\n  {\\n    (totalHarvested, totalInvested) = _compound(\\n      _amounts,\\n      _harvestParams,\\n      _investParams\\n    );\\n  }\\n\\n  /**\\n   * @notice Wraps `_amount` native tokens from the contract's balance\\n   * @param _amount Amount of native assets to wrap\\n   */\\n  function _wrapNative(uint256 _amount) internal {\\n    if (_amount > address(this).balance) {\\n      revert Errors.AmountTooHigh(_amount);\\n    }\\n    if (_amount > 0) {\\n      _wgas.deposit{value: _amount}();\\n    }\\n  }\\n\\n  /**\\n   * @notice Wraps the contract full native balance (the contract does not need gas)\\n   */\\n  function _wrapNative() internal {\\n    _wrapNative(address(this).balance);\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/implementations/Aave/interfaces/v3/Types.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseAsset;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/implementations/Aave/interfaces/v3/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\ninterface IPoolAddressesProvider {\\n\\n  // Events\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  event PoolConfiguratorUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  event PriceOracleUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  event ACLManagerUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  event PriceOracleSentinelUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  event PoolDataProviderUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  event AddressSet(\\n    bytes32 indexed id,\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  // Functions\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function setAddressAsProxy(\\n    bytes32 id,\\n    address newImplementationAddress\\n  ) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function getPool() external view returns (address);\\n\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  function getPoolConfigurator() external view returns (address);\\n\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  function getACLManager() external view returns (address);\\n\\n  function setACLManager(address newAclManager) external;\\n\\n  function getACLAdmin() external view returns (address);\\n\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  function getPoolDataProvider() external view returns (address);\\n\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\\ninterface IPriceOracleGetter {\\n  // Functions\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface IAaveOracle is IPriceOracleGetter {\\n\\n  // Events\\n  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  // Functions\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  function setAssetSources(\\n    address[] calldata assets,\\n    address[] calldata sources\\n  ) external;\\n\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  function getAssetsPrices(\\n    address[] calldata assets\\n  ) external view returns (uint256[] memory);\\n\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  function getFallbackOracle() external view returns (address);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/implementations/Aave/interfaces/v3/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IAavePool {\\n\\n  // Events\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  event BackUnbacked(\\n    address indexed reserve,\\n    address indexed backer,\\n    uint256 amount,\\n    uint256 fee\\n  );\\n\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  event Withdraw(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  event ReserveUsedAsCollateralEnabled(\\n    address indexed reserve,\\n    address indexed user\\n  );\\n\\n  event ReserveUsedAsCollateralDisabled(\\n    address indexed reserve,\\n    address indexed user\\n  );\\n\\n  event RebalanceStableBorrowRate(\\n    address indexed reserve,\\n    address indexed user\\n  );\\n\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  // Functions\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external;\\n\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  function setUserUseReserveAsCollateral(\\n    address asset,\\n    bool useAsCollateral\\n  ) external;\\n\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function dropReserve(address asset) external;\\n\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  function getReserveNormalizedIncome(\\n    address asset\\n  ) external view returns (uint256);\\n\\n  function getReserveNormalizedVariableDebt(\\n    address asset\\n  ) external view returns (uint256);\\n\\n  function getReserveData(\\n    address asset\\n  ) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  function configureEModeCategory(\\n    uint8 id,\\n    DataTypes.EModeCategory memory config\\n  ) external;\\n\\n  function getEModeCategoryData(\\n    uint8 id\\n  ) external view returns (DataTypes.EModeCategory memory);\\n\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\\ninterface IRewardsController {\\n  function claimAllRewardsToSelf(\\n    address[] calldata assets\\n  )\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  function POOL() external view returns (IAavePool);\\n}\\n\\ninterface IFlashLoanSimpleReceiver {\\n  function executeOperation(\\n    address asset,\\n    uint256 amount,\\n    uint256 premium,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  function POOL() external view returns (IAavePool);\\n}\\n\",\"versionPragma\":\"0.8.25\"},\"src/implementations/Lodestar/interfaces/ILodestar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IComptroller {\\n  struct CompMarketState {\\n    uint224 index;\\n    uint32 block;\\n  }\\n\\n  struct Market {\\n    bool isListed;\\n    uint256 collateralFactorMantissa;\\n    bool isComped;\\n  }\\n\\n  event ActionPaused(string action, bool pauseState);\\n  event ActionPaused(address cToken, string action, bool pauseState);\\n  event CompAccruedAdjusted(\\n    address indexed user,\\n    uint256 oldCompAccrued,\\n    uint256 newCompAccrued\\n  );\\n  event CompBorrowSpeedUpdated(address indexed cToken, uint256 newSpeed);\\n  event CompGranted(address recipient, uint256 amount);\\n  event CompReceivableUpdated(\\n    address indexed user,\\n    uint256 oldCompReceivable,\\n    uint256 newCompReceivable\\n  );\\n  event CompSupplySpeedUpdated(address indexed cToken, uint256 newSpeed);\\n  event ContributorCompSpeedUpdated(\\n    address indexed contributor,\\n    uint256 newSpeed\\n  );\\n  event DistributedBorrowerComp(\\n    address indexed cToken,\\n    address indexed borrower,\\n    uint256 compDelta,\\n    uint256 compBorrowIndex\\n  );\\n  event DistributedSupplierComp(\\n    address indexed cToken,\\n    address indexed supplier,\\n    uint256 compDelta,\\n    uint256 compSupplyIndex\\n  );\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n  event MarketEntered(address cToken, address account);\\n  event MarketExited(address cToken, address account);\\n  event MarketListed(address cToken);\\n  event NewBorrowCap(address indexed cToken, uint256 newBorrowCap);\\n  event NewBorrowCapGuardian(\\n    address oldBorrowCapGuardian,\\n    address newBorrowCapGuardian\\n  );\\n  event NewCloseFactor(\\n    uint256 oldCloseFactorMantissa,\\n    uint256 newCloseFactorMantissa\\n  );\\n  event NewCollateralFactor(\\n    address cToken,\\n    uint256 oldCollateralFactorMantissa,\\n    uint256 newCollateralFactorMantissa\\n  );\\n  event NewLiquidationIncentive(\\n    uint256 oldLiquidationIncentiveMantissa,\\n    uint256 newLiquidationIncentiveMantissa\\n  );\\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n  event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\\n  event NewReserveGuardian(\\n    address oldReserveGuardian,\\n    address newReserveGuardian\\n  );\\n  event NewSpeedGuardian(address oldSpeedGuardian, address newSpeedGuardian);\\n  event NewSupplyCap(address indexed cToken, uint256 newSupplyCap);\\n  event NewSupplyCapGuardian(\\n    address oldSupplyCapGuardian,\\n    address newSupplyCapGuardian\\n  );\\n\\n  function _become(address unitroller) external;\\n\\n  function _borrowGuardianPaused() external view returns (bool);\\n\\n  function _grantComp(address recipient, uint256 amount) external;\\n\\n  function _mintGuardianPaused() external view returns (bool);\\n\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n\\n  function _setBorrowPaused(address cToken, bool state) external returns (bool);\\n\\n  function _setCloseFactor(\\n    uint256 newCloseFactorMantissa\\n  ) external returns (uint256);\\n\\n  function _setCollateralFactor(\\n    address cToken,\\n    uint256 newCollateralFactorMantissa\\n  ) external returns (uint256);\\n\\n  function _setCompSpeeds(\\n    address[] memory cTokens,\\n    uint256[] memory supplySpeeds,\\n    uint256[] memory borrowSpeeds\\n  ) external;\\n\\n  function _setContributorCompSpeed(\\n    address contributor,\\n    uint256 compSpeed\\n  ) external;\\n\\n  function _setLiquidationIncentive(\\n    uint256 newLiquidationIncentiveMantissa\\n  ) external returns (uint256);\\n\\n  function _setMarketBorrowCaps(\\n    address[] memory cTokens,\\n    uint256[] memory newBorrowCaps\\n  ) external;\\n\\n  function _setMarketSupplyCaps(\\n    address[] memory cTokens,\\n    uint256[] memory newSupplyCaps\\n  ) external;\\n\\n  function _setMintPaused(address cToken, bool state) external returns (bool);\\n\\n  function _setPauseGuardian(\\n    address newPauseGuardian\\n  ) external returns (uint256);\\n\\n  function _setPriceOracle(address newOracle) external returns (uint256);\\n\\n  function _setSeizePaused(bool state) external returns (bool);\\n\\n  function _setSpeedGuardian(address newSpeedGuardian) external;\\n\\n  function _setSupplyCapGuardian(address newSupplyCapGuardian) external;\\n\\n  function _setTransferPaused(bool state) external returns (bool);\\n\\n  function _supportMarket(address cToken) external returns (uint256);\\n\\n  function accountAssets(address, uint256) external view returns (address);\\n\\n  function admin() external view returns (address);\\n\\n  function allMarkets(uint256) external view returns (address);\\n\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external returns (uint256);\\n\\n  function borrowCapGuardian() external view returns (address);\\n\\n  function borrowCaps(address) external view returns (uint256);\\n\\n  function borrowGuardianPaused(address) external view returns (bool);\\n\\n  function borrowVerify(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external;\\n\\n  function checkMembership(\\n    address account,\\n    address cToken\\n  ) external view returns (bool);\\n\\n  function claimComp(address holder, address[] memory cTokens) external;\\n\\n  function claimComp(\\n    address[] memory holders,\\n    address[] memory cTokens,\\n    bool borrowers,\\n    bool suppliers\\n  ) external;\\n\\n  function claimComp(address holder) external;\\n\\n  function closeFactorMantissa() external view returns (uint256);\\n\\n  function compAccrued(address) external view returns (uint256);\\n\\n  function compBorrowSpeeds(address) external view returns (uint256);\\n\\n  function compBorrowState(\\n    address\\n  ) external view returns (uint224 index, uint32 block);\\n\\n  function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n  function compContributorSpeeds(address) external view returns (uint256);\\n\\n  function compInitialIndex() external view returns (uint224);\\n\\n  function compRate() external view returns (uint256);\\n\\n  function compReceivable(address) external view returns (uint256);\\n\\n  function compSpeeds(address) external view returns (uint256);\\n\\n  function compSupplierIndex(address, address) external view returns (uint256);\\n\\n  function compSupplySpeeds(address) external view returns (uint256);\\n\\n  function compSupplyState(\\n    address\\n  ) external view returns (uint224 index, uint32 block);\\n\\n  function comptrollerImplementation() external view returns (address);\\n\\n  function enableLooping(bool state) external returns (bool);\\n\\n  function enterMarkets(\\n    address[] memory cTokens\\n  ) external returns (uint256[] memory);\\n\\n  function exitMarket(address cTokenAddress) external returns (uint256);\\n\\n  function getAccountLiquidity(\\n    address account\\n  ) external view returns (uint256, uint256, uint256);\\n\\n  function getAllMarkets() external view returns (address[] memory);\\n\\n  function getAssetsIn(\\n    address account\\n  ) external view returns (address[] memory);\\n\\n  function getBlockNumber() external view returns (uint256);\\n\\n  function getCompAddress() external view returns (address);\\n\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount\\n  ) external view returns (uint256, uint256, uint256);\\n\\n  function isComptroller() external view returns (bool);\\n\\n  function isDeprecated(address cToken) external view returns (bool);\\n\\n  function isLoopingEnabled(address user) external view returns (bool);\\n\\n  function lastContributorBlock(address) external view returns (uint256);\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function liquidateBorrowVerify(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 actualRepayAmount,\\n    uint256 seizeTokens\\n  ) external;\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 actualRepayAmount\\n  ) external view returns (uint256, uint256);\\n\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n  function loopEnabled(address) external view returns (bool);\\n\\n  function markets(\\n    address\\n  )\\n    external\\n    view\\n    returns (bool isListed, uint256 collateralFactorMantissa, bool isComped);\\n\\n  function maxAssets() external view returns (uint256);\\n\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external returns (uint256);\\n\\n  function mintGuardianPaused(address) external view returns (bool);\\n\\n  function mintVerify(\\n    address cToken,\\n    address minter,\\n    uint256 actualMintAmount,\\n    uint256 mintTokens\\n  ) external;\\n\\n  function oracle() external view returns (address);\\n\\n  function pauseGuardian() external view returns (address);\\n\\n  function pendingAdmin() external view returns (address);\\n\\n  function pendingComptrollerImplementation() external view returns (address);\\n\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external returns (uint256);\\n\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external pure;\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 actualRepayAmount,\\n    uint256 borrowerIndex\\n  ) external;\\n\\n  function reserveGuardian() external view returns (address);\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  function seizeGuardianPaused() external view returns (bool);\\n\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external;\\n\\n  function speedGuardian() external view returns (address);\\n\\n  function supplyCapGuardian() external view returns (address);\\n\\n  function supplyCaps(address) external view returns (uint256);\\n\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external returns (uint256);\\n\\n  function transferGuardianPaused() external view returns (bool);\\n\\n  function transferVerify(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external;\\n\\n  function updateContributorRewards(address contributor) external;\\n}\\n\\ninterface IUnitroller is IComptroller {}\\n\\ninterface ILTokenStorage {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function admin() external view returns (address);\\n\\n  function pendingAdmin() external view returns (address);\\n\\n  function comptroller() external view returns (address);\\n\\n  function interestRateModel() external view returns (address);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function accrualBlockNumber() external view returns (uint256);\\n\\n  function borrowIndex() external view returns (uint256);\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\n}\\n\\ninterface ILToken is ILTokenStorage {\\n  event AccrueInterest(\\n    uint256 cashPrior,\\n    uint256 interestAccumulated,\\n    uint256 borrowIndex,\\n    uint256 totalBorrows\\n  );\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n  event Borrow(\\n    address borrower,\\n    uint256 borrowAmount,\\n    uint256 accountBorrows,\\n    uint256 totalBorrows\\n  );\\n  event RepayBorrow(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 accountBorrows,\\n    uint256 totalBorrows\\n  );\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n  event NewComptroller(address oldComptroller, address newComptroller);\\n  event NewMarketInterestRateModel(\\n    address oldInterestRateModel,\\n    address newInterestRateModel\\n  );\\n  event NewReserveFactor(\\n    uint256 oldReserveFactorMantissa,\\n    uint256 newReserveFactorMantissa\\n  );\\n  event ReservesAdded(\\n    address benefactor,\\n    uint256 addAmount,\\n    uint256 newTotalReserves\\n  );\\n  event ReservesReduced(\\n    address admin,\\n    uint256 reduceAmount,\\n    uint256 newTotalReserves\\n  );\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 amount\\n  );\\n\\n  function transfer(address dst, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function getAccountSnapshot(\\n    address account\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function accrueInterest() external returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    ILToken cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function sweepToken(address token) external;\\n\\n  function _addReserves(uint256 addAmount) external returns (uint256);\\n\\n  function _setPendingAdmin(\\n    address payable newPendingAdmin\\n  ) external returns (uint256);\\n\\n  function _acceptAdmin() external returns (uint256);\\n\\n  function _setComptroller(\\n    IComptroller newComptroller\\n  ) external returns (uint256);\\n\\n  function _setReserveFactor(\\n    uint256 newReserveFactorMantissa\\n  ) external returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n  function _setInterestRateModel(\\n    address newInterestRateModel\\n  ) external returns (uint256);\\n}\\n\",\"versionPragma\":\"0.8.25\"}}}","address":"0xd785D8bb64c8e23b659b21D2AB045d192B4481B5","bytecode":"0x6080604052600060045562989680600555620d2f00600f5534801561002357600080fd5b50604051615ebf380380615ebf83398101604081905261004291610216565b80808080806001600160a01b03811661006e57604051639fabe1c160e01b815260040160405180910390fd5b604080513360248083019190915282518083039091018152604490910182526020810180516001600160e01b0316630935e01b60e21b17905290516000916001600160a01b038416916100c19190610246565b600060405180830381855afa9150503d80600081146100fc576040519150601f19603f3d011682016040523d82523d6000602084013e610101565b606091505b50509050806101235760405163031773fb60e61b815260040160405180910390fd5b507f94de5bb549dc3b3f2a557f7067a0d52c6921e50388ea6bea5cf4ee301cf1a40080546001600160a01b0319166001600160a01b039290921691909117905550506002805462ff00001916905550600160035561017f610186565b5050610275565b61018e6101e4565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586101c73390565b6040516001600160a01b03909116815260200160405180910390a1565b6101f660025462010000900460ff1690565b156102145760405163d93c066560e01b815260040160405180910390fd5b565b60006020828403121561022857600080fd5b81516001600160a01b038116811461023f57600080fd5b9392505050565b6000825160005b81811015610267576020818601810151858301520161024d565b506000920191825250919050565b615c3b806102846000396000f3fe6080604052600436106102a25760003560e01c80637a1ed23411610165578063bc43cbaf116100cc578063d820f49211610085578063d820f4921461095d578063da8ec8e114610973578063dacd7bcd14610993578063ddef9ea1146109b3578063e7a7250a146109d3578063f5ff5c761461067b578063f8389526146109e8576102a9565b8063bc43cbaf14610873578063c415b95c14610888578063c59ed9cd146108a8578063c9fe4f07146108c8578063cafb2202146108f7578063cff0ab961461090c576102a9565b80638456cb591161011e5780638456cb591461076357806388b51f4b1461077857806395d89b41146107a75780639af1d35a146107bc578063a31048ec1461083c578063b50a957514610853576102a9565b80637a1ed234146106ae5780637bb7bed1146106ce5780637dc0d1d0146106ee5780637f4d8f371461070357806380b4ec9f14610723578063839006f214610743576102a9565b80632b3297f9116102095780633f4ba83a116101c25780633f4ba83a1461055757806347799da81461056c57806349f41a421461062857806350187a26146106485780635c60da1b1461067b5780635c975abb14610690576102a9565b80632b3297f914610483578063313ce567146104a3578063372500ab146104cf5780633778ab1e146104f1578063382ef1881461050757806338d52e0f14610537576102a9565b80631b11d0ff1161025b5780631b11d0ff146103c05780631bb5e2dc146103e05780631cb44dfc1461040d5780631ee427001461042d5780631f8244c71461044d578063252cf2d21461046d576102a9565b806301ffc9a7146102b357806303506456146102f957806306fdde0314610327578063158ef93e14610349578063164fb39c1461035e578063188973681461038b576102a9565b366102a957005b6102b1610a08565b005b3480156102bf57600080fd5b506102e46102ce366004614c4b565b6001600160e01b03191663f4e6f0c160e01b1490565b60405190151581526020015b60405180910390f35b34801561030557600080fd5b50610319610314366004614cd2565b610a1a565b6040519081526020016102f0565b34801561033357600080fd5b5061033c610a5a565b6040516102f09190614d77565b34801561035557600080fd5b506102e4610ae8565b34801561036a57600080fd5b5061037e610379366004614d98565b610b2f565b6040516102f09190614deb565b34801561039757600080fd5b506103ab6103a6366004614dfa565b610b74565b604080519283526020830191909152016102f0565b3480156103cc57600080fd5b506102e46103db366004614ed4565b610bbd565b3480156103ec57600080fd5b506104006103fb366004614f4f565b610cc5565b6040516102f09190614f68565b34801561041957600080fd5b506102b1610428366004614f7c565b610ce5565b34801561043957600080fd5b506102b161044836600461504e565b610cfc565b34801561045957600080fd5b50610319610468366004615082565b610d10565b34801561047957600080fd5b5061031960055481565b34801561048f57600080fd5b50602654610400906001600160a01b031681565b3480156104af57600080fd5b506002546104bd9060ff1681565b60405160ff90911681526020016102f0565b3480156104db57600080fd5b506104e4610d54565b6040516102f091906150e6565b3480156104fd57600080fd5b5061031960145481565b34801561051357600080fd5b506102e4610522366004614f7c565b60156020526000908152604090205460ff1681565b34801561054357600080fd5b50600654610400906001600160a01b031681565b34801561056357600080fd5b506102b1610ecf565b34801561057857600080fd5b50600854600954600a54600b54600c54600d54600e546105c7966001600160401b0380821697600160401b8304821697600160801b8404831697600160c01b909404831696929091169490938a565b604080516001600160401b039b8c168152998b1660208b0152978a1697890197909752948816606088015296909216608086015260a085015260c084015260e0830193909352610100820192909252610120810191909152610140016102f0565b34801561063457600080fd5b506102b1610643366004614f7c565b610ee2565b34801561065457600080fd5b50610668610663366004614f4f565b610ef6565b60405161ffff90911681526020016102f0565b34801561068757600080fd5b50610400610f24565b34801561069c57600080fd5b5060025462010000900460ff166102e4565b3480156106ba57600080fd5b506102b16106c936600461512a565b610f2e565b3480156106da57600080fd5b506104006106e9366004614f4f565b610f40565b3480156106fa57600080fd5b50610400610f50565b34801561070f57600080fd5b506102b161071e366004614f7c565b610f71565b34801561072f57600080fd5b5061031961073e366004614f4f565b610f85565b34801561074f57600080fd5b506102b161075e366004614f7c565b610f8d565b34801561076f57600080fd5b506102b1610fc0565b34801561078457600080fd5b5061078f6202a30081565b6040516001600160401b0390911681526020016102f0565b3480156107b357600080fd5b5061033c610fd3565b3480156107c857600080fd5b50601154601254610802916001600160401b0380821692600160401b8304821692600160801b8104831692600160c01b9091048116911685565b604080516001600160401b03968716815294861660208601529285169284019290925283166060830152909116608082015260a0016102f0565b34801561084857600080fd5b5061078f62093a8081565b34801561085f57600080fd5b5061031961086e366004614f4f565b610fe0565b34801561087f57600080fd5b50610400610feb565b34801561089457600080fd5b50601354610400906001600160a01b031681565b3480156108b457600080fd5b506103196108c3366004615185565b611013565b3480156108d457600080fd5b506108e86108e33660046151c6565b61104b565b6040516102f093929190615221565b34801561090357600080fd5b50610319611093565b34801561091857600080fd5b50604554604654604754610937926001600160a01b0390811692169083565b604080516001600160a01b039485168152939092166020840152908201526060016102f0565b34801561096957600080fd5b5061031960045481565b34801561097f57600080fd5b506102b161098e36600461524c565b61109d565b34801561099f57600080fd5b506102b16109ae366004615293565b6110af565b3480156109bf57600080fd5b506104006109ce366004614f4f565b6112ac565b3480156109df57600080fd5b506104e46112bc565b3480156109f457600080fd5b50610319610a03366004614f4f565b61137e565b610a18610a13611389565b611393565b565b6000610a246113b7565b610a3c600080516020615be6833981519152336113e1565b610a47848484611468565b9050610a536001600355565b9392505050565b60008054610a67906152ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610a93906152ce565b8015610ae05780601f10610ab557610100808354040283529160200191610ae0565b820191906000526020600020905b815481529060010190602001808311610ac357829003601f168201915b505050505081565b600254600090610100900460ff168015610b1457506000610b0761183e565b546001600160a01b031614155b8015610b2a57506006546001600160a01b031615155b905090565b610b37614c2c565b610b4f600080516020615be6833981519152336113e1565b81610b6257610b5d83611862565b610b6b565b610b6b8361199d565b90505b92915050565b600080610b7f6113b7565b610b97600080516020615be6833981519152336113e1565b610ba48787878787611a8e565b9092509050610bb36001600355565b9550959350505050565b600080604560010160009054906101000a90046001600160a01b03166001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190615302565b9050336001600160a01b03821614610c64576040516282b42960e81b815260040160405180910390fd5b86860160008080610c778789018961531f565b92509250925082610c9357610c8e828c8684611af2565b610c9f565b610c9f828c8684612127565b610cb36001600160a01b038d1686866125d0565b5060019b9a5050505050505050505050565b60328160088110610cd557600080fd5b01546001600160a01b0316905081565b610cf06000336113e1565b610cf98161268e565b50565b610d076000336113e1565b610cf9816127ae565b6000610d1a6113b7565b610d32600080516020615be6833981519152336113e1565b610d3f8686868686612972565b9050610d4b6001600355565b95945050505050565b604454606090610100900460ff166001600160401b03811115610d7957610d79614f99565b604051908082528060200260200182016040528015610da2578160200160208202803683370190505b506045546040516374d7814960e11b81529192506001600160a01b03169063e9af029290610dd4903090600401614f68565b600060405180830381600087803b158015610dee57600080fd5b505af1158015610e02573d6000803e3d6000fd5b50505050610e0e612dec565b60005b604454610100900460ff16811015610ecb57603b8160088110610e3657610e36615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190610e65903090600401614f68565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea6919061538d565b828281518110610eb857610eb8615377565b6020908102919091010152600101610e11565b5090565b610eda6000336113e1565b610a18612df5565b610eed6000336113e1565b610cf981612e43565b60308160088110610f0657600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6000610b2a611389565b610f3a84848484612f17565b50505050565b603b8160088110610cd557600080fd5b6000600080516020615bc68339815191525b546001600160a01b0316919050565b610f7c6000336113e1565b610cf9816130ad565b600080610b6e565b610fb77faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c336113e1565b610cf98161314f565b610fcb6000336113e1565b610a18613325565b60018054610a67906152ce565b6000610b6e82613366565b60007f94de5bb549dc3b3f2a557f7067a0d52c6921e50388ea6bea5cf4ee301cf1a400610f62565b600061102d600080516020615be6833981519152336113e1565b6110356113b7565b61103f838361337a565b9050610b6e6001600355565b611053614c2c565b61105b614c2c565b611063614c2c565b61107b600080516020615be6833981519152336113e1565b6110858585613498565b9250925092505b9250925092565b6000610b2a6135ec565b6110aa8383836000612f17565b505050565b6110ba6000336113e1565b60006110cc60c0830160a08401614f7c565b6001600160a01b0316036110f357604051639fabe1c160e01b815260040160405180910390fd5b61110b61110660c0830160a08401614f7c565b612e43565b600061111d60e0830160c08401614f7c565b6001600160a01b0316146111435761114361113e60e0830160c08401614f7c565b61268e565b7fffe86e2b60bc69a3832641185d195b8ed6fe0e65c6cc390c67dbb9d7cc30430080546001600160a01b03191630179055600061117e61183e565b546040516001600160a01b039091169063dacd7bcd60e01b906111a590859060240161568c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516111e391906157af565b600060405180830381855af49150503d806000811461121e576040519150601f19603f3d011682016040523d82523d6000602084013e611223565b606091505b5050905080611245576040516339b21b5d60e11b815260040160405180910390fd5b60006112556102008401846157cb565b905011156112a8576112a861126e6102008401846157cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127ae92505050565b5050565b60278160088110610cd557600080fd5b60455460405163331faf7160e21b81526060916000916001600160a01b039091169063cc7ebdc4906112f2903090600401614f68565b602060405180830381865afa15801561130f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611333919061538d565b60445490915060ff6101009091041660011461136f5761136a611363603b600101546001600160a01b0316613612565b8290613728565b611378565b6113788161378c565b91505090565b6000610b6e826137d3565b6000610f6261183e565b3660008037600080366000845af43d6000803e8080156113b2573d6000f35b3d6000fd5b6002600354036113da57604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b7f94de5bb549dc3b3f2a557f7067a0d52c6921e50388ea6bea5cf4ee301cf1a400546040516312d9a6ad60e01b8152600481018490526001600160a01b038381166024830152909116906312d9a6ad9060440160006040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050505050565b6000808060005b60445460ff168110156117d957600a87826008811061149057611490615377565b6020020135106117d157602781600881106114ad576114ad615377565b01546006546001600160a01b03908116911614611626576026546006546001600160a01b03918216916398cd40369116602784600881106114f0576114f0615377565b01546001600160a01b03168a856008811061150d5761150d615377565b60200201358a8a8781811061152457611524615377565b905060200281019061153691906157cb565b6040518663ffffffff1660e01b8152600401611556959493929190615811565b60408051808303816000875af1158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190615845565b93509150602781600881106115af576115af615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a08231906115de903090600401614f68565b602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061538d565b9150611659565b86816008811061163857611638615377565b6020020135915086816008811061165157611651615377565b602002013592505b6000611664826137d3565b905060006027836008811061167b5761167b615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a08231906116aa903090600401614f68565b602060405180830381865afa1580156116c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116eb919061538d565b90506116f983858a8a61388b565b81611703846137d3565b0391506027836008811061171957611719615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190611748903090600401614f68565b602060405180830381865afa158015611765573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611789919061538d565b90036117a26117966138a0565b54829061ffff166138c4565b8210156117ca57604051637640cbd760e01b8152600481018390526024015b60405180910390fd5b5050928201925b60010161146f565b506009805467ffffffffffffffff1916426001600160401b038116919091179091556040805185815260208101929092527fb089286041f4c8faf70006ecf5d7f8b6dce0f3bba8bdc30c237fd656060bff2c910160405180910390a150509392505050565b7f25da31c40a795936c86465edf13c4b2aa77f4e3670b8bdd5625b556504dc9d0090565b61186a614c2c565b6000806118756135ec565b61187d6138d7565b60315491935091508282019060009061189e90839061ffff16612710613991565b905060006118aa613a41565b90506118b7826032613a8f565b8101870196506118c78786613a9e565b965060006118d6888403613ab4565b905060006118e382613b0e565b90506000811380156118f457508881115b156118fd578098505b60005b60445460ff1681101561199057600a8a1061199057600083826008811061192957611929615377565b6020020151131561198857600061195584836008811061194b5761194b615377565b6020020151613b3f565b90508a8111156119625750895b61196c8183613b75565b8a836008811061197e5761197e615377565b6020020152909903985b600101611900565b5050505050505050919050565b6119a5614c2c565b6000806119b06135ec565b6119b86138d7565b909250905081810160008590036119f5576031546000906119e590839061ffff1661271090810390613991565b90506119f18382613c20565b9550505b6000611a02868501613ab4565b905060005b60445460ff16811015611a8457600a8710611a84576000828260088110611a3057611a30615377565b60200201511215611a7c576000611a5283836008811061194b5761194b615377565b905087811115611a5f5750865b80878360088110611a7257611a72615377565b6020020152909603955b600101611a07565b5050505050919050565b6044546000908190610100900460ff1685141580611ab1575060445460ff168314155b15611acf57604051635cb045db60e01b815260040160405180910390fd5b611ad9868661337a565b9150611ae6878585611468565b90509550959350505050565b6033546001600160a01b0316630e752702611b1485611b0f613c37565b613a9e565b6040518263ffffffff1660e01b8152600401611b3291815260200190565b6020604051808303816000875af1158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b75919061538d565b506027546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ba7903090600401614f68565b602060405180830381865afa158015611bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be8919061538d565b6032549091506001600160a01b031663db006a75611c0586613ca9565b6040518263ffffffff1660e01b8152600401611c2391815260200190565b6020604051808303816000875af1158015611c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c66919061538d565b506027546040516370a0823160e01b815282916001600160a01b0316906370a0823190611c97903090600401614f68565b602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd8919061538d565b611ce2919061587f565b6026546027546028546040516370a0823160e01b81529394506000936001600160a01b03938416936398cd403693811692169082906370a0823190611d2b903090600401614f68565b602060405180830381865afa158015611d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6c919061538d565b876040518563ffffffff1660e01b8152600401611d8c9493929190615892565b60408051808303816000875af1158015611daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dce9190615845565b5090508381118015611df157506028546006546001600160a01b03918216911614155b15611f08576000611e00613c37565b90508015611e8c576000611e1686840383613a9e565b60335460405163073a938160e11b8152600481018390529192506001600160a01b031690630e752702906024016020604051808303816000875af1158015611e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e86919061538d565b50909103905b84821115611f065760335460405163140e25ad60e31b815286840360048201526001600160a01b039091169063a0712d68906024016020604051808303816000875af1158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f04919061538d565b505b505b6027546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611f39903090600401614f68565b602060405180830381865afa158015611f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7a919061538d565b9050611f87876005613d3f565b96508681101561211e576032546001600160a01b031663db006a756120bb61204a611fb0610f50565b6001600160a01b031663029b465d6027600101546001600160a01b0316878e036027600001546040516001600160e01b031960e086901b1681526120029392916001600160a01b0316906004016158c5565b602060405180830381865afa15801561201f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612043919061538d565b6000613d52565b6032546040516370a0823160e01b81526001600160a01b03909116906370a082319061207a903090600401614f68565b602060405180830381865afa158015612097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f919061538d565b6040518263ffffffff1660e01b81526004016120d991815260200190565b6020604051808303816000875af11580156120f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211c919061538d565b505b50505050505050565b6032546047546001600160a01b039091169063a0712d689061214f9086906063198101613991565b6040518263ffffffff1660e01b815260040161216d91815260200190565b6020604051808303816000875af115801561218c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b0919061538d565b5060006121be846001613dfd565b60335460405163317afabb60e21b8152600481018390529192506001600160a01b03169063c5ebeaec906024016020604051808303816000875af115801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e919061538d565b50602654602854602754604051634c66a01b60e11b81526001600160a01b03938416936398cd40369361226e939082169291169086908890600401615892565b60408051808303816000875af115801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190615845565b50506027546040516370a0823160e01b81526000916001600160a01b0316906370a08231906122e3903090600401614f68565b602060405180830381865afa158015612300573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612324919061538d565b6006549091506001600160a01b03166027600001546001600160a01b0316146124bf57838111156123c55760325460405163140e25ad60e31b815285830360048201526001600160a01b039091169063a0712d68906024016020604051808303816000875af115801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf919061538d565b506124bf565b6032546001600160a01b031663db006a756123de610f50565b60285460275460405163029b465d60e01b81526001600160a01b039384169363029b465d9361241b9390821692898d0392909116906004016158c5565b602060405180830381865afa158015612438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245c919061538d565b6040518263ffffffff1660e01b815260040161247a91815260200190565b6020604051808303816000875af1158015612499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bd919061538d565b505b6028546040516370a0823160e01b81526001600160a01b03909116906370a08231906124ef903090600401614f68565b602060405180830381865afa15801561250c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612530919061538d565b6006549091506001600160a01b03166027600101546001600160a01b03161480159061255c5750600081115b156114605760335460405163073a938160e11b8152600481018390526001600160a01b0390911690630e752702906024016020604051808303816000875af11580156125ac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211e919061538d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526126218482613ebe565b610f3a576040516001600160a01b0384811660248301526000604483015261268491869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613f61565b610f3a8482613f61565b6001600160a01b0381166126b557604051639fabe1c160e01b815260040160405180910390fd5b6000816001600160a01b0316630268d37960e01b60006040516024016126db9190614f68565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161271991906157af565b600060405180830381855afa9150503d8060008114612754576040519150601f19603f3d011682016040523d82523d6000602084013e612759565b606091505b505090508061277b5760405163031773fb60e61b815260040160405180910390fd5b81600080516020615bc68339815191525b80546001600160a01b0319166001600160a01b03929092169190911790555050565b808060200190518101906127c291906158e8565b8051604580546001600160a01b03199081166001600160a01b039384169081179092556020840151604680549092169084161790556040928301516047556032549251638e8f294b60e01b81526000939192638e8f294b9261282992911690600401614f68565b606060405180830381865afa158015612846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286a9190615952565b5060305490925062010000900461ffff1615159050806128af5750604754670de0b6b3a764000082900368056bc75e2d63100000816128ab576128ab615995565b0411155b156128cc576040516282b42960e81b815260040160405180910390fd5b6128d7600019613fbb565b6045546001600160a01b031663c299823861290f6032600101546001600160a01b03166032600001546001600160a01b031690614053565b6040518263ffffffff1660e01b815260040161292b91906159ab565b6000604051808303816000875af115801561294a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110aa91908101906159ec565b600061297c6140c2565b600a556000612989614110565b905060008060005b60445460ff16811015612cfc57600a8a82600881106129b2576129b2615377565b602002013510612cf4576129dc8a82600881106129d1576129d1615377565b602002013582613d52565b92506000602782600881106129f3576129f3615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190612a22903090600401614f68565b602060405180830381865afa158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a63919061538d565b9050612a748260ff16858a8a61415e565b8060278360088110612a8857612a88615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190612ab7903090600401614f68565b602060405180830381865afa158015612ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af8919061538d565b60065491900393506001600160a01b031660278360088110612b1c57612b1c615377565b01546001600160a01b031614612c7b57878783818110612b3e57612b3e615377565b9050602002810190612b5091906157cb565b9050600003612b7257604051635cb045db60e01b815260040160405180910390fd5b600160278360088110612b8757612b87615377565b01546001600160a01b031603612ba057612ba083614188565b6026546001600160a01b03166398cd403660278460088110612bc457612bc4615377565b01546006546001600160a01b0391821691168e8660088110612be857612be8615377565b60200201358c8c88818110612bff57612bff615377565b9050602002810190612c1191906157cb565b6040518663ffffffff1660e01b8152600401612c31959493929190615811565b60408051808303816000875af1158015612c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c739190615845565b509250612c95565b8a8260088110612c8d57612c8d615377565b602002013592505b612ccb612ca06138a0565b5461ffff16612cc58d8560088110612cba57612cba615377565b602002013585614216565b906138c4565b831015612cee57604051637640cbd760e01b8152600481018490526024016117c1565b50938101935b600101612991565b50601a8054840190819055600754600a54600092612d3792612d29920269d3c21bcecceda1000000613991565b612d3161427f565b90613c20565b90508881108015612d46575087155b15612d6757604051637640cbd760e01b8152600481018290526024016117c1565b612d728588886142cd565b600880546001600160401b0342908116600160801b0267ffffffffffffffff60801b1990921691909117909155604080518781526020810184905280820192909252517f199c51a8cd3b6aa8f80abc4f5c713f20c111837887163a1bbaa2dd5f61a554ab9181900360600190a15050505095945050505050565b610a1847614188565b612dfd6143d6565b6002805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612e399190614f68565b60405180910390a1565b6001600160a01b038116612e6a57604051639fabe1c160e01b815260040160405180910390fd5b60408051600481526024810182526020810180516001600160e01b0316634555d5c960e01b17905290516000916001600160a01b03841691612eac91906157af565b600060405180830381855afa9150503d8060008114612ee7576040519150601f19603f3d011682016040523d82523d6000602084013e612eec565b606091505b5050905080612f0e5760405163031773fb60e61b815260040160405180910390fd5b8161278c61183e565b600080516020615bc68339815191526000829003612fd65780546001600160a01b031615612fbd5780546006546040516366225ccd60e11b81526001600160a01b039182166004820152878216602482015291169063cc44b99a90604401602060405180830381865afa158015612f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb6919061538d565b9150612fd6565b6040516370cc4dc560e01b815260040160405180910390fd5b6000612fe061183e565b546040516001600160a01b0390911690631e87b48d60e21b9061300d908990899089908990602401615a91565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161304b91906157af565b600060405180830381855af49150503d8060008114613086576040519150601f19603f3d011682016040523d82523d6000602084013e61308b565b606091505b5050905080611460576040516339b21b5d60e11b815260040160405180910390fd5b6001600160a01b0381811660009081527fcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d14006020908152604091829020825180840190935280546001600160401b0381168452600160401b900490931690820152613116906143ff565b1561312057600080fd5b80546001600160e01b03191633600160401b0267ffffffffffffffff191617426001600160401b031617905550565b6001600160a01b0381811660009081527fcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d14006020908152604091829020825180840190935280546001600160401b0381168452600160401b9004909316908201526131b8906143ff565b6131c157600080fd5b805467ffffffffffffffff191681556000196001600160a01b0383160161324e578054604051600091600160401b90046001600160a01b03169047908381818185875af1925050503d8060008114613235576040519150601f19603f3d011682016040523d82523d6000602084013e61323a565b606091505b505090508061324857600080fd5b506132de565b80546040516370a0823160e01b81526132de916001600160a01b03600160401b909104811691908516906370a082319061328c903090600401614f68565b602060405180830381865afa1580156132a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cd919061538d565b6001600160a01b0385169190614422565b506001600160a01b031660009081527fcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d14006020526040902080546001600160e01b0319169055565b61332d614453565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e2c3390565b6000610b6e613374836137d3565b83614216565b600061338e61338761447d565b84846144d1565b600854601054600f5460405163615bbc6760e11b8152600160c01b9093046001600160401b0316600484015260248301919091526044820152909150819073__$e35f34868618272d02ce9e16afb239dde6$__9063c2b778ce90606401602060405180830381865af4158015613408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342c919061538d565b01601055600880546001600160c01b0316600160c01b426001600160401b03811691909102919091179091556040805183815260208101929092527f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c910160405180910390a192915050565b6134a0614c2c565b6134a8614c2c565b6134b0614c2c565b831561351c576028546001600160a01b03908116845260275416825260646134d8863561466e565b6134e2919061587f565b81526006546027546001600160a01b03908116911614613517576135146135076138a0565b5482519061ffff166138c4565b81525b61108c565b6027546001600160a01b0390811684526028541682526135e061353d6138a0565b5461ffff1661354a610f50565b6028546001600160a01b039182169163029b465d911661356a8a356146a3565b60275460405160e085901b6001600160e01b03191681526135999392916001600160a01b0316906004016158c5565b602060405180830381865afa1580156135b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135da919061538d565b90613d3f565b81529194909350909150565b6000805b60445460ff16811015610ecb5761360681613366565b909101906001016135f0565b60006001600160a01b0382166001148061363957506025546001600160a01b038381169116145b6136af576040516370a0823160e01b81526001600160a01b038316906370a0823190613669903090600401614f68565b602060405180830381865afa158015613686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136aa919061538d565b610b6e565b6025546040516370a0823160e01b81526001600160a01b03909116906370a08231906136df903090600401614f68565b602060405180830381865afa1580156136fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613720919061538d565b470192915050565b604080516002808252606080830184529260208301908036833701905050905082828260008151811061375d5761375d615377565b602002602001018360018151811061377757613777615377565b60209081029190910101919091525292915050565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106137c2576137c2615377565b602002602001018181525050919050565b600081156137e357506000919050565b610b6e6137ee610f50565b6001600160a01b031663029b465d6027600101546001600160a01b0316613813613c37565b60275460405160e085901b6001600160e01b03191681526138429392916001600160a01b0316906004016158c5565b602060405180830381865afa15801561385f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613883919061538d565b612d316146fc565b60008411610f3a57610f3a836001848461477b565b7f158e00504b6e2b9f9abe924926be99e72fb1fd7c6bcaafc95ce02d9dabf0530090565b6000610b6b838361271003612710613991565b60008060006138e461183e565b5460408051600481526024810182526020810180516001600160e01b031663122835d560e21b17905290516001600160a01b039092169161392591906157af565b600060405180830381855af49150503d8060008114613960576040519150601f19603f3d011682016040523d82523d6000602084013e613965565b606091505b50915091508161397657600061398a565b8080602001905181019061398a919061538d565b9250505090565b60008383028160001985870982811083820303915050806000036139c8578382816139be576139be615995565b0492505050610a53565b8084116139d457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000806000613a4e61183e565b5460408051600481526024810182526020810180516001600160e01b031663711c9fab60e11b17905290516001600160a01b039092169161392591906157af565b6000610b6b8383612710613991565b6000818310613aad5781610b6b565b5090919050565b613abc614c2c565b81600003613acf57613acc6135ec565b91505b60005b60445460ff16811015613b0857613ae981846148fc565b828260088110613afb57613afb615377565b6020020152600101613ad2565b50919050565b6000805b6008811015613b0857828160088110613b2d57613b2d615377565b60200201519190910190600101613b12565b6000600160ff1b8214613b635760008213613b5d576136aa82615ac7565b81610b6e565b610b6e6001600160ff1b036001615ae3565b6000600080516020615bc6833981519152546006546001600160a01b039182169163029b465d91168560278660088110613bb157613bb1615377565b01546040516001600160e01b031960e086901b168152613bdf9392916001600160a01b0316906004016158c5565b602060405180830381865afa158015613bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b919061538d565b600081831015613c31576000610b6b565b50900390565b6033546040516395dd919360e01b81526000916001600160a01b0316906395dd919390613c68903090600401614f68565b602060405180830381865afa158015613c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a919061538d565b6000610b6e60328201546040516370a0823160e01b81526001600160a01b03909116906370a0823190613ce0903090600401614f68565b602060405180830381865afa158015613cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d21919061538d565b611b0f612043613d2f6138a0565b5461ffff166135da876000614982565b6000610b6b838361271001612710613991565b600060328260088110613d6757613d67615377565b0160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddd919061538d565b83670de0b6b3a76400000281613df557613df5615995565b049392505050565b6000610b6b82613e0e576064613e11565b60005b60475460ff91909116810390613e25610f50565b6001600160a01b031663029b465d6027600001546001600160a01b031688602760015b01546040516001600160e01b031960e086901b168152613e769392916001600160a01b0316906004016158c5565b602060405180830381865afa158015613e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb7919061538d565b9190613991565b6000806000846001600160a01b031684604051613edb91906157af565b6000604051808303816000865af19150503d8060008114613f18576040519150601f19603f3d011682016040523d82523d6000602084013e613f1d565b606091505b5091509150818015613f47575080511580613f47575080806020019051810190613f479190615af6565b8015610d4b5750505050506001600160a01b03163b151590565b6000613f766001600160a01b038416836149d5565b90508051600014158015613f9b575080806020019051810190613f999190615af6565b155b156110aa5782604051635274afe760e01b81526004016117c19190614f68565b60008111613fcb57600019613fcd565b805b905060005b60445460ff168110156112a857600060328260088110613ff457613ff4615377565b01546001600160a01b0316146112a85761404b6032826008811061401a5761401a615377565b01546001600160a01b0316836027846008811061403957614039615377565b01546001600160a01b031691906125d0565b600101613fd2565b604080516002808252606080830184529260208301908036833701905050905082828260008151811061408857614088615377565b60200260200101836001815181106140a2576140a2615377565b6001600160a01b0393841660209182029290920101529116905292915050565b60008060006140cf61183e565b5460408051600481526024810182526020810180516001600160e01b0316638726972960e01b17905290516001600160a01b039092169161392591906157af565b600080600061411d61183e565b5460408051600481526024810182526020810180516001600160e01b0316637ed76e6360e01b17905290516001600160a01b039092169161392591906157af565b60008411610f3a57600061417284866149e3565b9050614181816000858561477b565b5050505050565b478111156141ac57604051630ec59aa560e01b8152600481018290526024016117c1565b8015610cf957602560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561420257600080fd5b505af1158015611460573d6000803e3d6000fd5b6000600080516020615bc6833981519152546001600160a01b031663029b465d6027846008811061424957614249615377565b01546006546040516001600160e01b031960e085901b168152613bdf926001600160a01b039081169289929116906004016158c5565b600080600061428c61183e565b5460408051600481526024810182526020810180516001600160e01b031663478e148560e11b17905290516001600160a01b039092169161392591906157af565b6027546040516370a0823160e01b81526000916001600160a01b0316906370a08231906142fe903090600401614f68565b602060405180830381865afa15801561431b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061433f919061538d565b905060008111801561436257506027546006546001600160a01b03918216911614155b15610f3a5760325460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d68906024016020604051808303816000875af11580156143b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614181919061538d565b60025462010000900460ff16610a1857604051638dfc202b60e01b815260040160405180910390fd5b600061440a82614a86565b158015610b6e575061441b82614aba565b1592915050565b6040516001600160a01b038381166024830152604482018390526110aa91859182169063a9059cbb90606401612652565b60025462010000900460ff1615610a185760405163d93c066560e01b815260040160405180910390fd5b604454606090610100900460ff166001600160401b038111156144a2576144a2614f99565b6040519080825280602002602001820160405280156144cb578160200160208202803683370190505b50905090565b60006144eb600080516020615be6833981519152336113e1565b6000805b604454610100900460ff16811015614665576006546001600160a01b0316603b826008811061452057614520615377565b01546001600160a01b0316148015906145525750600a86828151811061454857614548615377565b6020026020010151115b1561463e576026546001600160a01b03166398cd4036603b836008811061457b5761457b615377565b015460065489516001600160a01b0392831692909116908a90869081106145a4576145a4615377565b60200260200101518989878181106145be576145be615377565b90506020028101906145d091906157cb565b6040518663ffffffff1660e01b81526004016145f0959493929190615811565b60408051808303816000875af115801561460e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146329190615845565b5092830192915061465d565b85818151811061465057614650615377565b6020026020010151830192505b6001016144ef565b50509392505050565b600061469a61469361468584604754606491020590565b61468d6146fc565b01614ade565b6000614afa565b60000392915050565b6000806146ae6146fc565b60305490915061ffff16156146e5576146e06146d96146d285604754606491020590565b8303614ade565b6000614b09565b610a53565b610a536146f06138a0565b54829061ffff16613d3f565b6000610b2a60328201546040516370a0823160e01b81526001600160a01b03909116906370a0823190614733903090600401614f68565b602060405180830381865afa158015614750573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614774919061538d565b60006149e3565b600281101561479d57604051635cb045db60e01b815260040160405180910390fd5b6046546040805163026b1d5f60e01b815290516001600160a01b039092169163026b1d5f916004808201926020929091908290030181865afa1580156147e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061480b9190615302565b6001600160a01b03166342b0b77c3085614830576028546001600160a01b031661483d565b6027546001600160a01b03165b866148505761484b886146a3565b614863565b61486361485c8961466e565b6001614982565b87898888600281811061487857614878615377565b905060200281019061488a91906157cb565b60405160200161489d9493929190615b13565b60405160208183030381529060405260006040518663ffffffff1660e01b81526004016148ce959493929190615b35565b600060405180830381600087803b1580156148e857600080fd5b505af115801561211c573d6000803e3d6000fd5b6000816000036149115761490e6135ec565b91505b600061491c84613366565b60315490915061ffff1615614978576149696030856008811061494157614941615377565b6010810491909101546031548692600f166002026101000a90910461ffff9081169116613991565b6149739082615b7e565b61497a565b805b949350505050565b6000610b6b6045600201548361499957606461499c565b60005b60ff16604560020154036149ae610f50565b6001600160a01b031663029b465d6027600101546001600160a01b03168860276000613e48565b6060610b6b83836000614b18565b6000670de0b6b3a764000060328360088110614a0157614a01615377565b0160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a77919061538d565b840281613df557613df5615995565b600062093a806202a3008360000151614a9f9190615ba5565b614aa99190615ba5565b6001600160401b0316421192915050565b8051600090614acd906202a30090615ba5565b6001600160401b0316421092915050565b6000614aeb826000613dfd565b614af3613c37565b0392915050565b6000818312613aad5781610b6b565b6000818313613aad5781610b6b565b606081471015614b3d573060405163cd78605960e01b81526004016117c19190614f68565b600080856001600160a01b03168486604051614b5991906157af565b60006040518083038185875af1925050503d8060008114614b96576040519150601f19603f3d011682016040523d82523d6000602084013e614b9b565b606091505b5091509150614bab868383614bb5565b9695505050505050565b606082614bc5576146e082614c03565b8151158015614bdc57506001600160a01b0384163b155b15614bfc5783604051639996b31560e01b81526004016117c19190614f68565b5080610a53565b805115614c135780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061010001604052806008906020820280368337509192915050565b600060208284031215614c5d57600080fd5b81356001600160e01b03198116811461497857600080fd5b806101008101831015610b6e57600080fd5b60008083601f840112614c9957600080fd5b5081356001600160401b03811115614cb057600080fd5b6020830191508360208260051b8501011115614ccb57600080fd5b9250929050565b60008060006101208486031215614ce857600080fd5b614cf28585614c75565b92506101008401356001600160401b03811115614d0e57600080fd5b614d1a86828701614c87565b9497909650939450505050565b60005b83811015614d42578181015183820152602001614d2a565b50506000910152565b60008151808452614d63816020860160208601614d27565b601f01601f19169290920160200192915050565b602081526000610b6b6020830184614d4b565b8015158114610cf957600080fd5b60008060408385031215614dab57600080fd5b823591506020830135614dbd81614d8a565b809150509250929050565b8060005b6008811015610f3a578151845260209384019390910190600101614dcc565b6101008101610b6e8284614dc8565b60008060008060006101408688031215614e1357600080fd5b614e1d8787614c75565b94506101008601356001600160401b0380821115614e3a57600080fd5b614e4689838a01614c87565b9096509450610120880135915080821115614e6057600080fd5b50614e6d88828901614c87565b969995985093965092949392505050565b6001600160a01b0381168114610cf957600080fd5b60008083601f840112614ea557600080fd5b5081356001600160401b03811115614ebc57600080fd5b602083019150836020828501011115614ccb57600080fd5b60008060008060008060a08789031215614eed57600080fd5b8635614ef881614e7e565b955060208701359450604087013593506060870135614f1681614e7e565b925060808701356001600160401b03811115614f3157600080fd5b614f3d89828a01614e93565b979a9699509497509295939492505050565b600060208284031215614f6157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600060208284031215614f8e57600080fd5b813561497881614e7e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614fd757614fd7614f99565b604052919050565b600082601f830112614ff057600080fd5b81356001600160401b0381111561500957615009614f99565b61501c601f8201601f1916602001614faf565b81815284602083860101111561503157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561506057600080fd5b81356001600160401b0381111561507657600080fd5b61497a84828501614fdf565b6000806000806000610160868803121561509b57600080fd5b6150a58787614c75565b945061010086013593506101208601356150be81614d8a565b92506101408601356001600160401b038111156150da57600080fd5b614e6d88828901614c87565b6020808252825182820181905260009190848201906040850190845b8181101561511e57835183529284019291840191600101615102565b50909695505050505050565b6000806000806060858703121561514057600080fd5b843561514b81614e7e565b935060208501356001600160401b0381111561516657600080fd5b61517287828801614e93565b9598909750949560400135949350505050565b6000806020838503121561519857600080fd5b82356001600160401b038111156151ae57600080fd5b6151ba85828601614c87565b90969095509350505050565b60008061012083850312156151da57600080fd5b6151e48484614c75565b9150610100830135614dbd81614d8a565b8060005b6008811015610f3a5781516001600160a01b03168452602093840193909101906001016151f9565b610300810161523082866151f5565b61523e6101008301856151f5565b61497a610200830184614dc8565b60008060006040848603121561526157600080fd5b833561526c81614e7e565b925060208401356001600160401b0381111561528757600080fd5b614d1a86828701614e93565b6000602082840312156152a557600080fd5b81356001600160401b038111156152bb57600080fd5b8201610220818503121561497857600080fd5b600181811c908216806152e257607f821691505b602082108103613b0857634e487b7160e01b600052602260045260246000fd5b60006020828403121561531457600080fd5b815161497881614e7e565b60008060006060848603121561533457600080fd5b833561533f81614d8a565b92506020840135915060408401356001600160401b0381111561536157600080fd5b61536d86828701614fdf565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561539f57600080fd5b5051919050565b60008235605e198336030181126153bc57600080fd5b90910192915050565b6000808335601e198436030181126153dc57600080fd5b83016020810192503590506001600160401b038111156153fb57600080fd5b803603821315614ccb57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061543f82836153c5565b6060855261545160608601828461540a565b91505061546160208401846153c5565b858303602087015261547483828461540a565b92505050604083013560ff811680821461548d57600080fd5b604095909501949094529392505050565b80356154a981614e7e565b6001600160a01b0390811683526020820135906154c582614e7e565b90811660208401526040820135906154dc82614e7e565b90811660408401526060820135906154f382614e7e565b908116606084015260808201359061550a82614e7e565b908116608084015260a08201359061552182614e7e565b80821660a085015250505050565b80356001600160401b038116811461554657600080fd5b919050565b6001600160401b038061555d8361552f565b1683528061556d6020840161552f565b166020840152806155806040840161552f565b166040840152806155936060840161552f565b166060840152806155a66080840161552f565b166080840152505050565b6000808335601e198436030181126155c857600080fd5b83016020810192503590506001600160401b038111156155e757600080fd5b8060051b3603821315614ccb57600080fd5b8183526000602080850194508260005b8581101561563757813561561c81614e7e565b6001600160a01b031687529582019590820190600101615609565b509495945050505050565b818352600060208085019450826000805b8681101561568057823561ffff811680821461566d578384fd5b8952509683019691830191600101615653565b50959695505050505050565b60208152600061569c83846153a6565b6102208060208501526156b3610240850183615433565b91506156c5604085016020870161549e565b6156d6610100850160e0870161554b565b6156e46101808601866155b1565b601f196101a08188870301818901526156fe8684866155f9565b955061570c818a018a6155b1565b94509250506101c0818887030181890152615728868585615642565b9550615736818a018a6155b1565b94509250506101e08188870301818901526157528685856155f9565b9550615760818a018a6155b1565b945092505061020081888703018189015261577c8685856155f9565b955061578a818a018a6153c5565b9450925050808786030184880152506157a484838361540a565b979650505050505050565b600082516157c1818460208701614d27565b9190910192915050565b6000808335601e198436030181126157e257600080fd5b8301803591506001600160401b038211156157fc57600080fd5b602001915036819003821315614ccb57600080fd5b6001600160a01b03868116825285166020820152604081018490526080606082018190526000906157a4908301848661540a565b6000806040838503121561585857600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b6e57610b6e615869565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614bab90830184614d4b565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6000606082840312156158fa57600080fd5b604051606081018181106001600160401b038211171561591c5761591c614f99565b604052825161592a81614e7e565b8152602083015161593a81614e7e565b60208201526040928301519281019290925250919050565b60008060006060848603121561596757600080fd5b835161597281614d8a565b60208501516040860151919450925061598a81614d8a565b809150509250925092565b634e487b7160e01b600052601260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561511e5783516001600160a01b0316835292840192918401916001016159c7565b600060208083850312156159ff57600080fd5b82516001600160401b0380821115615a1657600080fd5b818501915085601f830112615a2a57600080fd5b815181811115615a3c57615a3c614f99565b8060051b9150615a4d848301614faf565b8181529183018401918481019088841115615a6757600080fd5b938501935b83851015615a8557845182529385019390850190615a6c565b98975050505050505050565b6001600160a01b0385168152606060208201819052600090615ab6908301858761540a565b905082604083015295945050505050565b6000600160ff1b8201615adc57615adc615869565b5060000390565b80820180821115610b6e57610b6e615869565b600060208284031215615b0857600080fd5b815161497881614d8a565b8415158152836020820152606060408201526000614bab60608301848661540a565b6001600160a01b038681168252851660208201526040810184905260a060608201819052600090615b6890830185614d4b565b905061ffff831660808301529695505050505050565b8181036000831280158383131683831282161715615b9e57615b9e615869565b5092915050565b6001600160401b03818116838216019080821115615b9e57615b9e61586956febb12abea6d8b08b111bc540c50c61a89c6948c27ba2a9f019b29f0ec7e3b320071a9859d7dd21b24504a6f306077ffc2d510b4d4b61128e931fe937441ad1836a2646970667358221220c53a523eec3724721e08eae48dac5396899b0e167d37a2e6178f3c1939f3307c64736f6c63430008190033","deployedBytecode":"0x6080604052600436106102a25760003560e01c80637a1ed23411610165578063bc43cbaf116100cc578063d820f49211610085578063d820f4921461095d578063da8ec8e114610973578063dacd7bcd14610993578063ddef9ea1146109b3578063e7a7250a146109d3578063f5ff5c761461067b578063f8389526146109e8576102a9565b8063bc43cbaf14610873578063c415b95c14610888578063c59ed9cd146108a8578063c9fe4f07146108c8578063cafb2202146108f7578063cff0ab961461090c576102a9565b80638456cb591161011e5780638456cb591461076357806388b51f4b1461077857806395d89b41146107a75780639af1d35a146107bc578063a31048ec1461083c578063b50a957514610853576102a9565b80637a1ed234146106ae5780637bb7bed1146106ce5780637dc0d1d0146106ee5780637f4d8f371461070357806380b4ec9f14610723578063839006f214610743576102a9565b80632b3297f9116102095780633f4ba83a116101c25780633f4ba83a1461055757806347799da81461056c57806349f41a421461062857806350187a26146106485780635c60da1b1461067b5780635c975abb14610690576102a9565b80632b3297f914610483578063313ce567146104a3578063372500ab146104cf5780633778ab1e146104f1578063382ef1881461050757806338d52e0f14610537576102a9565b80631b11d0ff1161025b5780631b11d0ff146103c05780631bb5e2dc146103e05780631cb44dfc1461040d5780631ee427001461042d5780631f8244c71461044d578063252cf2d21461046d576102a9565b806301ffc9a7146102b357806303506456146102f957806306fdde0314610327578063158ef93e14610349578063164fb39c1461035e578063188973681461038b576102a9565b366102a957005b6102b1610a08565b005b3480156102bf57600080fd5b506102e46102ce366004614c4b565b6001600160e01b03191663f4e6f0c160e01b1490565b60405190151581526020015b60405180910390f35b34801561030557600080fd5b50610319610314366004614cd2565b610a1a565b6040519081526020016102f0565b34801561033357600080fd5b5061033c610a5a565b6040516102f09190614d77565b34801561035557600080fd5b506102e4610ae8565b34801561036a57600080fd5b5061037e610379366004614d98565b610b2f565b6040516102f09190614deb565b34801561039757600080fd5b506103ab6103a6366004614dfa565b610b74565b604080519283526020830191909152016102f0565b3480156103cc57600080fd5b506102e46103db366004614ed4565b610bbd565b3480156103ec57600080fd5b506104006103fb366004614f4f565b610cc5565b6040516102f09190614f68565b34801561041957600080fd5b506102b1610428366004614f7c565b610ce5565b34801561043957600080fd5b506102b161044836600461504e565b610cfc565b34801561045957600080fd5b50610319610468366004615082565b610d10565b34801561047957600080fd5b5061031960055481565b34801561048f57600080fd5b50602654610400906001600160a01b031681565b3480156104af57600080fd5b506002546104bd9060ff1681565b60405160ff90911681526020016102f0565b3480156104db57600080fd5b506104e4610d54565b6040516102f091906150e6565b3480156104fd57600080fd5b5061031960145481565b34801561051357600080fd5b506102e4610522366004614f7c565b60156020526000908152604090205460ff1681565b34801561054357600080fd5b50600654610400906001600160a01b031681565b34801561056357600080fd5b506102b1610ecf565b34801561057857600080fd5b50600854600954600a54600b54600c54600d54600e546105c7966001600160401b0380821697600160401b8304821697600160801b8404831697600160c01b909404831696929091169490938a565b604080516001600160401b039b8c168152998b1660208b0152978a1697890197909752948816606088015296909216608086015260a085015260c084015260e0830193909352610100820192909252610120810191909152610140016102f0565b34801561063457600080fd5b506102b1610643366004614f7c565b610ee2565b34801561065457600080fd5b50610668610663366004614f4f565b610ef6565b60405161ffff90911681526020016102f0565b34801561068757600080fd5b50610400610f24565b34801561069c57600080fd5b5060025462010000900460ff166102e4565b3480156106ba57600080fd5b506102b16106c936600461512a565b610f2e565b3480156106da57600080fd5b506104006106e9366004614f4f565b610f40565b3480156106fa57600080fd5b50610400610f50565b34801561070f57600080fd5b506102b161071e366004614f7c565b610f71565b34801561072f57600080fd5b5061031961073e366004614f4f565b610f85565b34801561074f57600080fd5b506102b161075e366004614f7c565b610f8d565b34801561076f57600080fd5b506102b1610fc0565b34801561078457600080fd5b5061078f6202a30081565b6040516001600160401b0390911681526020016102f0565b3480156107b357600080fd5b5061033c610fd3565b3480156107c857600080fd5b50601154601254610802916001600160401b0380821692600160401b8304821692600160801b8104831692600160c01b9091048116911685565b604080516001600160401b03968716815294861660208601529285169284019290925283166060830152909116608082015260a0016102f0565b34801561084857600080fd5b5061078f62093a8081565b34801561085f57600080fd5b5061031961086e366004614f4f565b610fe0565b34801561087f57600080fd5b50610400610feb565b34801561089457600080fd5b50601354610400906001600160a01b031681565b3480156108b457600080fd5b506103196108c3366004615185565b611013565b3480156108d457600080fd5b506108e86108e33660046151c6565b61104b565b6040516102f093929190615221565b34801561090357600080fd5b50610319611093565b34801561091857600080fd5b50604554604654604754610937926001600160a01b0390811692169083565b604080516001600160a01b039485168152939092166020840152908201526060016102f0565b34801561096957600080fd5b5061031960045481565b34801561097f57600080fd5b506102b161098e36600461524c565b61109d565b34801561099f57600080fd5b506102b16109ae366004615293565b6110af565b3480156109bf57600080fd5b506104006109ce366004614f4f565b6112ac565b3480156109df57600080fd5b506104e46112bc565b3480156109f457600080fd5b50610319610a03366004614f4f565b61137e565b610a18610a13611389565b611393565b565b6000610a246113b7565b610a3c600080516020615be6833981519152336113e1565b610a47848484611468565b9050610a536001600355565b9392505050565b60008054610a67906152ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610a93906152ce565b8015610ae05780601f10610ab557610100808354040283529160200191610ae0565b820191906000526020600020905b815481529060010190602001808311610ac357829003601f168201915b505050505081565b600254600090610100900460ff168015610b1457506000610b0761183e565b546001600160a01b031614155b8015610b2a57506006546001600160a01b031615155b905090565b610b37614c2c565b610b4f600080516020615be6833981519152336113e1565b81610b6257610b5d83611862565b610b6b565b610b6b8361199d565b90505b92915050565b600080610b7f6113b7565b610b97600080516020615be6833981519152336113e1565b610ba48787878787611a8e565b9092509050610bb36001600355565b9550959350505050565b600080604560010160009054906101000a90046001600160a01b03166001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190615302565b9050336001600160a01b03821614610c64576040516282b42960e81b815260040160405180910390fd5b86860160008080610c778789018961531f565b92509250925082610c9357610c8e828c8684611af2565b610c9f565b610c9f828c8684612127565b610cb36001600160a01b038d1686866125d0565b5060019b9a5050505050505050505050565b60328160088110610cd557600080fd5b01546001600160a01b0316905081565b610cf06000336113e1565b610cf98161268e565b50565b610d076000336113e1565b610cf9816127ae565b6000610d1a6113b7565b610d32600080516020615be6833981519152336113e1565b610d3f8686868686612972565b9050610d4b6001600355565b95945050505050565b604454606090610100900460ff166001600160401b03811115610d7957610d79614f99565b604051908082528060200260200182016040528015610da2578160200160208202803683370190505b506045546040516374d7814960e11b81529192506001600160a01b03169063e9af029290610dd4903090600401614f68565b600060405180830381600087803b158015610dee57600080fd5b505af1158015610e02573d6000803e3d6000fd5b50505050610e0e612dec565b60005b604454610100900460ff16811015610ecb57603b8160088110610e3657610e36615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190610e65903090600401614f68565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea6919061538d565b828281518110610eb857610eb8615377565b6020908102919091010152600101610e11565b5090565b610eda6000336113e1565b610a18612df5565b610eed6000336113e1565b610cf981612e43565b60308160088110610f0657600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6000610b2a611389565b610f3a84848484612f17565b50505050565b603b8160088110610cd557600080fd5b6000600080516020615bc68339815191525b546001600160a01b0316919050565b610f7c6000336113e1565b610cf9816130ad565b600080610b6e565b610fb77faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c336113e1565b610cf98161314f565b610fcb6000336113e1565b610a18613325565b60018054610a67906152ce565b6000610b6e82613366565b60007f94de5bb549dc3b3f2a557f7067a0d52c6921e50388ea6bea5cf4ee301cf1a400610f62565b600061102d600080516020615be6833981519152336113e1565b6110356113b7565b61103f838361337a565b9050610b6e6001600355565b611053614c2c565b61105b614c2c565b611063614c2c565b61107b600080516020615be6833981519152336113e1565b6110858585613498565b9250925092505b9250925092565b6000610b2a6135ec565b6110aa8383836000612f17565b505050565b6110ba6000336113e1565b60006110cc60c0830160a08401614f7c565b6001600160a01b0316036110f357604051639fabe1c160e01b815260040160405180910390fd5b61110b61110660c0830160a08401614f7c565b612e43565b600061111d60e0830160c08401614f7c565b6001600160a01b0316146111435761114361113e60e0830160c08401614f7c565b61268e565b7fffe86e2b60bc69a3832641185d195b8ed6fe0e65c6cc390c67dbb9d7cc30430080546001600160a01b03191630179055600061117e61183e565b546040516001600160a01b039091169063dacd7bcd60e01b906111a590859060240161568c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516111e391906157af565b600060405180830381855af49150503d806000811461121e576040519150601f19603f3d011682016040523d82523d6000602084013e611223565b606091505b5050905080611245576040516339b21b5d60e11b815260040160405180910390fd5b60006112556102008401846157cb565b905011156112a8576112a861126e6102008401846157cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127ae92505050565b5050565b60278160088110610cd557600080fd5b60455460405163331faf7160e21b81526060916000916001600160a01b039091169063cc7ebdc4906112f2903090600401614f68565b602060405180830381865afa15801561130f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611333919061538d565b60445490915060ff6101009091041660011461136f5761136a611363603b600101546001600160a01b0316613612565b8290613728565b611378565b6113788161378c565b91505090565b6000610b6e826137d3565b6000610f6261183e565b3660008037600080366000845af43d6000803e8080156113b2573d6000f35b3d6000fd5b6002600354036113da57604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b7f94de5bb549dc3b3f2a557f7067a0d52c6921e50388ea6bea5cf4ee301cf1a400546040516312d9a6ad60e01b8152600481018490526001600160a01b038381166024830152909116906312d9a6ad9060440160006040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050505050565b6000808060005b60445460ff168110156117d957600a87826008811061149057611490615377565b6020020135106117d157602781600881106114ad576114ad615377565b01546006546001600160a01b03908116911614611626576026546006546001600160a01b03918216916398cd40369116602784600881106114f0576114f0615377565b01546001600160a01b03168a856008811061150d5761150d615377565b60200201358a8a8781811061152457611524615377565b905060200281019061153691906157cb565b6040518663ffffffff1660e01b8152600401611556959493929190615811565b60408051808303816000875af1158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190615845565b93509150602781600881106115af576115af615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a08231906115de903090600401614f68565b602060405180830381865afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061538d565b9150611659565b86816008811061163857611638615377565b6020020135915086816008811061165157611651615377565b602002013592505b6000611664826137d3565b905060006027836008811061167b5761167b615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a08231906116aa903090600401614f68565b602060405180830381865afa1580156116c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116eb919061538d565b90506116f983858a8a61388b565b81611703846137d3565b0391506027836008811061171957611719615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190611748903090600401614f68565b602060405180830381865afa158015611765573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611789919061538d565b90036117a26117966138a0565b54829061ffff166138c4565b8210156117ca57604051637640cbd760e01b8152600481018390526024015b60405180910390fd5b5050928201925b60010161146f565b506009805467ffffffffffffffff1916426001600160401b038116919091179091556040805185815260208101929092527fb089286041f4c8faf70006ecf5d7f8b6dce0f3bba8bdc30c237fd656060bff2c910160405180910390a150509392505050565b7f25da31c40a795936c86465edf13c4b2aa77f4e3670b8bdd5625b556504dc9d0090565b61186a614c2c565b6000806118756135ec565b61187d6138d7565b60315491935091508282019060009061189e90839061ffff16612710613991565b905060006118aa613a41565b90506118b7826032613a8f565b8101870196506118c78786613a9e565b965060006118d6888403613ab4565b905060006118e382613b0e565b90506000811380156118f457508881115b156118fd578098505b60005b60445460ff1681101561199057600a8a1061199057600083826008811061192957611929615377565b6020020151131561198857600061195584836008811061194b5761194b615377565b6020020151613b3f565b90508a8111156119625750895b61196c8183613b75565b8a836008811061197e5761197e615377565b6020020152909903985b600101611900565b5050505050505050919050565b6119a5614c2c565b6000806119b06135ec565b6119b86138d7565b909250905081810160008590036119f5576031546000906119e590839061ffff1661271090810390613991565b90506119f18382613c20565b9550505b6000611a02868501613ab4565b905060005b60445460ff16811015611a8457600a8710611a84576000828260088110611a3057611a30615377565b60200201511215611a7c576000611a5283836008811061194b5761194b615377565b905087811115611a5f5750865b80878360088110611a7257611a72615377565b6020020152909603955b600101611a07565b5050505050919050565b6044546000908190610100900460ff1685141580611ab1575060445460ff168314155b15611acf57604051635cb045db60e01b815260040160405180910390fd5b611ad9868661337a565b9150611ae6878585611468565b90509550959350505050565b6033546001600160a01b0316630e752702611b1485611b0f613c37565b613a9e565b6040518263ffffffff1660e01b8152600401611b3291815260200190565b6020604051808303816000875af1158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b75919061538d565b506027546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ba7903090600401614f68565b602060405180830381865afa158015611bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be8919061538d565b6032549091506001600160a01b031663db006a75611c0586613ca9565b6040518263ffffffff1660e01b8152600401611c2391815260200190565b6020604051808303816000875af1158015611c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c66919061538d565b506027546040516370a0823160e01b815282916001600160a01b0316906370a0823190611c97903090600401614f68565b602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd8919061538d565b611ce2919061587f565b6026546027546028546040516370a0823160e01b81529394506000936001600160a01b03938416936398cd403693811692169082906370a0823190611d2b903090600401614f68565b602060405180830381865afa158015611d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6c919061538d565b876040518563ffffffff1660e01b8152600401611d8c9493929190615892565b60408051808303816000875af1158015611daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dce9190615845565b5090508381118015611df157506028546006546001600160a01b03918216911614155b15611f08576000611e00613c37565b90508015611e8c576000611e1686840383613a9e565b60335460405163073a938160e11b8152600481018390529192506001600160a01b031690630e752702906024016020604051808303816000875af1158015611e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e86919061538d565b50909103905b84821115611f065760335460405163140e25ad60e31b815286840360048201526001600160a01b039091169063a0712d68906024016020604051808303816000875af1158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f04919061538d565b505b505b6027546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611f39903090600401614f68565b602060405180830381865afa158015611f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7a919061538d565b9050611f87876005613d3f565b96508681101561211e576032546001600160a01b031663db006a756120bb61204a611fb0610f50565b6001600160a01b031663029b465d6027600101546001600160a01b0316878e036027600001546040516001600160e01b031960e086901b1681526120029392916001600160a01b0316906004016158c5565b602060405180830381865afa15801561201f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612043919061538d565b6000613d52565b6032546040516370a0823160e01b81526001600160a01b03909116906370a082319061207a903090600401614f68565b602060405180830381865afa158015612097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f919061538d565b6040518263ffffffff1660e01b81526004016120d991815260200190565b6020604051808303816000875af11580156120f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211c919061538d565b505b50505050505050565b6032546047546001600160a01b039091169063a0712d689061214f9086906063198101613991565b6040518263ffffffff1660e01b815260040161216d91815260200190565b6020604051808303816000875af115801561218c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b0919061538d565b5060006121be846001613dfd565b60335460405163317afabb60e21b8152600481018390529192506001600160a01b03169063c5ebeaec906024016020604051808303816000875af115801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e919061538d565b50602654602854602754604051634c66a01b60e11b81526001600160a01b03938416936398cd40369361226e939082169291169086908890600401615892565b60408051808303816000875af115801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190615845565b50506027546040516370a0823160e01b81526000916001600160a01b0316906370a08231906122e3903090600401614f68565b602060405180830381865afa158015612300573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612324919061538d565b6006549091506001600160a01b03166027600001546001600160a01b0316146124bf57838111156123c55760325460405163140e25ad60e31b815285830360048201526001600160a01b039091169063a0712d68906024016020604051808303816000875af115801561239b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bf919061538d565b506124bf565b6032546001600160a01b031663db006a756123de610f50565b60285460275460405163029b465d60e01b81526001600160a01b039384169363029b465d9361241b9390821692898d0392909116906004016158c5565b602060405180830381865afa158015612438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245c919061538d565b6040518263ffffffff1660e01b815260040161247a91815260200190565b6020604051808303816000875af1158015612499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bd919061538d565b505b6028546040516370a0823160e01b81526001600160a01b03909116906370a08231906124ef903090600401614f68565b602060405180830381865afa15801561250c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612530919061538d565b6006549091506001600160a01b03166027600101546001600160a01b03161480159061255c5750600081115b156114605760335460405163073a938160e11b8152600481018390526001600160a01b0390911690630e752702906024016020604051808303816000875af11580156125ac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211e919061538d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526126218482613ebe565b610f3a576040516001600160a01b0384811660248301526000604483015261268491869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050613f61565b610f3a8482613f61565b6001600160a01b0381166126b557604051639fabe1c160e01b815260040160405180910390fd5b6000816001600160a01b0316630268d37960e01b60006040516024016126db9190614f68565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161271991906157af565b600060405180830381855afa9150503d8060008114612754576040519150601f19603f3d011682016040523d82523d6000602084013e612759565b606091505b505090508061277b5760405163031773fb60e61b815260040160405180910390fd5b81600080516020615bc68339815191525b80546001600160a01b0319166001600160a01b03929092169190911790555050565b808060200190518101906127c291906158e8565b8051604580546001600160a01b03199081166001600160a01b039384169081179092556020840151604680549092169084161790556040928301516047556032549251638e8f294b60e01b81526000939192638e8f294b9261282992911690600401614f68565b606060405180830381865afa158015612846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286a9190615952565b5060305490925062010000900461ffff1615159050806128af5750604754670de0b6b3a764000082900368056bc75e2d63100000816128ab576128ab615995565b0411155b156128cc576040516282b42960e81b815260040160405180910390fd5b6128d7600019613fbb565b6045546001600160a01b031663c299823861290f6032600101546001600160a01b03166032600001546001600160a01b031690614053565b6040518263ffffffff1660e01b815260040161292b91906159ab565b6000604051808303816000875af115801561294a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110aa91908101906159ec565b600061297c6140c2565b600a556000612989614110565b905060008060005b60445460ff16811015612cfc57600a8a82600881106129b2576129b2615377565b602002013510612cf4576129dc8a82600881106129d1576129d1615377565b602002013582613d52565b92506000602782600881106129f3576129f3615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190612a22903090600401614f68565b602060405180830381865afa158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a63919061538d565b9050612a748260ff16858a8a61415e565b8060278360088110612a8857612a88615377565b01546040516370a0823160e01b81526001600160a01b03909116906370a0823190612ab7903090600401614f68565b602060405180830381865afa158015612ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af8919061538d565b60065491900393506001600160a01b031660278360088110612b1c57612b1c615377565b01546001600160a01b031614612c7b57878783818110612b3e57612b3e615377565b9050602002810190612b5091906157cb565b9050600003612b7257604051635cb045db60e01b815260040160405180910390fd5b600160278360088110612b8757612b87615377565b01546001600160a01b031603612ba057612ba083614188565b6026546001600160a01b03166398cd403660278460088110612bc457612bc4615377565b01546006546001600160a01b0391821691168e8660088110612be857612be8615377565b60200201358c8c88818110612bff57612bff615377565b9050602002810190612c1191906157cb565b6040518663ffffffff1660e01b8152600401612c31959493929190615811565b60408051808303816000875af1158015612c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c739190615845565b509250612c95565b8a8260088110612c8d57612c8d615377565b602002013592505b612ccb612ca06138a0565b5461ffff16612cc58d8560088110612cba57612cba615377565b602002013585614216565b906138c4565b831015612cee57604051637640cbd760e01b8152600481018490526024016117c1565b50938101935b600101612991565b50601a8054840190819055600754600a54600092612d3792612d29920269d3c21bcecceda1000000613991565b612d3161427f565b90613c20565b90508881108015612d46575087155b15612d6757604051637640cbd760e01b8152600481018290526024016117c1565b612d728588886142cd565b600880546001600160401b0342908116600160801b0267ffffffffffffffff60801b1990921691909117909155604080518781526020810184905280820192909252517f199c51a8cd3b6aa8f80abc4f5c713f20c111837887163a1bbaa2dd5f61a554ab9181900360600190a15050505095945050505050565b610a1847614188565b612dfd6143d6565b6002805462ff0000191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612e399190614f68565b60405180910390a1565b6001600160a01b038116612e6a57604051639fabe1c160e01b815260040160405180910390fd5b60408051600481526024810182526020810180516001600160e01b0316634555d5c960e01b17905290516000916001600160a01b03841691612eac91906157af565b600060405180830381855afa9150503d8060008114612ee7576040519150601f19603f3d011682016040523d82523d6000602084013e612eec565b606091505b5050905080612f0e5760405163031773fb60e61b815260040160405180910390fd5b8161278c61183e565b600080516020615bc68339815191526000829003612fd65780546001600160a01b031615612fbd5780546006546040516366225ccd60e11b81526001600160a01b039182166004820152878216602482015291169063cc44b99a90604401602060405180830381865afa158015612f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb6919061538d565b9150612fd6565b6040516370cc4dc560e01b815260040160405180910390fd5b6000612fe061183e565b546040516001600160a01b0390911690631e87b48d60e21b9061300d908990899089908990602401615a91565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161304b91906157af565b600060405180830381855af49150503d8060008114613086576040519150601f19603f3d011682016040523d82523d6000602084013e61308b565b606091505b5050905080611460576040516339b21b5d60e11b815260040160405180910390fd5b6001600160a01b0381811660009081527fcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d14006020908152604091829020825180840190935280546001600160401b0381168452600160401b900490931690820152613116906143ff565b1561312057600080fd5b80546001600160e01b03191633600160401b0267ffffffffffffffff191617426001600160401b031617905550565b6001600160a01b0381811660009081527fcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d14006020908152604091829020825180840190935280546001600160401b0381168452600160401b9004909316908201526131b8906143ff565b6131c157600080fd5b805467ffffffffffffffff191681556000196001600160a01b0383160161324e578054604051600091600160401b90046001600160a01b03169047908381818185875af1925050503d8060008114613235576040519150601f19603f3d011682016040523d82523d6000602084013e61323a565b606091505b505090508061324857600080fd5b506132de565b80546040516370a0823160e01b81526132de916001600160a01b03600160401b909104811691908516906370a082319061328c903090600401614f68565b602060405180830381865afa1580156132a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cd919061538d565b6001600160a01b0385169190614422565b506001600160a01b031660009081527fcdc3586352dd8d1c1f612724c6bc83986aa6f0f0cfc9ed7d016fc5daa15d14006020526040902080546001600160e01b0319169055565b61332d614453565b6002805462ff00001916620100001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e2c3390565b6000610b6e613374836137d3565b83614216565b600061338e61338761447d565b84846144d1565b600854601054600f5460405163615bbc6760e11b8152600160c01b9093046001600160401b0316600484015260248301919091526044820152909150819073__$e35f34868618272d02ce9e16afb239dde6$__9063c2b778ce90606401602060405180830381865af4158015613408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342c919061538d565b01601055600880546001600160c01b0316600160c01b426001600160401b03811691909102919091179091556040805183815260208101929092527f6c8433a8e155f0af04dba058d4e4695f7da554578963d876bdf4a6d8d6399d9c910160405180910390a192915050565b6134a0614c2c565b6134a8614c2c565b6134b0614c2c565b831561351c576028546001600160a01b03908116845260275416825260646134d8863561466e565b6134e2919061587f565b81526006546027546001600160a01b03908116911614613517576135146135076138a0565b5482519061ffff166138c4565b81525b61108c565b6027546001600160a01b0390811684526028541682526135e061353d6138a0565b5461ffff1661354a610f50565b6028546001600160a01b039182169163029b465d911661356a8a356146a3565b60275460405160e085901b6001600160e01b03191681526135999392916001600160a01b0316906004016158c5565b602060405180830381865afa1580156135b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135da919061538d565b90613d3f565b81529194909350909150565b6000805b60445460ff16811015610ecb5761360681613366565b909101906001016135f0565b60006001600160a01b0382166001148061363957506025546001600160a01b038381169116145b6136af576040516370a0823160e01b81526001600160a01b038316906370a0823190613669903090600401614f68565b602060405180830381865afa158015613686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136aa919061538d565b610b6e565b6025546040516370a0823160e01b81526001600160a01b03909116906370a08231906136df903090600401614f68565b602060405180830381865afa1580156136fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613720919061538d565b470192915050565b604080516002808252606080830184529260208301908036833701905050905082828260008151811061375d5761375d615377565b602002602001018360018151811061377757613777615377565b60209081029190910101919091525292915050565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106137c2576137c2615377565b602002602001018181525050919050565b600081156137e357506000919050565b610b6e6137ee610f50565b6001600160a01b031663029b465d6027600101546001600160a01b0316613813613c37565b60275460405160e085901b6001600160e01b03191681526138429392916001600160a01b0316906004016158c5565b602060405180830381865afa15801561385f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613883919061538d565b612d316146fc565b60008411610f3a57610f3a836001848461477b565b7f158e00504b6e2b9f9abe924926be99e72fb1fd7c6bcaafc95ce02d9dabf0530090565b6000610b6b838361271003612710613991565b60008060006138e461183e565b5460408051600481526024810182526020810180516001600160e01b031663122835d560e21b17905290516001600160a01b039092169161392591906157af565b600060405180830381855af49150503d8060008114613960576040519150601f19603f3d011682016040523d82523d6000602084013e613965565b606091505b50915091508161397657600061398a565b8080602001905181019061398a919061538d565b9250505090565b60008383028160001985870982811083820303915050806000036139c8578382816139be576139be615995565b0492505050610a53565b8084116139d457600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000806000613a4e61183e565b5460408051600481526024810182526020810180516001600160e01b031663711c9fab60e11b17905290516001600160a01b039092169161392591906157af565b6000610b6b8383612710613991565b6000818310613aad5781610b6b565b5090919050565b613abc614c2c565b81600003613acf57613acc6135ec565b91505b60005b60445460ff16811015613b0857613ae981846148fc565b828260088110613afb57613afb615377565b6020020152600101613ad2565b50919050565b6000805b6008811015613b0857828160088110613b2d57613b2d615377565b60200201519190910190600101613b12565b6000600160ff1b8214613b635760008213613b5d576136aa82615ac7565b81610b6e565b610b6e6001600160ff1b036001615ae3565b6000600080516020615bc6833981519152546006546001600160a01b039182169163029b465d91168560278660088110613bb157613bb1615377565b01546040516001600160e01b031960e086901b168152613bdf9392916001600160a01b0316906004016158c5565b602060405180830381865afa158015613bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b919061538d565b600081831015613c31576000610b6b565b50900390565b6033546040516395dd919360e01b81526000916001600160a01b0316906395dd919390613c68903090600401614f68565b602060405180830381865afa158015613c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a919061538d565b6000610b6e60328201546040516370a0823160e01b81526001600160a01b03909116906370a0823190613ce0903090600401614f68565b602060405180830381865afa158015613cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d21919061538d565b611b0f612043613d2f6138a0565b5461ffff166135da876000614982565b6000610b6b838361271001612710613991565b600060328260088110613d6757613d67615377565b0160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddd919061538d565b83670de0b6b3a76400000281613df557613df5615995565b049392505050565b6000610b6b82613e0e576064613e11565b60005b60475460ff91909116810390613e25610f50565b6001600160a01b031663029b465d6027600001546001600160a01b031688602760015b01546040516001600160e01b031960e086901b168152613e769392916001600160a01b0316906004016158c5565b602060405180830381865afa158015613e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb7919061538d565b9190613991565b6000806000846001600160a01b031684604051613edb91906157af565b6000604051808303816000865af19150503d8060008114613f18576040519150601f19603f3d011682016040523d82523d6000602084013e613f1d565b606091505b5091509150818015613f47575080511580613f47575080806020019051810190613f479190615af6565b8015610d4b5750505050506001600160a01b03163b151590565b6000613f766001600160a01b038416836149d5565b90508051600014158015613f9b575080806020019051810190613f999190615af6565b155b156110aa5782604051635274afe760e01b81526004016117c19190614f68565b60008111613fcb57600019613fcd565b805b905060005b60445460ff168110156112a857600060328260088110613ff457613ff4615377565b01546001600160a01b0316146112a85761404b6032826008811061401a5761401a615377565b01546001600160a01b0316836027846008811061403957614039615377565b01546001600160a01b031691906125d0565b600101613fd2565b604080516002808252606080830184529260208301908036833701905050905082828260008151811061408857614088615377565b60200260200101836001815181106140a2576140a2615377565b6001600160a01b0393841660209182029290920101529116905292915050565b60008060006140cf61183e565b5460408051600481526024810182526020810180516001600160e01b0316638726972960e01b17905290516001600160a01b039092169161392591906157af565b600080600061411d61183e565b5460408051600481526024810182526020810180516001600160e01b0316637ed76e6360e01b17905290516001600160a01b039092169161392591906157af565b60008411610f3a57600061417284866149e3565b9050614181816000858561477b565b5050505050565b478111156141ac57604051630ec59aa560e01b8152600481018290526024016117c1565b8015610cf957602560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561420257600080fd5b505af1158015611460573d6000803e3d6000fd5b6000600080516020615bc6833981519152546001600160a01b031663029b465d6027846008811061424957614249615377565b01546006546040516001600160e01b031960e085901b168152613bdf926001600160a01b039081169289929116906004016158c5565b600080600061428c61183e565b5460408051600481526024810182526020810180516001600160e01b031663478e148560e11b17905290516001600160a01b039092169161392591906157af565b6027546040516370a0823160e01b81526000916001600160a01b0316906370a08231906142fe903090600401614f68565b602060405180830381865afa15801561431b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061433f919061538d565b905060008111801561436257506027546006546001600160a01b03918216911614155b15610f3a5760325460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d68906024016020604051808303816000875af11580156143b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614181919061538d565b60025462010000900460ff16610a1857604051638dfc202b60e01b815260040160405180910390fd5b600061440a82614a86565b158015610b6e575061441b82614aba565b1592915050565b6040516001600160a01b038381166024830152604482018390526110aa91859182169063a9059cbb90606401612652565b60025462010000900460ff1615610a185760405163d93c066560e01b815260040160405180910390fd5b604454606090610100900460ff166001600160401b038111156144a2576144a2614f99565b6040519080825280602002602001820160405280156144cb578160200160208202803683370190505b50905090565b60006144eb600080516020615be6833981519152336113e1565b6000805b604454610100900460ff16811015614665576006546001600160a01b0316603b826008811061452057614520615377565b01546001600160a01b0316148015906145525750600a86828151811061454857614548615377565b6020026020010151115b1561463e576026546001600160a01b03166398cd4036603b836008811061457b5761457b615377565b015460065489516001600160a01b0392831692909116908a90869081106145a4576145a4615377565b60200260200101518989878181106145be576145be615377565b90506020028101906145d091906157cb565b6040518663ffffffff1660e01b81526004016145f0959493929190615811565b60408051808303816000875af115801561460e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146329190615845565b5092830192915061465d565b85818151811061465057614650615377565b6020026020010151830192505b6001016144ef565b50509392505050565b600061469a61469361468584604754606491020590565b61468d6146fc565b01614ade565b6000614afa565b60000392915050565b6000806146ae6146fc565b60305490915061ffff16156146e5576146e06146d96146d285604754606491020590565b8303614ade565b6000614b09565b610a53565b610a536146f06138a0565b54829061ffff16613d3f565b6000610b2a60328201546040516370a0823160e01b81526001600160a01b03909116906370a0823190614733903090600401614f68565b602060405180830381865afa158015614750573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614774919061538d565b60006149e3565b600281101561479d57604051635cb045db60e01b815260040160405180910390fd5b6046546040805163026b1d5f60e01b815290516001600160a01b039092169163026b1d5f916004808201926020929091908290030181865afa1580156147e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061480b9190615302565b6001600160a01b03166342b0b77c3085614830576028546001600160a01b031661483d565b6027546001600160a01b03165b866148505761484b886146a3565b614863565b61486361485c8961466e565b6001614982565b87898888600281811061487857614878615377565b905060200281019061488a91906157cb565b60405160200161489d9493929190615b13565b60405160208183030381529060405260006040518663ffffffff1660e01b81526004016148ce959493929190615b35565b600060405180830381600087803b1580156148e857600080fd5b505af115801561211c573d6000803e3d6000fd5b6000816000036149115761490e6135ec565b91505b600061491c84613366565b60315490915061ffff1615614978576149696030856008811061494157614941615377565b6010810491909101546031548692600f166002026101000a90910461ffff9081169116613991565b6149739082615b7e565b61497a565b805b949350505050565b6000610b6b6045600201548361499957606461499c565b60005b60ff16604560020154036149ae610f50565b6001600160a01b031663029b465d6027600101546001600160a01b03168860276000613e48565b6060610b6b83836000614b18565b6000670de0b6b3a764000060328360088110614a0157614a01615377565b0160009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a77919061538d565b840281613df557613df5615995565b600062093a806202a3008360000151614a9f9190615ba5565b614aa99190615ba5565b6001600160401b0316421192915050565b8051600090614acd906202a30090615ba5565b6001600160401b0316421092915050565b6000614aeb826000613dfd565b614af3613c37565b0392915050565b6000818312613aad5781610b6b565b6000818313613aad5781610b6b565b606081471015614b3d573060405163cd78605960e01b81526004016117c19190614f68565b600080856001600160a01b03168486604051614b5991906157af565b60006040518083038185875af1925050503d8060008114614b96576040519150601f19603f3d011682016040523d82523d6000602084013e614b9b565b606091505b5091509150614bab868383614bb5565b9695505050505050565b606082614bc5576146e082614c03565b8151158015614bdc57506001600160a01b0384163b155b15614bfc5783604051639996b31560e01b81526004016117c19190614f68565b5080610a53565b805115614c135780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061010001604052806008906020820280368337509192915050565b600060208284031215614c5d57600080fd5b81356001600160e01b03198116811461497857600080fd5b806101008101831015610b6e57600080fd5b60008083601f840112614c9957600080fd5b5081356001600160401b03811115614cb057600080fd5b6020830191508360208260051b8501011115614ccb57600080fd5b9250929050565b60008060006101208486031215614ce857600080fd5b614cf28585614c75565b92506101008401356001600160401b03811115614d0e57600080fd5b614d1a86828701614c87565b9497909650939450505050565b60005b83811015614d42578181015183820152602001614d2a565b50506000910152565b60008151808452614d63816020860160208601614d27565b601f01601f19169290920160200192915050565b602081526000610b6b6020830184614d4b565b8015158114610cf957600080fd5b60008060408385031215614dab57600080fd5b823591506020830135614dbd81614d8a565b809150509250929050565b8060005b6008811015610f3a578151845260209384019390910190600101614dcc565b6101008101610b6e8284614dc8565b60008060008060006101408688031215614e1357600080fd5b614e1d8787614c75565b94506101008601356001600160401b0380821115614e3a57600080fd5b614e4689838a01614c87565b9096509450610120880135915080821115614e6057600080fd5b50614e6d88828901614c87565b969995985093965092949392505050565b6001600160a01b0381168114610cf957600080fd5b60008083601f840112614ea557600080fd5b5081356001600160401b03811115614ebc57600080fd5b602083019150836020828501011115614ccb57600080fd5b60008060008060008060a08789031215614eed57600080fd5b8635614ef881614e7e565b955060208701359450604087013593506060870135614f1681614e7e565b925060808701356001600160401b03811115614f3157600080fd5b614f3d89828a01614e93565b979a9699509497509295939492505050565b600060208284031215614f6157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600060208284031215614f8e57600080fd5b813561497881614e7e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614fd757614fd7614f99565b604052919050565b600082601f830112614ff057600080fd5b81356001600160401b0381111561500957615009614f99565b61501c601f8201601f1916602001614faf565b81815284602083860101111561503157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561506057600080fd5b81356001600160401b0381111561507657600080fd5b61497a84828501614fdf565b6000806000806000610160868803121561509b57600080fd5b6150a58787614c75565b945061010086013593506101208601356150be81614d8a565b92506101408601356001600160401b038111156150da57600080fd5b614e6d88828901614c87565b6020808252825182820181905260009190848201906040850190845b8181101561511e57835183529284019291840191600101615102565b50909695505050505050565b6000806000806060858703121561514057600080fd5b843561514b81614e7e565b935060208501356001600160401b0381111561516657600080fd5b61517287828801614e93565b9598909750949560400135949350505050565b6000806020838503121561519857600080fd5b82356001600160401b038111156151ae57600080fd5b6151ba85828601614c87565b90969095509350505050565b60008061012083850312156151da57600080fd5b6151e48484614c75565b9150610100830135614dbd81614d8a565b8060005b6008811015610f3a5781516001600160a01b03168452602093840193909101906001016151f9565b610300810161523082866151f5565b61523e6101008301856151f5565b61497a610200830184614dc8565b60008060006040848603121561526157600080fd5b833561526c81614e7e565b925060208401356001600160401b0381111561528757600080fd5b614d1a86828701614e93565b6000602082840312156152a557600080fd5b81356001600160401b038111156152bb57600080fd5b8201610220818503121561497857600080fd5b600181811c908216806152e257607f821691505b602082108103613b0857634e487b7160e01b600052602260045260246000fd5b60006020828403121561531457600080fd5b815161497881614e7e565b60008060006060848603121561533457600080fd5b833561533f81614d8a565b92506020840135915060408401356001600160401b0381111561536157600080fd5b61536d86828701614fdf565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561539f57600080fd5b5051919050565b60008235605e198336030181126153bc57600080fd5b90910192915050565b6000808335601e198436030181126153dc57600080fd5b83016020810192503590506001600160401b038111156153fb57600080fd5b803603821315614ccb57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061543f82836153c5565b6060855261545160608601828461540a565b91505061546160208401846153c5565b858303602087015261547483828461540a565b92505050604083013560ff811680821461548d57600080fd5b604095909501949094529392505050565b80356154a981614e7e565b6001600160a01b0390811683526020820135906154c582614e7e565b90811660208401526040820135906154dc82614e7e565b90811660408401526060820135906154f382614e7e565b908116606084015260808201359061550a82614e7e565b908116608084015260a08201359061552182614e7e565b80821660a085015250505050565b80356001600160401b038116811461554657600080fd5b919050565b6001600160401b038061555d8361552f565b1683528061556d6020840161552f565b166020840152806155806040840161552f565b166040840152806155936060840161552f565b166060840152806155a66080840161552f565b166080840152505050565b6000808335601e198436030181126155c857600080fd5b83016020810192503590506001600160401b038111156155e757600080fd5b8060051b3603821315614ccb57600080fd5b8183526000602080850194508260005b8581101561563757813561561c81614e7e565b6001600160a01b031687529582019590820190600101615609565b509495945050505050565b818352600060208085019450826000805b8681101561568057823561ffff811680821461566d578384fd5b8952509683019691830191600101615653565b50959695505050505050565b60208152600061569c83846153a6565b6102208060208501526156b3610240850183615433565b91506156c5604085016020870161549e565b6156d6610100850160e0870161554b565b6156e46101808601866155b1565b601f196101a08188870301818901526156fe8684866155f9565b955061570c818a018a6155b1565b94509250506101c0818887030181890152615728868585615642565b9550615736818a018a6155b1565b94509250506101e08188870301818901526157528685856155f9565b9550615760818a018a6155b1565b945092505061020081888703018189015261577c8685856155f9565b955061578a818a018a6153c5565b9450925050808786030184880152506157a484838361540a565b979650505050505050565b600082516157c1818460208701614d27565b9190910192915050565b6000808335601e198436030181126157e257600080fd5b8301803591506001600160401b038211156157fc57600080fd5b602001915036819003821315614ccb57600080fd5b6001600160a01b03868116825285166020820152604081018490526080606082018190526000906157a4908301848661540a565b6000806040838503121561585857600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b6e57610b6e615869565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614bab90830184614d4b565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6000606082840312156158fa57600080fd5b604051606081018181106001600160401b038211171561591c5761591c614f99565b604052825161592a81614e7e565b8152602083015161593a81614e7e565b60208201526040928301519281019290925250919050565b60008060006060848603121561596757600080fd5b835161597281614d8a565b60208501516040860151919450925061598a81614d8a565b809150509250925092565b634e487b7160e01b600052601260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561511e5783516001600160a01b0316835292840192918401916001016159c7565b600060208083850312156159ff57600080fd5b82516001600160401b0380821115615a1657600080fd5b818501915085601f830112615a2a57600080fd5b815181811115615a3c57615a3c614f99565b8060051b9150615a4d848301614faf565b8181529183018401918481019088841115615a6757600080fd5b938501935b83851015615a8557845182529385019390850190615a6c565b98975050505050505050565b6001600160a01b0385168152606060208201819052600090615ab6908301858761540a565b905082604083015295945050505050565b6000600160ff1b8201615adc57615adc615869565b5060000390565b80820180821115610b6e57610b6e615869565b600060208284031215615b0857600080fd5b815161497881614d8a565b8415158152836020820152606060408201526000614bab60608301848661540a565b6001600160a01b038681168252851660208201526040810184905260a060608201819052600090615b6890830185614d4b565b905061ffff831660808301529695505050505050565b8181036000831280158383131683831282161715615b9e57615b9e615869565b5092915050565b6001600160401b03818116838216019080821115615b9e57615b9e61586956febb12abea6d8b08b111bc540c50c61a89c6948c27ba2a9f019b29f0ec7e3b320071a9859d7dd21b24504a6f306077ffc2d510b4d4b61128e931fe937441ad1836a2646970667358221220c53a523eec3724721e08eae48dac5396899b0e167d37a2e6178f3c1939f3307c64736f6c63430008190033","abi":[{"inputs":[{"internalType":"address","name":"_accessController","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"AddressZero","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AmountTooHigh","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AmountTooLow","type":"error"},{"inputs":[],"name":"ContractNonCompliant","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"FailedDelegateCall","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidData","type":"error"},{"inputs":[],"name":"MissingOracle","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"}],"name":"DepositRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"DepositRequestCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Harvest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Invest","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"liquidityAvailable","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Liquidate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"RedeemRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"RedeemRequestCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"RESCUE_TIMELOCK","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RESCUE_VALIDITY","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"accessController","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"agent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"contract IERC20Metadata","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimRewards","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimableTransactionFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[8]","name":"_amounts","type":"uint256[8]"},{"internalType":"bytes[]","name":"_harvestParams","type":"bytes[]"},{"internalType":"bytes[]","name":"_investParams","type":"bytes[]"}],"name":"compound","outputs":[{"internalType":"uint256","name":"totalHarvested","type":"uint256"},{"internalType":"uint256","name":"totalInvested","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_loan","type":"uint256"},{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"bytes","name":"_params","type":"bytes"}],"name":"executeOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"exemptionList","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeCollector","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fees","outputs":[{"internalType":"uint64","name":"perf","type":"uint64"},{"internalType":"uint64","name":"mgmt","type":"uint64"},{"internalType":"uint64","name":"entry","type":"uint64"},{"internalType":"uint64","name":"exit","type":"uint64"},{"internalType":"uint64","name":"flash","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"_params","type":"bytes[]"}],"name":"harvest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"}],"internalType":"struct Erc20Metadata","name":"erc20Metadata","type":"tuple"},{"components":[{"internalType":"address","name":"wgas","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"address","name":"feeCollector","type":"address"},{"internalType":"address","name":"swapper","type":"address"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"oracle","type":"address"}],"internalType":"struct CoreAddresses","name":"coreAddresses","type":"tuple"},{"components":[{"internalType":"uint64","name":"perf","type":"uint64"},{"internalType":"uint64","name":"mgmt","type":"uint64"},{"internalType":"uint64","name":"entry","type":"uint64"},{"internalType":"uint64","name":"exit","type":"uint64"},{"internalType":"uint64","name":"flash","type":"uint64"}],"internalType":"struct Fees","name":"fees","type":"tuple"},{"internalType":"address[]","name":"inputs","type":"address[]"},{"internalType":"uint16[]","name":"inputWeights","type":"uint16[]"},{"internalType":"address[]","name":"lpTokens","type":"address[]"},{"internalType":"address[]","name":"rewardTokens","type":"address[]"},{"internalType":"bytes","name":"extension","type":"bytes"}],"internalType":"struct StrategyParams","name":"_params","type":"tuple"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"inputWeights","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"inputs","outputs":[{"internalType":"contract IERC20Metadata","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[8]","name":"_amounts","type":"uint256[8]"},{"internalType":"bytes[]","name":"_params","type":"bytes[]"}],"name":"invest","outputs":[{"internalType":"uint256","name":"totalInvested","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"invested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"invested","outputs":[{"internalType":"uint256","name":"total","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"investedInput","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"last","outputs":[{"internalType":"uint64","name":"feeCollection","type":"uint64"},{"internalType":"uint64","name":"liquidateRequest","type":"uint64"},{"internalType":"uint64","name":"liquidate","type":"uint64"},{"internalType":"uint64","name":"harvest","type":"uint64"},{"internalType":"uint64","name":"invest","type":"uint64"},{"internalType":"uint256","name":"sharePrice","type":"uint256"},{"internalType":"uint256","name":"accountedSharePrice","type":"uint256"},{"internalType":"uint256","name":"accountedProfit","type":"uint256"},{"internalType":"uint256","name":"accountedAssets","type":"uint256"},{"internalType":"uint256","name":"accountedSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[8]","name":"_amounts","type":"uint256[8]"},{"internalType":"uint256","name":"_minLiquidity","type":"uint256"},{"internalType":"bool","name":"_panic","type":"bool"},{"internalType":"bytes[]","name":"_params","type":"bytes[]"}],"name":"liquidate","outputs":[{"internalType":"uint256","name":"totalRecovered","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"liquidateRequest","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lpTokens","outputs":[{"internalType":"contract IERC20Metadata","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxTotalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minLiquidity","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"contract IPriceProvider","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"params","outputs":[{"internalType":"contract IUnitroller","name":"unitroller","type":"address"},{"internalType":"contract IPoolAddressesProvider","name":"aavePoolProvider","type":"address"},{"internalType":"uint256","name":"leverage","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_investing","type":"bool"}],"name":"preview","outputs":[{"internalType":"uint256[8]","name":"amounts","type":"uint256[8]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[8]","name":"_previewAmounts","type":"uint256[8]"},{"internalType":"bool","name":"_investing","type":"bool"}],"name":"previewSwapAddons","outputs":[{"internalType":"address[8]","name":"from","type":"address[8]"},{"internalType":"address[8]","name":"to","type":"address[8]"},{"internalType":"uint256[8]","name":"amounts","type":"uint256[8]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"requestRescue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"rescue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewardTokens","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardsAvailable","outputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_params","type":"bytes"}],"name":"setParams","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"swapper","outputs":[{"internalType":"contract ISwapper","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_agent","type":"address"}],"name":"updateAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"bytes","name":"_swapData","type":"bytes"},{"internalType":"uint256","name":"_exchangeRateBp","type":"uint256"}],"name":"updateAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"bytes","name":"_swapData","type":"bytes"}],"name":"updateAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oracle","type":"address"}],"name":"updateOracle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}